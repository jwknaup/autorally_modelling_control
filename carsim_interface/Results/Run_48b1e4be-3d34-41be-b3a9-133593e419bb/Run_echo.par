PARSFILE
! CarSim 2017.1
! Vehicle-suspension arrangement: i_i
! Revision 33770, April 28, 2017

TITLE Default data set

! Echo: Results\Run_48b1e4be-3d34-41be-b3a9-133593e419bb\Run_echo.par
! ALERT: An error occurred during the model initialization and no run was made.
!        Therefore, the information in this echo file might not be complete.
!        Please check the log file for details about the error.

! This run was attempted 14:37 on August 12, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION AND MODEL OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.

ID_EVENT            0 ; - ! [D] ID number that can be assigned to the current event
ID_RUN              0 ; - ! [D] ID number that can be assigned to a simulation run
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! CALC -- Number of variables activated for import
! NOUT_ANI_LIVE     0 ! CALC -- Number of variables sent live to animators
! NOUT_EXPORT       0 ! CALC -- Number of output variables activated for export
! NOUT_WRITE        0 ! CALC -- Number of output variables written to file
OPT_ABORTIVE_SOCKET_CLOSE 0 ! [D] Use abortive close for license socket connections:
                            ! 0 -> Normal, 1 -> Abortive
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Use buffer for outputs written to file? 0 -> no, write
                      ! during run, 1 -> yes, write after run finishes
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable that already exists. 0 -> write warning in log
                      ! file, 1 -> generate error and stop the run
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INIT_CONFIG     1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is' [I]
OPT_INT_METHOD      2 ! [D] Numerical integration method: 2 -> AM-2; 3 -> AM-3; 4 ->
                      ! AM-4; 1 -> RK-2; 0 -> AB-2 (full step); -1 -> Euler
OPT_IO_UPDATE       1 ! [D] Option for exchanging I/O variables with other tools: 1
                      ! -> use T_DT (half step), 0 -> use TSTEP (full step)
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [I]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_STOP            0 ! [D] Option for stopping the run: 0 -> stop when T reaches
                      ! TSTOP; 1 -> stop when T reaches TSTOP or station reaches
                      ! SSTOP; -1 -> run until stopped using VS Commands or
                      ! external control
OPT_VS_FILETYPE     3 ! [D] Type of output file: 3 -> 32-bit ERD, 1-> 64-bit VS, 2->
                      ! 32-bit VS, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle: stop the run if reached
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]
TSTART              0 ; s ! [D] Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! [D] Start writing outputs when this time is reached
TSTEP           0.001 ; s ! [D] Time step for numerical integration
TSTOP              10 ; s ! [D] Stop when this time is reached
! T_DT              0 ; s ! CALC -- Time increment between calculations
VLOW_STOP          -1 ; km/h ! [D] Stop the run if the absolute vehicle speed drops
                      ! to this value; specify -1 to disable this feature

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL           0 ; mm ! CALC -- Height of TL CG
! LX_CG_TL          0 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL           0 ; mm ! CALC -- Y coordinate of TL CG
! M_TL              0 ; kg ! CALC -- TL mass

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           500 ; mm ! [D] Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1000 ; mm ! [D] X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! [D] Y coordinate of SU CG [I]
M_SU             1500 ; kg ! [D] Mass of unladen sprung mass (SU) [I]
IXX_SU            500 ; kg-m2 ! [D] Roll inertia for unladen sprung mass [I]
IYY_SU           2500 ; kg-m2 ! [D] Pitch inertia for SU [I]
IZZ_SU           2500 ; kg-m2 ! [D] Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! [D] XY product of inertia for SU [I]
IXZ_SU              0 ; kg-m2 ! [D] XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! [D] YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! CALC -- No. of payloads attached to this sprung mass
! H_CG_SL           0 ; mm ! CALC -- Height of laden sprung mass CG (SL)
! LX_CG_SL          0 ; mm ! CALC -- X distance SL CG is behind origin
! Y_CG_SL           0 ; mm ! CALC -- Y coord. of laden sprung mass CG
! M_SL              0 ; kg ! CALC -- Mass of laden sprung mass (SL)
! IXX_SL            0 ; kg-m2 ! CALC -- Roll inertia for SL
! IYY_SL            0 ; kg-m2 ! CALC -- Pitch inertia for SL
! IZZ_SL            0 ; kg-m2 ! CALC -- Yaw inertia for SL
! IXY_SL            0 ; kg-m2 ! CALC -- XY product of inertia for SL
! IXZ_SL            0 ; kg-m2 ! CALC -- XZ product of inertia for SL
! IYZ_SL            0 ; kg-m2 ! CALC -- YZ product of inertia for SL

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! CALC -- Number of installed payloads

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! [D] Air mass density

AREA_AERO          10 ; m2 ! [D] Frontal cross-section area
H_REF_AERO          0 ; mm ! [D] Height of aerodynamic reference point
L_REF_AERO       5000 ; mm ! [D] Aerodynamic reference length
X_REF_AERO          0 ; mm ! [D] X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! [D] Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE.

! Independent suspension for axle 1
A_CAMBER(1,1)       0 ; deg ! [D] Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! [D] Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! [D] Static camber for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! [D] Static camber for wheel R1 [I]
H_WC(1,1)         280 ; mm ! [D] Design height (Z coord.) of wheel center L1 [I]
H_WC(1,2)         280 ; mm ! [D] Design height (Z coord.) of wheel center R1 [I]
IW(1,1)             0 ; kg-m2 ! [D] Spin inertia for wheel L1 [I]
IW(1,2)             0 ; kg-m2 ! [D] Spin inertia for wheel R1 [I]
L_TRACK(1)       1500 ; mm ! [D] Track width, wheel-center to wheel-center, axle 1
                      ! [I]
LX_AXLE(1)          0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US(1)           100 ; kg ! [D] Unsprung mass for axle 1 [I]
R_US_STR(1)         0 ; - ! [D] Steered fraction of unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! [D] Y coord. for suspension centerline, axle 1 [I]

! Independent suspension for axle 2
A_CAMBER(2,1)       0 ; deg ! [D] Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! [D] Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! [D] Static camber for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! [D] Static camber for wheel R2 [I]
H_WC(2,1)         280 ; mm ! [D] Design height (Z coord.) of wheel center L2 [I]
H_WC(2,2)         280 ; mm ! [D] Design height (Z coord.) of wheel center R2 [I]
IW(2,1)             0 ; kg-m2 ! [D] Spin inertia for wheel L2 [I]
IW(2,2)             0 ; kg-m2 ! [D] Spin inertia for wheel R2 [I]
L_TRACK(2)       1500 ; mm ! [D] Track width, wheel-center to wheel-center, axle 2
                      ! [I]
LX_AXLE(2)       2700 ; mm ! [D] X dist. axle 2 is behind the sprung-mass origin [I]
M_US(2)           100 ; kg ! [D] Unsprung mass for axle 2 [I]
R_US_STR(2)         0 ; - ! [D] Steered fraction of unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! [D] Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

OPT_JNC_DESIGN(1)   0 ! [D] Specify jounce in the vehicle design condition for axle
                      ! 1? 0 -> no, calculate design jounce based on ride spring
                      ! data, 1 -> yes, specify JNC_DESIGN explicitly [I]
OPT_EXT_SP(1,1)     0 ! [D] External option for spring L1: 0 -> include internal
                      ! spring (with or without external model), 1 -> disable
                      ! internal spring and use only the external model [I]
OPT_EXT_SP(1,2)     0 ! [D] External spring R1 only? 0 -> no, 1 -> yes [I]
CMP_OFFSET(1,1)     0 ; mm ! [D] Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! [D] Initial compression of external spring R1 [I]
DAUX(1)             0 ; N-m-s/deg ! [D] Auxiliary roll damping, axle 1
FS_OFFSET(1,1)      0 ; N ! [D] Force offset added to static load for spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! [D] Force offset added to static load for spring R1 [I]
! FSA_DES(1)        0 ; N ! CALC -- Design (unladen) suspension load, axle 1
! FZA_L(1)          0 ; N ! CALC -- Static ground force, laden, axle 1
! FZA_UL(1)         0 ; N ! CALC -- Static ground force, unladen, axle 1
JNC_DESIGN(1,1)     0 ; mm ! [D] Jounce in the design condition, spring L1 [I]
JNC_DESIGN(1,2)     0 ; mm ! [D] Jounce in the design condition, spring R1 [I]
L_SPG_ADJ(1,1)      0 ; mm ! [D] Upper seat height adj. for spring L1 [I]
L_SPG_ADJ(1,2)      0 ; mm ! [D] Upper seat height adj. for spring R1 [I]
SPRING_COMP_BETA(1,1) 3 ; mm ! [D] Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 3 ; mm ! [D] Ref. hysteretic compression, ride spring R1 
SPRING_EXT_BETA(1,1) 3 ; mm ! [D] Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 3 ; mm ! [D] Ref. hysteretic extension, ride spring R1

OPT_JNC_DESIGN(2)   0 ! [D] Specify design jounce explicitly for axle 2? [I]
OPT_EXT_SP(2,1)     0 ! [D] External spring L2 only? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! [D] External spring R2 only? 0 -> no, 1 -> yes [I]
CMP_OFFSET(2,1)     0 ; mm ! [D] Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! [D] Initial compression of external spring R2 [I]
DAUX(2)             0 ; N-m-s/deg ! [D] Auxiliary roll damping, axle 2
FS_OFFSET(2,1)      0 ; N ! [D] Force offset added to static load for spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! [D] Force offset added to static load for spring R2 [I]
! FSA_DES(2)        0 ; N ! CALC -- Design (unladen) suspension load, axle 2
! FZA_L(2)          0 ; N ! CALC -- Static ground force, laden, axle 2
! FZA_UL(2)         0 ; N ! CALC -- Static ground force, unladen, axle 2
JNC_DESIGN(2,1)     0 ; mm ! [D] Jounce in the design condition, spring L2 [I]
JNC_DESIGN(2,2)     0 ; mm ! [D] Jounce in the design condition, spring R2 [I]
L_SPG_ADJ(2,1)      0 ; mm ! [D] Upper seat height adj. for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! [D] Upper seat height adj. for spring R2 [I]
SPRING_COMP_BETA(2,1) 3 ; mm ! [D] Ref. hysteretic compression, ride spring L2 
SPRING_COMP_BETA(2,2) 3 ; mm ! [D] Ref. hysteretic compression, ride spring R2 
SPRING_EXT_BETA(2,1) 3 ; mm ! [D] Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 3 ; mm ! [D] Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_DRIVER_ACTION   1 ! [D] Action of driver model: 1 -> driver model steering is
                      ! applied, 0 -> driver model steering is available as an
                      ! output, but it is not used [I]
OPT_M_SW_CALC       0 ! [D] Steering torque: 0 -> from table, 1 -> calculated (see
                      ! the steering Help document for details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Yes [I]
OPT_STEER           0 ! [D] Open-loop steer input: 0 -> Angle, 1 -> Torque [I]
OPT_STEER_DEF       1 ! [D] Define steer angles: 1 -> with respect to the
                      ! sprung-mass X-Y plane, 0 -> as rotation angle about a
                      ! kingpin axis [I]
BETA_COL            2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL               1 ; N-m-s/deg ! [D] Steering column viscous damping
D_TBAR              0 ; N-m-s/deg ! [D] Torsion bar viscous damping
HYS_COL             0 ; N-m ! [D] Steering column friction torque
I_COL           1e-06 ; kg-m2 ! [D] Steering column inertia
I_GEAR_IN       1e-06 ; kg-m2 ! [D] Steering system inertia
F_BOOST_MAX     10000 ; N ! [D] Maximum power steering boost force
M_BOOST_MAX     10000 ; N-m ! [D] Maximum power steering boost torque
TC_BOOST          0.3 ; s ! [D] Time constant for power steering boost

OPT_STEER_EXT(1)    0 ! [D] Steer model option for axle 1: 0 -> Internal model, 1 ->
                      ! Not steered, 2 -> External gear/rack model, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_RACK(1)         0 ! [D] Steering gear type for axle 1: 0 -> Recirculating ball,
                      ! 1 -> Rack and pinion [I]
A_CASTER(1,1)       0 ; deg ! [D] Caster for wheel L1 [I]
A_CASTER(1,2)       0 ; deg ! [D] Caster for wheel R1 [I]
A_KPI(1,1)          0 ; deg ! [D] Kingpin inclination for wheel L1 [I]
A_KPI(1,2)          0 ; deg ! [D] Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)      2 ; deg ! [D] Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)      2 ; deg ! [D] Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1)        2 ; deg ! [D] Ref hys. angle for steering gear friction, axle 1
BETA_RACK(1)      0.5 ; mm ! [D] Ref hys. displ. for steering rack friction, axle 1
D_GEAR(1)           0 ; N-m-s/deg ! [D] Steering gear viscous damping, axle 1
D_RACK(1)           0 ; N-s/mm ! [D] Steering rack viscous damping, axle 1
HYS_GEAR(1)         0 ; N-m ! [D] Steering gear hysteresis, axle 1
HYS_RACK(1)         0 ; N ! [D] Steering rack hysteresis, axle 1
L_KPO(1,1)          0 ; mm ! [D] Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)          0 ; mm ! [D] Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)          0 ; mm ! [D] X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! [D] X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    0 ! [D] Steer model option for axle 2: 0 -> Internal model, 1 ->
                      ! Not steered, 2 -> External gear/rack model, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_RACK(2)         0 ! [D] Steering gear type for axle 2: 0 -> Recirculating ball,
                      ! 1 -> Rack and pinion [I]
A_CASTER(2,1)       0 ; deg ! [D] Caster for wheel L2 [I]
A_CASTER(2,2)       0 ; deg ! [D] Caster for wheel R2 [I]
A_KPI(2,1)          0 ; deg ! [D] Kingpin inclination for wheel L2 [I]
A_KPI(2,2)          0 ; deg ! [D] Kingpin inclination for wheel R2 [I]
A_MZ_BETA(2,1)      2 ; deg ! [D] Ref. hysteresis angle for L2 parking steer torque
A_MZ_BETA(2,2)      2 ; deg ! [D] Ref. hysteresis angle for R2 parking steer torque
BETA_GEAR(2)        2 ; deg ! [D] Ref hys. angle for steering gear friction, axle 2
BETA_RACK(2)      0.5 ; mm ! [D] Ref hys. displ. for steering rack friction, axle 2
D_GEAR(2)           0 ; N-m-s/deg ! [D] Steering gear viscous damping, axle 2
D_RACK(2)           0 ; N-s/mm ! [D] Steering rack viscous damping, axle 2
HYS_GEAR(2)         0 ; N-m ! [D] Steering gear hysteresis, axle 2
HYS_RACK(2)         0 ; N ! [D] Steering rack hysteresis, axle 2
L_KPO(2,1)          0 ; mm ! [D] Lateral kingpin offset to center of wheel L2 [I]
L_KPO(2,2)          0 ; mm ! [D] Lateral kingpin offset to center of wheel R2 [I]
X_KPO(2,1)          0 ; mm ! [D] X coord. of kingpin at center of wheel L2 [I]
X_KPO(2,2)          0 ; mm ! [D] X coord. of kingpin at center of wheel R2 [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade [I]
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade [I]

OPT_TIRE_MODEL(1,1) 1 ! [D] Internal tire shear-model option, tire L1: 1 -> original
                      ! tabular model; 0 -> fully external model; 2 -> built-in
                      ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular with
                      ! camber extensions; 7 -> built-in Pacejka 5.2; 8 -> TNO
                      ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI tire
                      ! model [I]
OPT_TIRE_COMB(1,1)  0 ! [D] Option for combined slip calculation: 0 -> use only
                      ! theoretical combined slip; 1 -> use transition between the
                      ! normalized and theoretical combined slip
OPT_TIRE_INERTIA_EXTERNAL(1,1) 0 ! [D] Option for handling spin inertia for
                                 ! 3rd-party model: 0 -> use spin inertia of tire
                                 ! from external tire file; 1 -> use spin inertia
                                 ! of tire from VS Parsfile
OPT_TIRE_LAG_ALPHA(1,1) 1 ! [D] Options for handling lag in tire alpha: 1 ->
                          ! transition to using instant slip when the time constant
                          ! is less than 12*TSTEP, 0 -> use fixed time constant
                          ! 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1) 2 ! [D] Options for handling lag in tire kappa: 2 -> use
                          ! instant slip when absolute kappa is decreasing and
                          ! transition to instant slip when the time constant is
                          ! less than 12*TSTEP; 1 -> transition to instant slip
                          ! when the time constant is less than 12*TSTEP; 0 -> use
                          ! fixed time constant 12*TSTEP at high speeds
CRO_FY(1,1)         1 ; - ! [D] Roll-off of Fyg with normalized combined slip, tire
                      ! L1
CRO_FY_SLIP_GAM(1,1) 0 ; - ! [D] Roll-off of Fy with camber angle, tire L1
CRO_MX(1,1)         0 ; - ! [D] Roll-off of Mxg with normalized combined slip
CRO_MZ(1,1)         0 ; - ! [D] Roll-off of Mzg with normalized combined slip
FZ_MAX(1,1)    100000 ; N ! [D] Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1)      6000 ; N ! [D] Reference vertical force: Not used directly in the
                      ! VS Math Model; provided as a standard reference for
                      ! advanced users to scale other parameters and Configurable
                      ! Functions for this tire
IT(1,1)            10 ; kg-m2 ! [D] Spin inertia for tire L1 [I]
MU_REF_X(1,1)     0.8 ; - ! [D] Ground friction during meas. of Fx data, tire L1
MU_REF_Y(1,1)     0.8 ; - ! [D] Ground friction during meas. of Fy data, tire L1
R0(1,1)             0 ; mm ! [D] Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1)          280 ; mm ! [D] Effective rolling radius (Vx/AVy), tire L1 [I]
RR_C(1,1)      0.0041 ; - ! [D] Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
RR_FX(1,1)          0 ; - ! [D] Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1) 2.547621888e-05 ; h/km ! [D] Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c
                          ! + RR_v*Vx)
R_TIRE_COMB(1,1)    0 ; - ! [D] Combined slip transition factor: Factor used to
                      ! transition from normalized to theoretical combined slip
VLOW_ALPHA(1,1)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2) 1 ! [D] Internal tire shear-model option, R1 [I]
OPT_TIRE_COMB(1,2)  0 ! [D] Option for combined slip calculation
OPT_TIRE_INERTIA_EXTERNAL(1,2) 0 ! [D] Option for handling spin inertia for
                                 ! 3rd-party model
OPT_TIRE_LAG_ALPHA(1,2) 1 ! [D] Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2) 2 ! [D] Options for handling lag in kappa
CRO_FY(1,2)         1 ; - ! [D] Roll-off of Fyg with normalized combined slip, tire
                      ! R1
CRO_FY_SLIP_GAM(1,2) 0 ; - ! [D] Roll-off of Fy with camber angle, tire R1
CRO_MX(1,2)         0 ; - ! [D] Roll-off of Mxg with normalized combined slip
CRO_MZ(1,2)         0 ; - ! [D] Roll-off of Mzg with normalized combined slip
FZ_MAX(1,2)    100000 ; N ! [D] Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,2)      6000 ; N ! [D] Reference vertical force
IT(1,2)            10 ; kg-m2 ! [D] Spin inertia for tire R1 [I]
MU_REF_X(1,2)     0.8 ; - ! [D] Ground friction during meas. of Fx data, tire R1
MU_REF_Y(1,2)     0.8 ; - ! [D] Ground friction during meas. of Fy data, tire R1
R0(1,2)             0 ; mm ! [D] Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2)          280 ; mm ! [D] Effective rolling radius (Vx/AVy), tire R1 [I]
RR_C(1,2)      0.0041 ; - ! [D] MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2)          0 ; - ! [D] 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2) 2.547621888e-05 ; h/km ! [D] MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,2)    0 ; - ! [D] Combined slip transition factor
VLOW_ALPHA(1,2)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1) 1 ! [D] Internal tire shear-model option, L2 [I]
OPT_TIRE_COMB(2,1)  0 ! [D] Option for combined slip calculation
OPT_TIRE_INERTIA_EXTERNAL(2,1) 0 ! [D] Option for handling spin inertia for
                                 ! 3rd-party model
OPT_TIRE_LAG_ALPHA(2,1) 1 ! [D] Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1) 2 ! [D] Options for handling lag in kappa
CRO_FY(2,1)         1 ; - ! [D] Roll-off of Fyg with normalized combined slip, tire
                      ! L2
CRO_FY_SLIP_GAM(2,1) 0 ; - ! [D] Roll-off of Fy with camber angle, tire L2
CRO_MX(2,1)         0 ; - ! [D] Roll-off of Mxg with normalized combined slip
CRO_MZ(2,1)         0 ; - ! [D] Roll-off of Mzg with normalized combined slip
FZ_MAX(2,1)    100000 ; N ! [D] Maximum allowed vertical force, tire L2 [I]
FZ_REF(2,1)      6000 ; N ! [D] Reference vertical force
IT(2,1)            10 ; kg-m2 ! [D] Spin inertia for tire L2 [I]
MU_REF_X(2,1)     0.8 ; - ! [D] Ground friction during meas. of Fx data, tire L2
MU_REF_Y(2,1)     0.8 ; - ! [D] Ground friction during meas. of Fy data, tire L2
R0(2,1)             0 ; mm ! [D] Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1)          280 ; mm ! [D] Effective rolling radius (Vx/AVy), tire L2 [I]
RR_C(2,1)      0.0041 ; - ! [D] MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1)          0 ; - ! [D] 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1) 2.547621888e-05 ; h/km ! [D] MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,1)    0 ; - ! [D] Combined slip transition factor
VLOW_ALPHA(2,1)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2) 1 ! [D] Internal tire shear-model option, R2 [I]
OPT_TIRE_COMB(2,2)  0 ! [D] Option for combined slip calculation
OPT_TIRE_INERTIA_EXTERNAL(2,2) 0 ! [D] Option for handling spin inertia for
                                 ! 3rd-party model
OPT_TIRE_LAG_ALPHA(2,2) 1 ! [D] Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2) 2 ! [D] Options for handling lag in kappa
CRO_FY(2,2)         1 ; - ! [D] Roll-off of Fyg with normalized combined slip, tire
                      ! R2
CRO_FY_SLIP_GAM(2,2) 0 ; - ! [D] Roll-off of Fy with camber angle, tire R2
CRO_MX(2,2)         0 ; - ! [D] Roll-off of Mxg with normalized combined slip
CRO_MZ(2,2)         0 ; - ! [D] Roll-off of Mzg with normalized combined slip
FZ_MAX(2,2)    100000 ; N ! [D] Maximum allowed vertical force, tire R2 [I]
FZ_REF(2,2)      6000 ; N ! [D] Reference vertical force
IT(2,2)            10 ; kg-m2 ! [D] Spin inertia for tire R2 [I]
MU_REF_X(2,2)     0.8 ; - ! [D] Ground friction during meas. of Fx data, tire R2
MU_REF_Y(2,2)     0.8 ; - ! [D] Ground friction during meas. of Fy data, tire R2
R0(2,2)             0 ; mm ! [D] Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2)          280 ; mm ! [D] Effective rolling radius (Vx/AVy), tire R2 [I]
RR_C(2,2)      0.0041 ; - ! [D] MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2)          0 ; - ! [D] 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2) 2.547621888e-05 ; h/km ! [D] MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,2)    0 ; - ! [D] Combined slip transition factor
VLOW_ALPHA(2,2)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2)     2 ; km/h ! [D] Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! [D] Brake input: 0 -> pressure (M/C), 1 -> pedal force
                      ! (manual), 2 -> pedal force with boost
D_MC             25.4 ; mm ! [D] Master cylinder diameter, used to convert boosted
                      ! pedal force to M/C pressure
FPD_PERF_SC     0.015 ; MPa/N ! [D] Approximate ratio for speed controller: Brake
                      ! M/C pressure per N pedal force
R_BK_PEDAL          4 ; - ! [D] Brake pedal mechanical ratio: force multiplier
T_AIR              20 ; C ! [D] Air temperature (used for thermal brake model)
TC_BK_APP        0.15 ; s ! [D] Time constant for brake booster apply
TC_BK_REL        0.06 ; s ! [D] Time constant for brake booster release

OPT_BK_DYN(1,1)     1 ! [D] Fluid dynamics: 1 -> time constant for actuator
                      ! pressure, 2 -> hydraulic resistance for flow into actuator,
                      ! 0 -> no dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Thermal effects (fade)? 0 -> no, 1 -> yes
BK_CP_RTR(1,1)   0.46 ; kJ/kg/C ! [D] Specific heat (Cp) of brake rotor L1 at zero C
BK_CP2_RTR(1,1) 0.0005 ; kJ/kg/C2 ! [D] Change in Cp per degree C for brake rotor L1
BK_HYD_RES(1,1) 4e-06 ; MPa/(mm3/s) ! [D] Hydraulic resistance for brake L1
M_ROTOR(1,1)        5 ; kg ! [D] Brake rotor mass L1 (used for thermal model)
TC_BK(1,1)        0.3 ; s ! [D] Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! [D] Transport time delay for fluid to reach brake L1

OPT_BK_DYN(1,2)     1 ! [D] Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Thermal effects (fade)? 0 -> no, 1 -> yes
BK_CP_RTR(1,2)   0.46 ; kJ/kg/C ! [D] Specific heat (Cp) of brake rotor R1 at zero C
BK_CP2_RTR(1,2) 0.0005 ; kJ/kg/C2 ! [D] Change in Cp per degree C for brake rotor R1
BK_HYD_RES(1,2) 4e-06 ; MPa/(mm3/s) ! [D] Hydraulic resistance for brake R1
M_ROTOR(1,2)        5 ; kg ! [D] Brake rotor mass R1 (used for thermal model)
TC_BK(1,2)        0.3 ; s ! [D] Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! [D] Transport time delay for fluid to reach brake R1

OPT_BK_DYN(2,1)     1 ! [D] Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Thermal effects (fade)? 0 -> no, 1 -> yes
BK_CP_RTR(2,1)   0.46 ; kJ/kg/C ! [D] Specific heat (Cp) of brake rotor L2 at zero C
BK_CP2_RTR(2,1) 0.0005 ; kJ/kg/C2 ! [D] Change in Cp per degree C for brake rotor L2
BK_HYD_RES(2,1) 4e-06 ; MPa/(mm3/s) ! [D] Hydraulic resistance for brake L2
M_ROTOR(2,1)        5 ; kg ! [D] Brake rotor mass L2 (used for thermal model)
TC_BK(2,1)        0.3 ; s ! [D] Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! [D] Transport time delay for fluid to reach brake L2

OPT_BK_DYN(2,2)     1 ! [D] Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Thermal effects (fade)? 0 -> no, 1 -> yes
BK_CP_RTR(2,2)   0.46 ; kJ/kg/C ! [D] Specific heat (Cp) of brake rotor R2 at zero C
BK_CP2_RTR(2,2) 0.0005 ; kJ/kg/C2 ! [D] Change in Cp per degree C for brake rotor R2
BK_HYD_RES(2,2) 4e-06 ; MPa/(mm3/s) ! [D] Hydraulic resistance for brake R2
M_ROTOR(2,2)        5 ; kg ! [D] Brake rotor mass R2 (used for thermal model)
TC_BK(2,2)        0.3 ; s ! [D] Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! [D] Transport time delay for fluid to reach brake R2

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              0 ! [D] Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 ->
                      ! AWD, 7 -> AVL Cruise
OPT_ENGINE_INTERNAL 1 ! [D] Model option for engine: 1 -> internal model, 0 ->
                      ! external model [I]
OPT_THROTTLE_DELAY  0 ! [D] Use throttle time constants: 0 -> no, 1 -> yes [I]
AV_ENG_IDLE       600 ; rpm ! [D] Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control [I]
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control [I]
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping coefficient of the stalled engine
                      ! [I]
IENG              0.3 ; kg-m2 ! [D] Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! [D] Spin inertia of input shaft of torque converter
                      ! [I]
TC_THR_APP       0.06 ; s ! [D] Time constant for engine throttle application
TC_THR_REL       0.12 ; s ! [D] Time constant for engine throttle release
R_MDRIVE            1 ; - ! [D] Ratio: multiplier for drive shaft torque acting on
                      ! sprung mass from drive axle. +1 -> cause positive vehicle
                      ! roll, -1 -> cause negative vehicle roll, 0 -> no effect.
                      ! [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel inertia at below this speed to fix
                      ! instability with some HIL systems; set 0 to disable

! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

OPT_CLUTCH          0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE     1 ! [D] Clutch control mode: 0 -> open-loop, 1 -> closed-loop
                      ! (based on shifting) [I]
OPT_CLUTCH_DELAY    1 ! [D] Use clutch torque time constants: 0 -> no, 1 -> yes [I]
OPT_PWR_CPL_INTERNAL 1 ! [D] Model option for internal power coupling (torque
                       ! converter and clutch): 1 -> use internal model, 0 -> use
                       ! external model [I]
T_CL_HALF_HOLD    0.1 ; s ! [D] Time spent holding the clutch at half pressure
                      ! during clutch release [I]
T_CL_HALF_TOTAL   0.2 ; s ! [D] Time spent releasing the clutch during gear shift
                      ! [I]
T_CL_PRESS_HOLD   0.2 ; s ! [D] Time spent holding the clutch at full pressure
                      ! during gear shift [I]
T_CL_PRESS_TOTAL  0.3 ; s ! [D] Time spent applying the clutch to full pressure
                      ! during gear shift [I]
T_GEAR_LAG        0.1 ; s ! [D] Time lag in shifting [I]
T_TH_RETURN       0.1 ; s ! [D] Time spent returning to original throttle during
                      ! gear shift [I]
T_TH_ZERO_HOLD    0.2 ; s ! [D] Time spent holding zero throttle during gear shift
                      ! [I]
T_TH_ZERO_TOTAL   0.3 ; s ! [D] Time spent going to zero throttle and holding it
                      ! during gear shift [I]
VLOW_CLUTCH         5 ; km/h ! [D] Press the clutch pedal when average of wheel
                      ! speeds is below this speed while deccelerating with brake
                      ! during the simulation, or accelerating from stop when the
                      ! simulation starts. [I]
TC_CLUTCH_DISENGAGE 0.002 ; s ! [D] Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE 0.06 ; s ! [D] Time constant for clutch torque (engage)
M_LOCKUP_CLUTCH_CAP 600 ; N-m ! [D] Maximum torque capacity of the torque converter
                        ! lockup clutch

! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

OPT_TRANS_INTERNAL  1 ! [D] Model option for transmission: 1 -> internal model, 0 ->
                      ! external model [I]
OPT_TR_GEAR_INTERNAL 1 ! [D] Model option for transmission gear ratio and inertia: 1
                       ! -> up to 18 gears, 2 -> continuously variable (CVT), 0 ->
                       ! external model [I]
OPT_CVT_REVERSE     0 ! [D] Extend CVT to reverse?: 0 -> no, 1 -> yes [I]
OPT_SHIFT_INTERNAL  1 ! [D] Model option for gear shift command: 1 -> internal
                      ! model, 0 -> external model [I]
OPT_SHIFT_AVL       0 ! [D] Gear shift by AVL Cruise?: 0 -> no, 1 -> yes [I]
NGEARS              7 ! [D] Number of gears in transmission [I]
VLOW_INITIAL_AVL    2 ; km/h ! [D] Limit of the initial vehicle speed when AVL
                      ! Cruise driveline is used. If the initial vehicle speed is
                      ! below this limit and AVL Cruise is used, the simulation
                      ! stops. [I]
TC_RGEAR_CVT     0.25 ; s ! [D] Time constant for transmission gear ratio (CVT)
ITC_OUTPUT_SHAFT 0.015 ; kg-m2 ! [D] Spin inertia of torque converter output shaft
                       ! [I]
ICVT_INPUT_PULLEY 0.02 ; kg-m2 ! [D] Spin inertia of CVT input pulley [I]
ICVT_OUTPUT_PULLEY 0.02 ; kg-m2 ! [D] Spin inertia of CVT output pulley [I]
ITR_NEUTRAL      0.34 ; kg-m2 ! [D] Neutral-gear spin inertia of transmission [I]
ITR_REVERSE      0.34 ; kg-m2 ! [D] Reverse-gear spin inertia of transmission [I]
R_EFF_TR_F_REVERSE  1 ; - ! [D] Reverse-gear forward efficiency of transmission [I]
R_EFF_TR_R_REVERSE 0.9 ; - ! [D] Reverse-gear reverse efficiency of transmission [I]
R_GEAR_TR_REVERSE -3.8 ; - ! [D] Reverse-gear ratio of transmission (should be
                       ! negative) [I]
T_SHIFT             0 ; s ! [D] Shift duration in closed-loop transmission control
                      ! [I]
ITR(1)           0.37 ; kg-m2 ! [D] 1st-gear transmission spin inertia at output
                      ! shaft. (Transmission spin inertias do not include the
                      ! torque converter.) [I]
R_EFF_TR_F(1)       1 ; - ! [D] 1st-gear forward efficiency of transmission [I]
R_EFF_TR_R(1)     0.9 ; - ! [D] 1st-gear reverse efficiency of transmission [I]
R_GEAR_TR(1)     2.78 ; - ! [D] 1st-gear ratio of transmission [I]
ITR(2)           0.37 ; kg-m2 ! [D] 2nd-gear trans.spin inertia at output shaft
R_EFF_TR_F(2)       1 ; - ! [D] 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)     0.9 ; - ! [D] 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)     1.96 ; - ! [D] 2nd-gear ratio of transmission
ITR(3)           0.37 ; kg-m2 ! [D] 3rd-gear trans.spin inertia at output shaft
R_EFF_TR_F(3)       1 ; - ! [D] 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)     0.9 ; - ! [D] 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)      1.4 ; - ! [D] 3rd-gear ratio of transmission
ITR(4)           0.37 ; kg-m2 ! [D] 4th-gear trans.spin inertia at output shaft
R_EFF_TR_F(4)       1 ; - ! [D] 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)     0.9 ; - ! [D] 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)        1 ; - ! [D] 4th-gear ratio of transmission
ITR(5)           0.37 ; kg-m2 ! [D] 5th-gear trans.spin inertia at output shaft
R_EFF_TR_F(5)       1 ; - ! [D] 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)     0.9 ; - ! [D] 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)      0.7 ; - ! [D] 5th-gear ratio of transmission
ITR(6)           0.37 ; kg-m2 ! [D] 6th-gear trans.spin inertia at output shaft
R_EFF_TR_F(6)       1 ; - ! [D] 6th-gear forward efficiency of transmission
R_EFF_TR_R(6)     0.9 ; - ! [D] 6th-gear reverse efficiency of transmission
R_GEAR_TR(6)      0.7 ; - ! [D] 6th-gear ratio of transmission
ITR(7)           0.37 ; kg-m2 ! [D] 7th-gear trans.spin inertia at output shaft
R_EFF_TR_F(7)       1 ; - ! [D] 7th-gear forward efficiency of transmission
R_EFF_TR_R(7)     0.9 ; - ! [D] 7th-gear reverse efficiency of transmission
R_GEAR_TR(7)      0.7 ; - ! [D] 7th-gear ratio of transmission
ITR(8)           0.37 ; kg-m2 ! [D] 8th-gear trans.spin inertia at output shaft
R_EFF_TR_F(8)       1 ; - ! [D] 8th-gear forward efficiency of transmission
R_EFF_TR_R(8)     0.9 ; - ! [D] 8th-gear reverse efficiency of transmission
R_GEAR_TR(8)      0.7 ; - ! [D] 8th-gear ratio of transmission
ITR(9)           0.37 ; kg-m2 ! [D] 9th-gear trans.spin inertia at output shaft
R_EFF_TR_F(9)       1 ; - ! [D] 9th-gear forward efficiency of transmission
R_EFF_TR_R(9)     0.9 ; - ! [D] 9th-gear reverse efficiency of transmission
R_GEAR_TR(9)      0.7 ; - ! [D] 9th-gear ratio of transmission
ITR(10)          0.37 ; kg-m2 ! [D] 10th-gear trans.spin inertia at output shaft
R_EFF_TR_F(10)      1 ; - ! [D] 10th-gear forward efficiency of transmission
R_EFF_TR_R(10)    0.9 ; - ! [D] 10th-gear reverse efficiency of transmission
R_GEAR_TR(10)     0.7 ; - ! [D] 10th-gear ratio of transmission
ITR(11)          0.37 ; kg-m2 ! [D] 11th-gear trans.spin inertia at output shaft
R_EFF_TR_F(11)      1 ; - ! [D] 11th-gear forward efficiency of transmission
R_EFF_TR_R(11)    0.9 ; - ! [D] 11th-gear reverse efficiency of transmission
R_GEAR_TR(11)     0.7 ; - ! [D] 11th-gear ratio of transmission
ITR(12)          0.37 ; kg-m2 ! [D] 12th-gear trans.spin inertia at output shaft
R_EFF_TR_F(12)      1 ; - ! [D] 12th-gear forward efficiency of transmission
R_EFF_TR_R(12)    0.9 ; - ! [D] 12th-gear reverse efficiency of transmission
R_GEAR_TR(12)     0.7 ; - ! [D] 12th-gear ratio of transmission
ITR(13)          0.37 ; kg-m2 ! [D] 13th-gear trans.spin inertia at output shaft
R_EFF_TR_F(13)      1 ; - ! [D] 13th-gear forward efficiency of transmission
R_EFF_TR_R(13)    0.9 ; - ! [D] 13th-gear reverse efficiency of transmission
R_GEAR_TR(13)     0.7 ; - ! [D] 13th-gear ratio of transmission
ITR(14)          0.37 ; kg-m2 ! [D] 14th-gear trans.spin inertia at output shaft
R_EFF_TR_F(14)      1 ; - ! [D] 14th-gear forward efficiency of transmission
R_EFF_TR_R(14)    0.9 ; - ! [D] 14th-gear reverse efficiency of transmission
R_GEAR_TR(14)     0.7 ; - ! [D] 14th-gear ratio of transmission
ITR(15)          0.37 ; kg-m2 ! [D] 15th-gear trans.spin inertia at output shaft
R_EFF_TR_F(15)      1 ; - ! [D] 15th-gear forward efficiency of transmission
R_EFF_TR_R(15)    0.9 ; - ! [D] 15th-gear reverse efficiency of transmission
R_GEAR_TR(15)     0.7 ; - ! [D] 15th-gear ratio of transmission
ITR(16)          0.37 ; kg-m2 ! [D] 16th-gear trans.spin inertia at output shaft
R_EFF_TR_F(16)      1 ; - ! [D] 16th-gear forward efficiency of transmission
R_EFF_TR_R(16)    0.9 ; - ! [D] 16th-gear reverse efficiency of transmission
R_GEAR_TR(16)     0.7 ; - ! [D] 16th-gear ratio of transmission
ITR(17)          0.37 ; kg-m2 ! [D] 17th-gear trans.spin inertia at output shaft
R_EFF_TR_F(17)      1 ; - ! [D] 17th-gear forward efficiency of transmission
R_EFF_TR_R(17)    0.9 ; - ! [D] 17th-gear reverse efficiency of transmission
R_GEAR_TR(17)     0.7 ; - ! [D] 17th-gear ratio of transmission
ITR(18)          0.37 ; kg-m2 ! [D] 18th-gear trans.spin inertia at output shaft
R_EFF_TR_F(18)      1 ; - ! [D] 18th-gear forward efficiency of transmission
R_EFF_TR_R(18)    0.9 ; - ! [D] 18th-gear reverse efficiency of transmission
R_GEAR_TR(18)     0.7 ; - ! [D] 18th-gear ratio of transmission
DRIVELINE_FREQ      9 ; Hz ! [D] Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! [D] Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1) 1 ! [D] Model option for front differential: 1 -> internal
                       ! model, 0 -> external model [I]
OPT_DIFF_INTERNAL(2) 1 ! [D] Model option for rear differential: 1 -> internal
                       ! model, 0 -> external model [I]
OPT_DIFF_INTERNAL(3) 1 ! [D] Model option for transfer case model: 1 -> internal, 0
                       ! -> external [I]
OPT_LOCKED_DIFF(1)  0 ! [D] Is the front differential locked? 0 -> no, 1 -> yes [I]
OPT_LOCKED_DIFF(2)  0 ! [D] Is the rear differential locked? 0 -> no, 1 -> yes [I]
OPT_LOCKED_DIFF(3)  0 ! [D] Is the transfer case locked? 0 -> no, 1 -> yes [I]
R_REAR_BIAS(3)    0.5 ; - ! [D] Fraction: transfer case torque on rear driveshaft
                      ! [I]
LOCKED_DIFF_DAMP(1) 1 ; N-m-s/deg ! [D] Torsional damping constant for locking front
                      ! differential [I]
LOCKED_DIFF_K(1)  100 ; N-m/deg ! [D] Torsional spring constant for locking front
                      ! differential [I]
LOCKED_DIFF_DAMP(2) 1 ; N-m-s/deg ! [D] Torsional damping constant for locking rear
                      ! differential [I]
LOCKED_DIFF_K(2)  100 ; N-m/deg ! [D] Torsional spring constant for locking rear
                      ! differential [I]
LOCKED_DIFF_DAMP(3) 1 ; N-m-s/deg ! [D] Torsional damping constant for locking the
                      ! transfer case [I]
LOCKED_DIFF_K(3)  100 ; N-m/deg ! [D] Torsional spring constant for locking the
                      ! transfer case [I]
R_EFF_F_DIFF(1)     1 ; - ! [D] Forward efficiency of front differential [I]
R_EFF_R_DIFF(1)   0.9 ; - ! [D] Reverse efficiency of front differential [I]
R_GEAR_DIFF(1)      1 ; - ! [D] Gear ratio of front differential [I]
R_EFF_F_DIFF(2)     1 ; - ! [D] Forward efficiency of rear differential [I]
R_EFF_R_DIFF(2)   0.9 ; - ! [D] Reverse efficiency of rear differential [I]
R_GEAR_DIFF(2)      1 ; - ! [D] Gear ratio of 2nd rear differential [I]
R_EFF_F_DIFF(3)     1 ; - ! [D] Forward efficiency of transfer case [I]
R_EFF_R_DIFF(3)   0.9 ; - ! [D] Reverse efficiency of transfer case [I]
R_GEAR_DIFF(3)      1 ; - ! [D] Gear ratio of transfer case [I]
VLOW_DIFF_CL_LOCK(1) 0.48 ; rpm ! [D] Lock the differential clutch when the speed
                          ! differential is below this speed, or the clutch
                          ! capacity is bigger than the theoretical locked torque.
                          ! (1st drive axle) [I]
VLOW_DIFF_CL_LOCK(2) 0.48 ; rpm ! [D] Lock the differential clutch when the speed
                          ! differential is below this speed, or the clutch
                          ! capacity is bigger than the theoretical locked torque.
                          ! (2nd drive axle) [I]
VLOW_DIFF_CL_LOCK(3) 0.48 ; rpm ! [D] Lock the differential clutch when the speed
                          ! differential is below this speed, or the clutch
                          ! capacity is bigger than the theoretical locked torque.
                          ! (transfer case between 1st and 2nd drive axles) [I]
IDS(1)           0.05 ; kg-m2 ! [D] Spin inertia of front driveshaft [I]
IDS(2)           0.05 ; kg-m2 ! [D] Spin inertia of rear driveshaft [I]
IHS_L(1)         0.01 ; kg-m2 ! [D] Spin inertia of half left shaft, front
                      ! differential [I]
IHS_L(2)         0.01 ; kg-m2 ! [D] Spin inertia of half left shaft, 2nd rear
                      ! differential [I]
IHS_R(1)         0.01 ; kg-m2 ! [D] Spin inertia of half right shaft, front
                      ! differential [I]
IHS_R(2)         0.01 ; kg-m2 ! [D] Spin inertia of half right shaft, rear
                      ! differential [I]

OPT_CLUTCH_DIFF(1)  0 ! [D] Clutch control option for front differential clutch: 0
                      ! -> table lookup or external, 1 -> Torsen parameters, 2 ->
                      ! yaw control [I]
OPT_TORSEN(1)       0 ! [D] Torsen logic for front differential clutch: 0 -> add
                      ! initial and sensing torque, 1-> use max of initial and
                      ! sensing torque [I]
M_BIAS_DIFF(1)      1 ; - ! [D] Initial torque bias at front differential [I]
R_TB_F(1)        0.01 ; - ! [D] Ratio: torque bias at front differential. (positive
                      ! torque input) [I]
R_TB_R(1)        0.01 ; - ! [D] Ratio: torque bias at front differential. (negative
                      ! torque input) [I]
R_CLUTCH_YAW(1)     1 ; - ! [D] Reduction gear ratio of yaw control clutch at front
                      ! differential [I]
TLAG_CL(1)       0.01 ; s ! [D] Time lag of clutch control for front differential
                      ! [I]
TLAG_CL2(1)      0.01 ; s ! [D] Time lag of second clutch control at front
                      ! differential [I]
TC_CL(1)         0.01 ; s ! [D] Time constant of clutch actuator for front
                      ! differential
TC_CL2(1)        0.01 ; s ! [D] Time constant of second clutch actuator at front
                      ! differential
OPT_TWIN_CLUTCH(1)  0 ! [D] Does the front differential have twin clutches? 0 -> no,
                      ! 1 -> yes [I]
TLAG_CL_TWIN(1,1) 0.01 ; s ! [D] Time lag for left twin clutch control at front
                       ! differential [I]
TLAG_CL_TWIN(1,2) 0.01 ; s ! [D] Time lag for right twin clutch control at front
                       ! differential [I]
TC_CL_TWIN(1,1)  0.01 ; s ! [D] Time constant for left twin clutch actuator at front
                      ! differential
TC_CL_TWIN(1,2)  0.01 ; s ! [D] Time constant for right twin clutch actuator at
                      ! front differential
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control option for rear differential clutch: 0 ->
                      ! table lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TORSEN(2)       0 ! [D] Torsen logic for rear differential clutch: 0 -> add
                      ! initial and sensing torque, 1-> use max of initial and
                      ! sensing torque [I]
M_BIAS_DIFF(2)      1 ; - ! [D] Initial torque bias at rear differential [I]
R_TB_F(2)        0.01 ; - ! [D] Ratio: torque bias at rear differential. (positive
                      ! torque input) [I]
R_TB_R(2)        0.01 ; - ! [D] Ratio: torque bias at rear differential. (negative
                      ! torque input) [I]
R_CLUTCH_YAW(2)     1 ; - ! [D] Reduction gear ratio of yaw control clutch at rear
                      ! differential [I]
TLAG_CL(2)       0.01 ; s ! [D] Time lag of clutch control for rear differential [I]
TLAG_CL2(2)      0.01 ; s ! [D] Time lag of second clutch control at rear
                      ! differential [I]
TC_CL(2)         0.01 ; s ! [D] Time constant of clutch actuator for rear
                      ! differential
TC_CL2(2)        0.01 ; s ! [D] Time constant of second clutch actuator at rear
                      ! differential
OPT_TWIN_CLUTCH(2)  0 ! [D] Does the rear differential have twin clutches? 0 -> no,
                      ! 1 -> yes [I]
TLAG_CL_TWIN(2,1) 0.01 ; s ! [D] Time lag for left twin clutch control at rear
                       ! differential [I]
TLAG_CL_TWIN(2,2) 0.01 ; s ! [D] Time lag for right twin clutch control at rear
                       ! differential [I]
TC_CL_TWIN(2,1)  0.01 ; s ! [D] Time constant for left twin clutch actuator at rear
                      ! differential
TC_CL_TWIN(2,2)  0.01 ; s ! [D] Time constant for right twin clutch actuator at rear
                      ! differential
OPT_CLUTCH_DIFF(3)  0 ! [D] Clutch control option for transfer case clutch: 0 ->
                      ! table lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TORSEN(3)       0 ! [D] Torsen logic for transfer case clutch: 0 -> add initial
                      ! and sensing torque, 1-> use max of initial and sensing
                      ! torque [I]
M_BIAS_DIFF(3)      1 ; - ! [D] Initial torque bias at transfer case [I]
R_LOCK_F_FSPIN(3)   1 ; - ! [D] Ratio of torque differential to input torque at
                      ! transfer case (positive torque input, front spin) [I]
R_LOCK_R_FSPIN(3)   1 ; - ! [D] Ratio of torque differential to input torque at
                      ! transfer case (negative torque input, front spin) [I]
R_LOCK_F_RSPIN(3)   1 ; - ! [D] Ratio of torque differential to input torque at
                      ! transfer case (positive torque input, rear spin) [I]
R_LOCK_R_RSPIN(3)   1 ; - ! [D] Ratio of torque differential to input torque at
                      ! transfer case (negative torque input, rear spin) [I]
R_CLUTCH_YAW(3)     1 ; - ! [D] Reduction gear ratio of yaw control clutch at
                      ! transfer case [I]
TLAG_CL(3)       0.01 ; s ! [D] Time lag of clutch control for transfer case [I]
TLAG_CL2(3)      0.01 ; s ! [D] Time lag of second clutch control at transfer case
                      ! [I]
TC_CL(3)         0.01 ; s ! [D] Time constant of clutch actuator for transfer case
TC_CL2(3)        0.01 ; s ! [D] Time constant of second clutch actuator at transfer
                      ! case

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Reference Paths provide station-based coordinate systems used to define 3D road
! surfaces, targets for the driver model, and positions of moving objects. In
! addition to the parameters shown in this section, the paths may include spline
! X-Y tables (keyword = SEGMENT_XY_TABLE). The Configurable Function LTARG is often
! used to define lateral positions relative to a path.

! NPATH             0 ! CALC -- Number of installed paths available for roads,
                      ! driver model, and moving objects
DEFINE_PATHS        0 ! VS Command to install reference paths
N_LTARG             1 ! [D] Up to 100 LTARG datasets are available for use by the
                      ! driver model, moving objects, and VS Commands. Datasets
                      ! used by the driver model and moving objects are always
                      ! shown in the Echo file; use this parameter to ensure that
                      ! datasets needed for Events and other VS Commands are shown:
                      ! 0 - 100.

PATH_ID_DM          0 ! [D] PATH_ID number of reference path for the driver [I]
LTARG_DM            1 ! [D] LTARG dataset used by the driver model (0 -> no LTARG)
OPT_DIRECTION       0 ! [D] Travel direction along path PATH_ID_DM: 0 -> set to 1 or
                      ! -1 using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
OPT_INIT_PATH       1 ! [D] Initialize vehicle yaw, Xo, and Yo, to match path
                      ! PATH_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]
SSTART              0 ; m ! [D] Start the vehicle at this station on the driver path
                      ! specified by PATH_ID_DM. The current station on this path
                      ! is the state variable SV_STATION, also available as the
                      ! output variable "Station." If the driver path is different
                      ! from the road surface path ROAD_PATH_ID for the road
                      ! surface ID CURRENT_ROAD_ID, then it might be a good idea to
                      ! specify an initial value for the state variable SV_STA_ROAD
                      ! (station along the road reference path). [I]
SSTOP               0 ; m ! [D] Use to set OPT_DIRECTION (if OPT_DIRECTION = 0);
                      ! stop when the vehicle reaches this station (if OPT_STOP =
                      ! 1)

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. The Z and MU values for a road surface are calculated using Configurable
! Functions MU_ROAD, ROAD_DZ, and ROAD_ZS. Boundaries that control automatic
! switching from one road surface to another make use of the Configurable Functions
! ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             0 ! CALC -- Number of installed road surfaces
! NROAD_DZ          0 ! CALC -- Number of installed ROAD_DZ datasets
DEFINE_ROADS        0 ! VS Command to define road surfaces
DEFINE_DZ_TABLES    0 ! VS Command to define ROAD_DZ datasets
CURRENT_ROAD_ID     1 ! [D] ROAD_ID for the vehicle during initialization [I]

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (dataset
! LTARG_DM for Configurable Function LTARG) relative to a specified reference path
! (PATH_ID = PATH_ID_DM). Preview time is calculated with the Configurable Function
! TPREV.

INSTALL_DM_OUTPUTS    ! VS Command to install XYZ outputs for 10 DM preview points

OPT_DRIVER_MODEL    0 ! [D] Driver model option: 1 -> use path; 2 -> use path with
                      ! no rear steer effect (legacy); 0 -> open-loop steer
A_SW_MAX_DM       360 ; deg ! [D] Limit steering wheel angle for the driver model
AV_SW_MAX_DM     1200 ; deg/s ! [D] Limit steering wheel rate for the driver model
TLAG_DM             0 ; s ! [D] Lag time in driver steer controller
VLOW_DRIVER        10 ; km/h ! [D] Speed for switching the steering controller
                      ! between time preview (high speed) and distance preview (low
                      ! speed)

! NPREVIEW          0 ! CALC -- No. of installed preview sensors for an external DM

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
! The built-in speed controller uses throttle and braking controls to follow target
! speed specified as a function of time and/or station along reference path
! PATH_ID_DM. The target speed is specified with Configurable Function
! SPEED_TARGET. If the speed is based on the path, then acceleration limits are
! specified using functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and
! SPEED_AY_RIGHT.

N_SPEED_TARGET      1 ! [D] Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 100
OPT_SC              0 ! [D] Speed controller: 0 -> Off (open-loop), 1 - 3, target
                      ! speed as function of time and station, 4 -> speed based on
                      ! path preview [I]
OPT_BK_SC           0 ! [D] Speed controller and brakes: 0 -> turn off controller if
                      ! brakes are applied, 1 -> use brakes [I]
OPT_SC_3D           1 ! [D] Speed controller: 1 -> account for 3D ground curvature,
                      ! 0 -> assume flat level ground [I]
OPT_SC_SKILL        2 ! [D] Speed controller skill: 2 -> high, 1 -> medium, 0 -> low
                      ! [I]
OPT_SC_ENGINE_BRAKING 0 ! [D] Speed controller: option to use engine braking. 0 ->
                        ! ignore, 1 -> use engine braking [I]
SPEED_ID_SC         1 ! [D] Index of SPEED_TARGET dataset used by SC: 1  - 100 [I]
BK_PERF_SC       0.15 ; g/MPa ! [D] Approximate vehicle decel per unit pressure [I]
PBK_CON_MAX_SC     20 ; MPa ! [D] Maximum master cylinder pressure from controller
                      ! [I]
PMAX_SC           200 ; kW ! [D] Maximum power available when OPT_PT = 0 [I]
R_REAR_DRIVE_SC   0.5 ; - ! [D] Ratio: [rear axle drive torque]/[total drive torque]
                      ! [I]
SPEED_CURV_LENGTH  20 ; m ! [D] Speed controller: length of path used to calculate
                      ! curvature with 3 points (both ends and the mid-point) [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
SPEED_PREVIEW     200 ; m ! [D] Speed controller: path preview distance [I]
SPEED_PREVIEW_START 0 ; m ! [D] Speed controller: path preview start (distance in
                      ! front of sprung mass origin) [I]
SPEED_PREVIEW_STEP  1 ; m ! [D] Speed controller: preview interval (resolution) [I]

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_LAT    42.231 ; deg ! [D] Reference GPS latitude where Y = 0 [I]
GPS_REF_LONG  -83.727 ; deg ! [D] Reference GPS longitude where X = 0 [I]
! NSENSOR_M         0 ! CALC -- Number of installed custom motion sensors

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! CALC -- Number of installed reference points and forces

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! BRAKE_COOL: Brake rotor cooling coefficient. Cooling coefficient is a function of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Cooling coefficient from the calculation can be adjusted
! with BRAKE_COOL_GAIN and BRAKE_COOL_OFFSET. Vehicle speed used in the calculation
! can be adjusted with VX_SCALE_BRAKE_COOL and VX_START_BRAKE_COOL. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

BRAKE_COOL_CONSTANT(1,1) 0 ; 1/s ! [D] Constant cooling coefficient, axle 1, left
                           ! side
BRAKE_COOL_OFFSET(1,1) 0 ; 1/s ! Offset added (after gain) to get cooling
                         ! coefficient

BRAKE_COOL_CONSTANT(1,2) 0 ; 1/s ! [D] Constant cooling coefficient, axle 1, right
                           ! side
BRAKE_COOL_OFFSET(1,2) 0 ; 1/s ! Offset added (after gain) to get cooling
                         ! coefficient

BRAKE_COOL_CONSTANT(2,1) 0 ; 1/s ! [D] Constant cooling coefficient, axle 2, left
                           ! side
BRAKE_COOL_OFFSET(2,1) 0 ; 1/s ! Offset added (after gain) to get cooling
                         ! coefficient

BRAKE_COOL_CONSTANT(2,2) 0 ; 1/s ! [D] Constant cooling coefficient, axle 2, right
                           ! side
BRAKE_COOL_OFFSET(2,2) 0 ; 1/s ! Offset added (after gain) to get cooling
                         ! coefficient

! CAMBER: Suspension camber (measured at zero steer). Camber is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Camber from the calculation can be adjusted with
! CAMBER_GAIN and CAMBER_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_CAMBER and JNC_START_CAMBER. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

CAMBER_CONSTANT(1,1) 0 ; deg ! [D] Constant camber, axle 1, left side
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber

CAMBER_CONSTANT(1,2) 0 ; deg ! [D] Constant camber, axle 1, right side
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber

CAMBER_CONSTANT(2,1) 0 ; deg ! [D] Constant camber, axle 2, left side
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added (after gain) to get camber

CAMBER_CONSTANT(2,2) 0 ; deg ! [D] Constant camber, axle 2, right side
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added (after gain) to get camber

! CC_FX: Compliance: wheel camber due to in-phase Fx (measured at zero steer). CC_FX
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CC_FX displacement from
! the calculation can be adjusted with CC_FX_GAIN and CC_FX_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_CC_FX and F_START_CC_FX. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

CC_FX_CONSTANT(1,1) 0 ; deg ! [D] Constant CC_FX displacement, axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CC_FX displacement

CC_FX_CONSTANT(1,2) 0 ; deg ! [D] Constant CC_FX displacement, axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CC_FX displacement

CC_FX_CONSTANT(2,1) 0 ; deg ! [D] Constant CC_FX displacement, axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CC_FX displacement

CC_FX_CONSTANT(2,2) 0 ; deg ! [D] Constant CC_FX displacement, axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CC_FX displacement

! CD_MY: Compliance: suspension dive due to brake MY (measured at zero steer). CD_MY
! angular deflection is a function of moment (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CD_MY angular
! deflection from the calculation can be adjusted with CD_MY_GAIN and CD_MY_OFFSET.
! Moment used in the calculation can be adjusted with M_SCALE_CD_MY and
! M_START_CD_MY. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

CD_MY_CONSTANT(1,1) 0 ; deg ! [D] Constant CD_MY angular deflection, axle 1, left
                      ! side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection

CD_MY_CONSTANT(1,2) 0 ; deg ! [D] Constant CD_MY angular deflection, axle 1, right
                      ! side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection

CD_MY_CONSTANT(2,1) 0 ; deg ! [D] Constant CD_MY angular deflection, axle 2, left
                      ! side
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection

CD_MY_CONSTANT(2,2) 0 ; deg ! [D] Constant CD_MY angular deflection, axle 2, right
                      ! side
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection

! CI_FY: Compliance: inclination of wheel due to out-of-phase Fy (measured at zero
! steer). CI_FY displacement is a function of force (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CI_FY
! displacement from the calculation can be adjusted with CI_FY_GAIN and CI_FY_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_CI_FY and F_START_CI_FY.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

CI_FY_CONSTANT(1,1) 0 ; deg ! [D] Constant CI_FY displacement, axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CI_FY displacement

CI_FY_CONSTANT(1,2) 0 ; deg ! [D] Constant CI_FY displacement, axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CI_FY displacement

CI_FY_CONSTANT(2,1) 0 ; deg ! [D] Constant CI_FY displacement, axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CI_FY displacement

CI_FY_CONSTANT(2,2) 0 ; deg ! [D] Constant CI_FY displacement, axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CI_FY displacement

! CI_MZ: Compliance: inclination of wheel due to out-of-phase Mz (measured at zero
! steer). CI_MZ angular deflection is a function of moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CI_MZ angular
! deflection from the calculation can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET.
! Moment used in the calculation can be adjusted with M_SCALE_CI_MZ and
! M_START_CI_MZ. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

CI_MZ_CONSTANT(1,1) 0 ; deg ! [D] Constant CI_MZ angular deflection, axle 1, left
                      ! side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection

CI_MZ_CONSTANT(1,2) 0 ; deg ! [D] Constant CI_MZ angular deflection, axle 1, right
                      ! side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection

CI_MZ_CONSTANT(2,1) 0 ; deg ! [D] Constant CI_MZ angular deflection, axle 2, left
                      ! side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection

CI_MZ_CONSTANT(2,2) 0 ; deg ! [D] Constant CI_MZ angular deflection, axle 2, right
                      ! side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection

! CLUTCH_CONTROL: Clutch input (normalized: typically 0 to 1). Normalized clutch
! input is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Normalized clutch input from the
! calculation can be adjusted with CLUTCH_CONTROL_GAIN and CLUTCH_CONTROL_OFFSET.
! Time used in the calculation can be adjusted with TSCALE_CLUTCH and TSTART_CLUTCH.

CLUTCH_CONTROL_CONSTANT 0 ; - ! [D] Constant normalized clutch input
CLUTCH_CONTROL_OFFSET 0 ; - ! Offset added (after gain) to get normalized clutch
                        ! input

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! [D] Constant normalized clutch input, front
                                  ! differential
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, rear
                                  ! differential
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3) 1 ; - ! [D] Constant normalized clutch input,
                                  ! transfer case
CLUTCH_CONTROL_DIFF_GAIN(3) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ.

! [D] 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 600
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN  1 ! Gain multiplied with calculated value to get available
                      ! clutch torque
CLUTCH_TORQUE_OFFSET 0 ; N-m ! Offset added (after gain) to get available clutch
                       ! torque
CON_START_CL_TORQ   0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ   1 ! Scale factor divided into (normalized clutch control -
                      ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 3 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, front
                                 ! differential
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, rear
                                 ! differential
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3) 0 ; N-m ! [D] Constant available torque, transfer
                                 ! case
CLUTCH_TORQUE_DIFF_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CLUTCH_TORQUE_DIFF2: Available torque for second (yaw control) clutch. Available
! torque is a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF2_GAIN and
! CLUTCH_TORQUE_DIFF2_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF2 and CON_START_CL_TORQ_DIFF2. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_TORQUE_DIFF2_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, front
                                  ! differential
CLUTCH_TORQUE_DIFF2_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                                ! torque

CLUTCH_TORQUE_DIFF2_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, rear
                                  ! differential
CLUTCH_TORQUE_DIFF2_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                                ! torque

CLUTCH_TORQUE_DIFF2_CONSTANT(3) 0 ; N-m ! [D] Constant available torque, transfer
                                  ! case
CLUTCH_TORQUE_DIFF2_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available
                                ! torque

! CLUTCH_TWIN: Available torque for twin clutch. Available torque is a function of
! normalized clutch input (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Available torque from the calculation can be
! adjusted with CLUTCH_TWIN_GAIN and CLUTCH_TWIN_OFFSET. Normalized clutch input used
! in the calculation can be adjusted with CON_SCALE_CL_TORQ_TWIN and
! CON_START_CL_TORQ_TWIN. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IDIFF and
! ISIDE are used to identify the dataset when reading data.

! [D] 1D table: col 1 = normalized clutch input (-), col 2 = available torque (N-m)
CLUTCH_TWIN_TABLE(1,1) LINEAR_FLAT ! front diff., left side
 0, 600
 1, 0
ENDTABLE
CLUTCH_TWIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get available
                        ! torque
CLUTCH_TWIN_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get available torque
CON_START_CL_TORQ_TWIN(1,1) 0 ; - ! Offset subtracted from normalized clutch input
CON_SCALE_CL_TORQ_TWIN(1,1) 1 ! Scale factor divided into (normalized clutch input -
                              ! CON_START_CL_TORQ_TWIN)

! [D] 1D table: col 1 = normalized clutch input (-), col 2 = available torque (N-m)
CLUTCH_TWIN_TABLE(1,2) LINEAR_FLAT ! front diff., right side
 0, 600
 1, 0
ENDTABLE
CLUTCH_TWIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get available
                        ! torque
CLUTCH_TWIN_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get available torque
CON_START_CL_TORQ_TWIN(1,2) 0 ; - ! Offset subtracted from normalized clutch input
CON_SCALE_CL_TORQ_TWIN(1,2) 1 ! Scale factor divided into (normalized clutch input -
                              ! CON_START_CL_TORQ_TWIN)

! [D] 1D table: col 1 = normalized clutch input (-), col 2 = available torque (N-m)
CLUTCH_TWIN_TABLE(2,1) LINEAR_FLAT ! rear diff., left side
 0, 600
 1, 0
ENDTABLE
CLUTCH_TWIN_GAIN(2,1) 1 ! Gain multiplied with calculated value to get available
                        ! torque
CLUTCH_TWIN_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get available torque
CON_START_CL_TORQ_TWIN(2,1) 0 ; - ! Offset subtracted from normalized clutch input
CON_SCALE_CL_TORQ_TWIN(2,1) 1 ! Scale factor divided into (normalized clutch input -
                              ! CON_START_CL_TORQ_TWIN)

! [D] 1D table: col 1 = normalized clutch input (-), col 2 = available torque (N-m)
CLUTCH_TWIN_TABLE(2,2) LINEAR_FLAT ! rear diff., right side
 0, 600
 1, 0
ENDTABLE
CLUTCH_TWIN_GAIN(2,2) 1 ! Gain multiplied with calculated value to get available
                        ! torque
CLUTCH_TWIN_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get available torque
CON_START_CL_TORQ_TWIN(2,2) 0 ; - ! Offset subtracted from normalized clutch input
CON_SCALE_CL_TORQ_TWIN(2,2) 1 ! Scale factor divided into (normalized clutch input -
                              ! CON_START_CL_TORQ_TWIN)

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 1 ! [D] Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 1 ! [D] Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 1 ! [D] Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 1 ! [D] Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 1 ! [D] Coefficient: jounce stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 1 ! [D] Coefficient: jounce stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 1 ! [D] Coefficient: jounce stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 1 ! [D] Coefficient: jounce stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 1 ! [D] Coefficient: rebound stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 1 ! [D] Coefficient: rebound stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 1 ! [D] Coefficient: rebound stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 1 ! [D] Coefficient: rebound stop deflection per unit
                             ! jounce at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 1 ! [D] Coefficient: lower spring seat movement per
                                ! unit jounce at wheel (mm/mm), axle 1, left side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 1 ! [D] Coefficient: lower spring seat movement per
                                ! unit jounce at wheel (mm/mm), axle 1, right side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 1 ! [D] Coefficient: lower spring seat movement per
                                ! unit jounce at wheel (mm/mm), axle 2, left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 1 ! [D] Coefficient: lower spring seat movement per
                                ! unit jounce at wheel (mm/mm), axle 2, right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to out-of-phase Fy (measured at zero steer). CS_FY
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CS_FY displacement from
! the calculation can be adjusted with CS_FY_GAIN and CS_FY_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_CS_FY and F_START_CS_FY. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

CS_FY_CONSTANT(1,1) 0 ; deg ! [D] Constant CS_FY displacement, axle 1, left side
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CS_FY displacement

CS_FY_CONSTANT(1,2) 0 ; deg ! [D] Constant CS_FY displacement, axle 1, right side
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CS_FY displacement

CS_FY_CONSTANT(2,1) 0 ; deg ! [D] Constant CS_FY displacement, axle 2, left side
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CS_FY displacement

CS_FY_CONSTANT(2,2) 0 ; deg ! [D] Constant CS_FY displacement, axle 2, right side
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CS_FY displacement

! CS_MZ: Compliance: steer due to out-of-phase Mz (measured at zero steer). CS_MZ
! angular deflection is a function of moment (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CS_MZ angular
! deflection from the calculation can be adjusted with CS_MZ_GAIN and CS_MZ_OFFSET.
! Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

CS_MZ_CONSTANT(1,1) 0 ; deg ! [D] Constant CS_MZ angular deflection, axle 1, left
                      ! side
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection

CS_MZ_CONSTANT(1,2) 0 ; deg ! [D] Constant CS_MZ angular deflection, axle 1, right
                      ! side
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection

CS_MZ_CONSTANT(2,1) 0 ; deg ! [D] Constant CS_MZ angular deflection, axle 2, left
                      ! side
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection

CS_MZ_CONSTANT(2,2) 0 ; deg ! [D] Constant CS_MZ angular deflection, axle 2, right
                      ! side
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection

! CT_FX: Compliance: toe due to in-phase Fx (measured at zero steer). CT_FX
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CT_FX displacement from
! the calculation can be adjusted with CT_FX_GAIN and CT_FX_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_CT_FX and F_START_CT_FX. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

CT_FX_CONSTANT(1,1) 0 ; deg ! [D] Constant CT_FX displacement, axle 1, left side
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CT_FX displacement

CT_FX_CONSTANT(1,2) 0 ; deg ! [D] Constant CT_FX displacement, axle 1, right side
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CT_FX displacement

CT_FX_CONSTANT(2,1) 0 ; deg ! [D] Constant CT_FX displacement, axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CT_FX displacement

CT_FX_CONSTANT(2,2) 0 ; deg ! [D] Constant CT_FX displacement, axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CT_FX displacement

! C_LAT: Compliance: lateral inward deflection of wheel due to out-of-phase Fy
! (measured at zero steer). C_LAT displacement is a function of force (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! C_LAT displacement from the calculation can be adjusted with C_LAT_GAIN and
! C_LAT_OFFSET. Force used in the calculation can be adjusted with F_SCALE_C_LAT and
! F_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_CONSTANT(1,1) 0 ; mm ! [D] Constant C_LAT displacement, axle 1, left side
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get C_LAT displacement

C_LAT_CONSTANT(1,2) 0 ; mm ! [D] Constant C_LAT displacement, axle 1, right side
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get C_LAT displacement

C_LAT_CONSTANT(2,1) 0 ; mm ! [D] Constant C_LAT displacement, axle 2, left side
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added (after gain) to get C_LAT displacement

C_LAT_CONSTANT(2,2) 0 ; mm ! [D] Constant C_LAT displacement, axle 2, right side
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added (after gain) to get C_LAT displacement

! C_LONG: Compliance: longitudinal deflection of wheel due to in-phase Fx (measured
! at zero steer). C_LONG displacement is a function of force (CONSTANT, COEFFICIENT,
! or TABLE). Alternatively, a custom equation can be defined at runtime. C_LONG
! displacement from the calculation can be adjusted with C_LONG_GAIN and
! C_LONG_OFFSET. Force used in the calculation can be adjusted with F_SCALE_C_LONG
! and F_START_C_LONG. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

C_LONG_CONSTANT(1,1) 0 ; mm ! [D] Constant C_LONG displacement, axle 1, left side
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get C_LONG displacement

C_LONG_CONSTANT(1,2) 0 ; mm ! [D] Constant C_LONG displacement, axle 1, right side
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get C_LONG displacement

C_LONG_CONSTANT(2,1) 0 ; mm ! [D] Constant C_LONG displacement, axle 2, left side
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get C_LONG displacement

C_LONG_CONSTANT(2,2) 0 ; mm ! [D] Constant C_LONG displacement, axle 2, right side
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get C_LONG displacement

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(7) LINEAR_FLAT ! shifting between gears 7 and 8
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(7) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(7) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(7) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(8) LINEAR_FLAT ! shifting between gears 8 and 9
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(8) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(8) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(8) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(9) LINEAR_FLAT ! shifting between gears 9 and 10
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(9) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(9) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(9) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(10) LINEAR_FLAT ! shifting between gears 10 and 11
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(10) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(10) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(10) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(11) LINEAR_FLAT ! shifting between gears 11 and 12
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(11) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(11) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(11) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(12) LINEAR_FLAT ! shifting between gears 12 and 13
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(12) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(12) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(12) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(13) LINEAR_FLAT ! shifting between gears 13 and 14
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(13) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(13) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(13) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(14) LINEAR_FLAT ! shifting between gears 14 and 15
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(14) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(14) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(14) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(15) LINEAR_FLAT ! shifting between gears 15 and 16
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(15) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(15) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(15) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(16) LINEAR_FLAT ! shifting between gears 16 and 17
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(16) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(16) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(16) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(17) LINEAR_FLAT ! shifting between gears 17 and 18
 0, 350
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(17) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
DOWNSHIFT_TRANS_OFFSET(17) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_DOWNSHIFT(17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(17) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1) 0 ! [D] Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 1, left side
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(1,2) 0 ! [D] Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 1, right side
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,1) 0 ! [D] Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 2, left side
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,2) 0 ! [D] Coefficient: damper force per unit compression speed
                      ! (N/[mm/s]), axle 2, right side
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 600 ! [D] Coefficient: spring force per unit spring
                             ! compression (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 600 ! [D] Coefficient: spring force per unit spring
                             ! compression (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 600 ! [D] Coefficient: spring force per unit spring
                             ! compression (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 600 ! [D] Coefficient: spring force per unit spring
                             ! compression (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 600 ! [D] Coefficient: spring force per unit spring
                            ! compression (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 600 ! [D] Coefficient: spring force per unit spring
                            ! compression (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 600 ! [D] Coefficient: spring force per unit spring
                            ! compression (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 600 ! [D] Coefficient: spring force per unit spring
                            ! compression (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

FX_AERO_SHAPING_CONSTANT 0 ; - ! [D] Constant CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO.

FX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! [D] 1D table: col 1 = Kappa (-), col 2 = Fx (N)
FX_TIRE_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -0.3, -0.85
 -0.08, -0.95
 -0.02, -0.05
 0, 0
 0.02, 0.05
 0.08, 0.95
 0.3, 0.85
ENDTABLE
FX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FX_TIRE_FZ_COEFFICIENT(1,1) 1 ! [D] Coefficient: Fx scaling due to Fz per unit Fz
                              ! (-/N), axle 1, left side
FZ_START_FX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! [D] 1D table: col 1 = Kappa (-), col 2 = Fx (N)
FX_TIRE_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -0.3, -0.85
 -0.08, -0.95
 -0.02, -0.05
 0, 0
 0.02, 0.05
 0.08, 0.95
 0.3, 0.85
ENDTABLE
FX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FX_TIRE_FZ_COEFFICIENT(1,2) 1 ! [D] Coefficient: Fx scaling due to Fz per unit Fz
                              ! (-/N), axle 1, right side
FZ_START_FX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! [D] 1D table: col 1 = Kappa (-), col 2 = Fx (N)
FX_TIRE_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -0.3, -0.85
 -0.08, -0.95
 -0.02, -0.05
 0, 0
 0.02, 0.05
 0.08, 0.95
 0.3, 0.85
ENDTABLE
FX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FX_TIRE_FZ_COEFFICIENT(2,1) 1 ! [D] Coefficient: Fx scaling due to Fz per unit Fz
                              ! (-/N), axle 2, left side
FZ_START_FX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! [D] 1D table: col 1 = Kappa (-), col 2 = Fx (N)
FX_TIRE_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -0.3, -0.85
 -0.08, -0.95
 -0.02, -0.05
 0, 0
 0.02, 0.05
 0.08, 0.95
 0.3, 0.85
ENDTABLE
FX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FX_TIRE_FZ_COEFFICIENT(2,2) 1 ! [D] Coefficient: Fx scaling due to Fz per unit Fz
                              ! (-/N), axle 2, right side
FZ_START_FX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FYG_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and
! inclination angle (Gamma). Fy can be a nonlinear CARPET function of Fz and Gamma or
! a function of Gamma (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! FYG_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Fy from the calculation can be
! adjusted with FYG_TIRE_GAIN and FYG_TIRE_OFFSET. Gamma used in the calculation can
! be adjusted with GAMMA_SCALE_FYG_TIRE and GAMMA_START_FYG_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_FYG_TIRE and FZ_START_FYG_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FYG_TIRE_CONSTANT(1,1) 0 ; N ! [D] Constant Fy component due to Gamma, axle 1, left
                         ! side
FYG_TIRE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
FYG_TIRE_FZ_COEFFICIENT(1,1) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                               ! (-/N), axle 1, left side
FZ_START_FYG_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

FYG_TIRE_CONSTANT(1,2) 0 ; N ! [D] Constant Fy component due to Gamma, axle 1, right
                         ! side
FYG_TIRE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
FYG_TIRE_FZ_COEFFICIENT(1,2) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                               ! (-/N), axle 1, right side
FZ_START_FYG_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

FYG_TIRE_CONSTANT(2,1) 0 ; N ! [D] Constant Fy component due to Gamma, axle 2, left
                         ! side
FYG_TIRE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
FYG_TIRE_FZ_COEFFICIENT(2,1) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                               ! (-/N), axle 2, left side
FZ_START_FYG_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

FYG_TIRE_CONSTANT(2,2) 0 ; N ! [D] Constant Fy component due to Gamma, axle 2, right
                         ! side
FYG_TIRE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Fy
FYG_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
FYG_TIRE_FZ_COEFFICIENT(2,2) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                               ! (-/N), axle 2, right side
FZ_START_FYG_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FYG_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FYG_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

FY_AERO_SHAPING_CONSTANT 0 ; - ! [D] Constant CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO.

FY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! [D] 1D table: col 1 = Alpha (deg), col 2 = Fy (N)
FY_TIRE_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -9, -1
 -1, -0.28
 0, 0
 1, 0.28
 9, 1
ENDTABLE
FY_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FY_TIRE_FZ_COEFFICIENT(1,1) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                              ! (-/N), axle 1, left side
FZ_START_FY_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! [D] 1D table: col 1 = Alpha (deg), col 2 = Fy (N)
FY_TIRE_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -9, -1
 -1, -0.28
 0, 0
 1, 0.28
 9, 1
ENDTABLE
FY_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FY_TIRE_FZ_COEFFICIENT(1,2) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                              ! (-/N), axle 1, right side
FZ_START_FY_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! [D] 1D table: col 1 = Alpha (deg), col 2 = Fy (N)
FY_TIRE_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -9, -1
 -1, -0.28
 0, 0
 1, 0.28
 9, 1
ENDTABLE
FY_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FY_TIRE_FZ_COEFFICIENT(2,1) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                              ! (-/N), axle 2, left side
FZ_START_FY_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! [D] 1D table: col 1 = Alpha (deg), col 2 = Fy (N)
FY_TIRE_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -9, -1
 -1, -0.28
 0, 0
 1, 0.28
 9, 1
ENDTABLE
FY_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FY_TIRE_FZ_COEFFICIENT(2,2) 1 ! [D] Coefficient: Fy scaling due to Fz per unit Fz
                              ! (-/N), axle 2, right side
FZ_START_FY_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

FZ_AERO_SHAPING_CONSTANT 0 ; - ! [D] Constant CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO.

FZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical load. Vertical load is a function of tire deflection
! (COEFFICIENT or TABLE). Vertical load from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire deflection used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1) 220 ! [D] Coefficient: vertical load per unit tire
                             ! deflection (N/mm), axle 1, left side
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2) 220 ! [D] Coefficient: vertical load per unit tire
                             ! deflection (N/mm), axle 1, right side
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1) 220 ! [D] Coefficient: vertical load per unit tire
                             ! deflection (N/mm), axle 2, left side
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2) 220 ! [D] Coefficient: vertical load per unit tire
                             ! deflection (N/mm), axle 2, right side
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function F_BOOST_R_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost force from the calculation can be adjusted with F_BOOST_R_GAIN
! and F_BOOST_R_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_F_BOOST and M_TB_START_F_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_F_BOOST and VX_TB_START_F_BOOST.

F_BOOST_R_CONSTANT  0 ; N ! [D] Constant boost force component due to torsion bar
                      ! torque
F_BOOST_R_GAIN      1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET    0 ; N ! Offset added (after gain) to get boost force
F_BOOST_R_COMBINE MULTIPLY ! How to combine the two components
F_BOOST_R_V_CONSTANT 1 ; - ! [D] Constant boost force component due to speed

! F_BRAKE_PEDAL: Open loop brake pedal force. Pedal force is a function of time
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Pedal force from the calculation can be adjusted with F_BRAKE_PEDAL_GAIN and
! F_BRAKE_PEDAL_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_F_BRAKE_PEDAL and TSTART_F_BRAKE_PEDAL.

F_BRAKE_PEDAL_CONSTANT 0 ; N ! [D] Constant pedal force
F_BRAKE_PEDAL_OFFSET 0 ; N ! Offset added (after gain) to get pedal force

! F_BRAKE_PEDAL_BOOST: Brake booster output force. Output force is a function of
! pedal input force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Output force from the calculation can be
! adjusted with F_BRAKE_PEDAL_BOOST_GAIN and F_BRAKE_PEDAL_BOOST_OFFSET. Pedal input
! force used in the calculation can be adjusted with F_SCALE_F_BOOST and
! F_START_F_BOOST.

F_BRAKE_PEDAL_BOOST_CONSTANT 0 ; N ! [D] Constant output force
F_BRAKE_PEDAL_BOOST_OFFSET 0 ; N ! Offset added (after gain) to get output force

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

F_JNC_STOP_CONSTANT(1,1) 0 ; N ! [D] Constant force, axle 1, left side
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(1,2) 0 ; N ! [D] Constant force, axle 1, right side
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,1) 0 ; N ! [D] Constant force, axle 2, left side
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,2) 0 ; N ! [D] Constant force, axle 2, right side
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

F_REB_STOP_CONSTANT(1,1) 0 ; N ! [D] Constant force, axle 1, left side
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(1,2) 0 ; N ! [D] Constant force, axle 1, right side
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,1) 0 ; N ! [D] Constant force, axle 2, left side
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,2) 0 ; N ! [D] Constant force, axle 2, right side
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1) 0.02 ! [D] Coefficient: pitman arm angle per unit steering
                             ! gear input angle (deg/deg), axle 1
GEAR_ROT_GAIN(1)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1)  0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(2) 0.02 ! [D] Coefficient: pitman arm angle per unit steering
                             ! gear input angle (deg/deg), axle 2
GEAR_ROT_GAIN(2)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(2)  0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.

! [D] 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE LINEAR ! linear interpolation and extrapolation
 0, 0.002
 1, 0
ENDTABLE
INV_CAP_TC_GAIN     1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET   0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                      ! converter capacity)
RSPIN_START_INV_CAP_TC 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC 1 ! Scale factor divided into (speed ratio -
                         ! RSPIN_START_INV_CAP_TC)

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

KGAMMA_CONSTANT(1,1) 0 ; N/deg ! [D] Constant dFy/dGamma, axle 1, left side
KGAMMA_OFFSET(1,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma

KGAMMA_CONSTANT(1,2) 0 ; N/deg ! [D] Constant dFy/dGamma, axle 1, right side
KGAMMA_OFFSET(1,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma

KGAMMA_CONSTANT(2,1) 0 ; N/deg ! [D] Constant dFy/dGamma, axle 2, left side
KGAMMA_OFFSET(2,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma

KGAMMA_CONSTANT(2,2) 0 ; N/deg ! [D] Constant dFy/dGamma, axle 2, right side
KGAMMA_OFFSET(2,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma

! LOCK_AT: Transmission speed for locking the torque converter. Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with LOCK_AT_GAIN and LOCK_AT_OFFSET. Throttle
! position used in the calculation can be adjusted with THROTTLE_SCALE_LOCK_AT and
! THROTTLE_START_LOCK_AT. This configurable function supports 18 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index IGEAR is used
! to identify the dataset when reading data.

LOCK_AT_CONSTANT(1) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(1)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(1)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(2) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(2)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(2)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(3) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(3)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(3)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(4) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(4)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(4)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(5) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(5)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(5)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(6) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(6)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(6)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(7) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(7)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(7)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(8) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(8)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(8)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(9) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(9)     1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(9)   0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(10) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(10)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(10)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(11) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(11)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(11)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(12) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(12)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(12)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(13) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(13)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(13)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(14) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(14)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(14)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(15) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(15)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(15)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(16) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(16)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(16)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(17) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(17)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(17)  0 ; rpm ! Offset added (after gain) to get transmission speed

LOCK_AT_CONSTANT(18) 3000 ; rpm ! [D] Constant transmission speed
LOCK_AT_GAIN(18)    1 ! Gain multiplied with calculated value to get transmission
                      ! speed
LOCK_AT_OFFSET(18)  0 ; rpm ! Offset added (after gain) to get transmission speed

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc.. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 100 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_CONSTANT(1)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(2)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(3)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(3)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(4)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(4)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(5)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(5)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(6)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(6)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(7)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(7)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(8)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(8)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(9)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(9)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(10)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(10)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(11)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(11)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(12)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(12)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(13)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(13)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(14)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(14)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(15)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(15)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(16)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(16)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(17)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(17)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(18)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(18)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(19)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(19)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(20)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(20)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(21)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(21)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(22)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(22)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(23)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(23)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(24)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(24)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(25)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(25)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(26)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(26)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(27)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(27)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(28)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(28)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(29)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(29)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(30)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(30)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(31)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(31)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(32)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(32)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(33)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(33)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(34)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(34)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(35)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(35)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(36)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(36)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(37)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(37)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(38)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(38)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(39)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(39)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(40)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(40)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(41)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(41)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(42)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(42)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(43)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(43)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(44)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(44)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(45)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(45)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(46)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(46)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(47)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(47)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(48)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(48)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(49)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(49)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(50)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(50)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(51)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(51)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(52)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(52)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(53)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(53)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(54)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(54)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(55)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(55)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(56)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(56)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(57)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(57)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(58)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(58)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(59)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(59)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(60)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(60)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(61)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(61)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(62)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(62)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(63)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(63)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(64)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(64)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(65)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(65)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(66)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(66)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(67)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(67)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(68)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(68)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(69)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(69)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(70)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(70)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(71)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(71)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(72)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(72)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(73)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(73)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(74)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(74)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(75)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(75)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(76)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(76)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(77)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(77)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(78)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(78)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(79)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(79)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(80)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(80)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(81)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(81)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(82)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(82)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(83)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(83)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(84)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(84)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(85)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(85)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(86)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(86)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(87)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(87)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(88)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(88)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(89)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(89)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(90)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(90)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(91)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(91)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(92)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(92)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(93)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(93)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(94)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(94)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(95)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(95)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(96)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(96)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(97)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(97)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(98)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(98)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(99)  0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(99)    0 ; m ! Offset added (after gain) to get lateral offset

LTARG_CONSTANT(100) 0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(100)   0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_X_CONSTANT(1,1) 0 ; mm ! [D] Constant tire contact length, axle 1, left
                            ! side
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(1,2) 0 ; mm ! [D] Constant tire contact length, axle 1, right
                            ! side
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,1) 0 ; mm ! [D] Constant tire contact length, axle 2, left
                            ! side
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,2) 0 ; mm ! [D] Constant tire contact length, axle 2, right
                            ! side
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_Y_CONSTANT(1,1) 0 ; mm ! [D] Constant tire contact width, axle 1, left
                            ! side
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(1,2) 0 ; mm ! [D] Constant tire contact width, axle 1, right
                            ! side
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,1) 0 ; mm ! [D] Constant tire contact width, axle 2, left
                            ! side
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,2) 0 ; mm ! [D] Constant tire contact width, axle 2, right
                            ! side
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_X from the calculation can be
! adjusted with L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the
! calculation can be adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_X. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

L_RELAX_X_CONSTANT(1,1) 75 ; mm ! [D] Constant L_Relax_X component due to Lagged
                           ! Kappa, axle 1, left side
L_RELAX_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get L_Relax_X
L_RELAX_X_COMBINE(1,1) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 1, left side

L_RELAX_X_CONSTANT(1,2) 75 ; mm ! [D] Constant L_Relax_X component due to Lagged
                           ! Kappa, axle 1, right side
L_RELAX_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get L_Relax_X
L_RELAX_X_COMBINE(1,2) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 1, right side

L_RELAX_X_CONSTANT(2,1) 75 ; mm ! [D] Constant L_Relax_X component due to Lagged
                           ! Kappa, axle 2, left side
L_RELAX_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get L_Relax_X
L_RELAX_X_COMBINE(2,1) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(2,1) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 2, left side

L_RELAX_X_CONSTANT(2,2) 75 ; mm ! [D] Constant L_Relax_X component due to Lagged
                           ! Kappa, axle 2, right side
L_RELAX_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get L_Relax_X
L_RELAX_X_COMBINE(2,2) MULTIPLY ! How to combine the two components
L_RELAX_X_FZ_CONSTANT(2,2) 1 ; - ! [D] Constant L_Relax_X component due to Fz, axle
                             ! 2, right side

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_Y from the calculation can be
! adjusted with L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the
! calculation can be adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_Y. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

L_RELAX_Y_CONSTANT(1,1) 750 ; mm ! [D] Constant L_Relax_Y component due to Lagged
                            ! Alpha, axle 1, left side
L_RELAX_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get L_Relax_Y
L_RELAX_Y_COMBINE(1,1) MULTIPLY ! How to combine the two components
L_RELAX_Y_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant L_Relax_Y component due to Fz, axle
                             ! 1, left side

L_RELAX_Y_CONSTANT(1,2) 750 ; mm ! [D] Constant L_Relax_Y component due to Lagged
                            ! Alpha, axle 1, right side
L_RELAX_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get L_Relax_Y
L_RELAX_Y_COMBINE(1,2) MULTIPLY ! How to combine the two components
L_RELAX_Y_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant L_Relax_Y component due to Fz, axle
                             ! 1, right side

L_RELAX_Y_CONSTANT(2,1) 750 ; mm ! [D] Constant L_Relax_Y component due to Lagged
                            ! Alpha, axle 2, left side
L_RELAX_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get L_Relax_Y
L_RELAX_Y_COMBINE(2,1) MULTIPLY ! How to combine the two components
L_RELAX_Y_FZ_CONSTANT(2,1) 1 ; - ! [D] Constant L_Relax_Y component due to Fz, axle
                             ! 2, left side

L_RELAX_Y_CONSTANT(2,2) 750 ; mm ! [D] Constant L_Relax_Y component due to Lagged
                            ! Alpha, axle 2, right side
L_RELAX_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get L_Relax_Y
L_RELAX_Y_COMBINE(2,2) MULTIPLY ! How to combine the two components
L_RELAX_Y_FZ_CONSTANT(2,2) 1 ; - ! [D] Constant L_Relax_Y component due to Fz, axle
                             ! 2, right side

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! [D] 2D table: row 1 has "0" (place holder) followed by 4 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 4 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.5, 1
 600, 19, 44, 138, 163
 1000, 0, 38, 144, 179
 2000, -16, 19, 148, 203
 3000, -25, 10, 150, 213
 4000, -28, -3, 147, 220
 4500, -29, -9, 141, 226
 5000, -30, -13, 128, 222
 6000, -31, -19, 94, 188
 6200, -31, -22, 78, 175
 6500, -31, -19, -13, -13
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 5 ; - ! [D] Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function MU_ROAD_L of lateral position (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. MU from the
! calculation can be adjusted with MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral
! position used in the calculation can be adjusted with L_SCALE_MU_ROAD and
! L_START_MU_ROAD. This configurable function supports 100 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IROAD is used to
! identify the dataset when reading data.

MU_ROAD_CONSTANT(1) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(2) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(2)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(2)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(2) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(2) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(3) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(3)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(3)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(3) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(3) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(4) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(4)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(4)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(4) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(4) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(5) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(5)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(5)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(5) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(5) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(6) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(6)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(6)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(6) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(6) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(7) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(7)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(7)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(7) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(7) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(8) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(8)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(8)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(8) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(8) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(9) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(9)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(9)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(9) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(9) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(10) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(10)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(10)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(10) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(10) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(11) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(11)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(11)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(11) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(11) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(12) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(12)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(12)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(12) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(12) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(13) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(13)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(13)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(13) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(13) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(14) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(14)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(14)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(14) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(14) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(15) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(15)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(15)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(15) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(15) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(16) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(16)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(16)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(16) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(16) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(17) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(17)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(17)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(17) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(17) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(18) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(18)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(18)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(18) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(18) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(19) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(19)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(19)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(19) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(19) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(20) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(20)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(20)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(20) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(20) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(21) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(21)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(21)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(21) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(21) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(22) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(22)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(22)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(22) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(22) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(23) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(23)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(23)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(23) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(23) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(24) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(24)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(24)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(24) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(24) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(25) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(25)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(25)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(25) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(25) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(26) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(26)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(26)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(26) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(26) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(27) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(27)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(27)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(27) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(27) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(28) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(28)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(28)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(28) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(28) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(29) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(29)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(29)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(29) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(29) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(30) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(30)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(30)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(30) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(30) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(31) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(31)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(31)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(31) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(31) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(32) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(32)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(32)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(32) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(32) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(33) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(33)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(33)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(33) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(33) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(34) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(34)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(34)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(34) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(34) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(35) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(35)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(35)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(35) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(35) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(36) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(36)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(36)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(36) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(36) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(37) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(37)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(37)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(37) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(37) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(38) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(38)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(38)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(38) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(38) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(39) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(39)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(39)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(39) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(39) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(40) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(40)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(40)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(40) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(40) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(41) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(41)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(41)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(41) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(41) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(42) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(42)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(42)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(42) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(42) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(43) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(43)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(43)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(43) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(43) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(44) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(44)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(44)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(44) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(44) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(45) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(45)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(45)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(45) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(45) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(46) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(46)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(46)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(46) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(46) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(47) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(47)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(47)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(47) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(47) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(48) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(48)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(48)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(48) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(48) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(49) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(49)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(49)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(49) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(49) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(50) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(50)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(50)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(50) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(50) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(51) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(51)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(51)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(51) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(51) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(52) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(52)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(52)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(52) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(52) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(53) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(53)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(53)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(53) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(53) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(54) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(54)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(54)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(54) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(54) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(55) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(55)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(55)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(55) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(55) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(56) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(56)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(56)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(56) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(56) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(57) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(57)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(57)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(57) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(57) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(58) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(58)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(58)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(58) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(58) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(59) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(59)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(59)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(59) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(59) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(60) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(60)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(60)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(60) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(60) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(61) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(61)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(61)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(61) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(61) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(62) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(62)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(62)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(62) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(62) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(63) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(63)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(63)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(63) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(63) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(64) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(64)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(64)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(64) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(64) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(65) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(65)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(65)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(65) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(65) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(66) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(66)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(66)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(66) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(66) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(67) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(67)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(67)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(67) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(67) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(68) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(68)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(68)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(68) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(68) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(69) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(69)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(69)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(69) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(69) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(70) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(70)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(70)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(70) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(70) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(71) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(71)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(71)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(71) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(71) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(72) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(72)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(72)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(72) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(72) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(73) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(73)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(73)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(73) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(73) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(74) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(74)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(74)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(74) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(74) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(75) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(75)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(75)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(75) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(75) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(76) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(76)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(76)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(76) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(76) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(77) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(77)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(77)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(77) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(77) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(78) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(78)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(78)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(78) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(78) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(79) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(79)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(79)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(79) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(79) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(80) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(80)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(80)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(80) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(80) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(81) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(81)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(81)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(81) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(81) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(82) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(82)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(82)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(82) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(82) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(83) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(83)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(83)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(83) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(83) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(84) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(84)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(84)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(84) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(84) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(85) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(85)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(85)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(85) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(85) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(86) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(86)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(86)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(86) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(86) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(87) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(87)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(87)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(87) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(87) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(88) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(88)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(88)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(88) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(88) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(89) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(89)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(89)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(89) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(89) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(90) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(90)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(90)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(90) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(90) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(91) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(91)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(91)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(91) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(91) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(92) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(92)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(92)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(92) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(92) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(93) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(93)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(93)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(93) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(93) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(94) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(94)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(94)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(94) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(94) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(95) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(95)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(95)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(95) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(95) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(96) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(96)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(96)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(96) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(96) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(97) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(97)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(97)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(97) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(97) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(98) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(98)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(98)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(98) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(98) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(99) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(99)    1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(99)  0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(99) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(99) 1 ; - ! [D] Constant MU component due to lateral position

MU_ROAD_CONSTANT(100) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(100)   1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(100) 0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(100) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(100) 1 ; - ! [D] Constant MU component due to lateral position

! MXG_TIRE: Tire overturning moment (Mx) as a function of vertical load (Fz) and
! inclination angle (Gamma). Mx can be a nonlinear CARPET function of Fz and Gamma or
! a function of Gamma (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! MXG_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Mx from the calculation can be
! adjusted with MXG_TIRE_GAIN and MXG_TIRE_OFFSET. Gamma used in the calculation can
! be adjusted with GAMMA_SCALE_MXG_TIRE and GAMMA_START_MXG_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_MXG_TIRE and FZ_START_MXG_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

MXG_TIRE_CONSTANT(1,1) 0 ; N-m ! [D] Constant Mx component due to Gamma, axle 1,
                         ! left side
MXG_TIRE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mx
MXG_TIRE_FZ_COEFFICIENT(1,1) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                               ! (-/N), axle 1, left side
FZ_START_MXG_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

MXG_TIRE_CONSTANT(1,2) 0 ; N-m ! [D] Constant Mx component due to Gamma, axle 1,
                         ! right side
MXG_TIRE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mx
MXG_TIRE_FZ_COEFFICIENT(1,2) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                               ! (-/N), axle 1, right side
FZ_START_MXG_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

MXG_TIRE_CONSTANT(2,1) 0 ; N-m ! [D] Constant Mx component due to Gamma, axle 2,
                         ! left side
MXG_TIRE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mx
MXG_TIRE_FZ_COEFFICIENT(2,1) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                               ! (-/N), axle 2, left side
FZ_START_MXG_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

MXG_TIRE_CONSTANT(2,2) 0 ; N-m ! [D] Constant Mx component due to Gamma, axle 2,
                         ! right side
MXG_TIRE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Mx
MXG_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mx
MXG_TIRE_FZ_COEFFICIENT(2,2) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                               ! (-/N), axle 2, right side
FZ_START_MXG_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MXG_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MXG_TIRE)

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

MX_AERO_SHAPING_CONSTANT 0 ; - ! [D] Constant CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO.

MX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_CONSTANT(1)  0 ; N-m ! [D] Constant auxiliary roll moment component due to
                      ! relative axle roll, axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(1) MULTIPLY ! How to combine the two components
MX_AUX_FSTATIC_CONSTANT(1) 1 ; - ! [D] Constant auxiliary roll moment component due
                             ! to static axle load, axle 1

MX_AUX_CONSTANT(2)  0 ; N-m ! [D] Constant auxiliary roll moment component due to
                      ! relative axle roll, axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(2) MULTIPLY ! How to combine the two components
MX_AUX_FSTATIC_CONSTANT(2) 1 ; - ! [D] Constant auxiliary roll moment component due
                             ! to static axle load, axle 2

! MX_TIRE: Tire overturning moment (Mx) as a function of vertical load (Fz) and
! lateral slip (Alpha). Mx can be a nonlinear CARPET function of Fz and Alpha or a
! function of Alpha (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! MX_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Mx from the calculation can be
! adjusted with MX_TIRE_GAIN and MX_TIRE_OFFSET. Alpha used in the calculation can be
! adjusted with ALPHA_SCALE_MX_TIRE and ALPHA_START_MX_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_MX_TIRE and FZ_START_MX_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

MX_TIRE_CONSTANT(1,1) 0 ; N-m ! [D] Constant Mx component due to Alpha, axle 1, left
                        ! side
MX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mx
MX_TIRE_FZ_COEFFICIENT(1,1) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                              ! (-/N), axle 1, left side
FZ_START_MX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

MX_TIRE_CONSTANT(1,2) 0 ; N-m ! [D] Constant Mx component due to Alpha, axle 1,
                        ! right side
MX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mx
MX_TIRE_FZ_COEFFICIENT(1,2) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                              ! (-/N), axle 1, right side
FZ_START_MX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

MX_TIRE_CONSTANT(2,1) 0 ; N-m ! [D] Constant Mx component due to Alpha, axle 2, left
                        ! side
MX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mx
MX_TIRE_FZ_COEFFICIENT(2,1) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                              ! (-/N), axle 2, left side
FZ_START_MX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

MX_TIRE_CONSTANT(2,2) 0 ; N-m ! [D] Constant Mx component due to Alpha, axle 2,
                        ! right side
MX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mx
MX_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mx
MX_TIRE_FZ_COEFFICIENT(2,2) 1 ! [D] Coefficient: Mx scaling due to Fz per unit Fz
                              ! (-/N), axle 2, right side
FZ_START_MX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MX_TIRE)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

MY_AERO_SHAPING_CONSTANT 0 ; - ! [D] Constant CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO.

MY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 200 ! [D] Coefficient: brake torque per unit wheel
                              ! cylinder pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 200 ! [D] Coefficient: brake torque per unit wheel
                              ! cylinder pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 200 ! [D] Coefficient: brake torque per unit wheel
                              ! cylinder pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 200 ! [D] Coefficient: brake torque per unit wheel
                              ! cylinder pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MY_BRAKE_TEMP: Brake torque at wheel. Brake torque can be a nonlinear CARPET
! function of rotor temperature and chamber/cylinder pressure or a function of
! chamber/cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined with a
! function MY_BRAKE_TEMP2 of rotor temperature (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Brake torque from the
! calculation can be adjusted with MY_BRAKE_TEMP_GAIN and MY_BRAKE_TEMP_OFFSET.
! Chamber/cylinder pressure used in the calculation can be adjusted with
! PBK_SCALE_MY_BRAKE_TEMP and PBK_START_MY_BRAKE_TEMP. Rotor temperature used in the
! calculation can be adjusted with TEMP_SCALE_MY_BRAKE and TEMP_START_MY_BRAKE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

MY_BRAKE_TEMP_CONSTANT(1,1) 0 ; N-m ! [D] Constant brake torque component due to
                              ! chamber/cylinder pressure, axle 1, left side
MY_BRAKE_TEMP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get brake
                          ! torque
MY_BRAKE_TEMP_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
MY_BRAKE_TEMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
MY_BRAKE_TEMP2_CONSTANT(1,1) 1 ; - ! [D] Constant brake torque component due to
                               ! rotor temperature, axle 1, left side

MY_BRAKE_TEMP_CONSTANT(1,2) 0 ; N-m ! [D] Constant brake torque component due to
                              ! chamber/cylinder pressure, axle 1, right side
MY_BRAKE_TEMP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get brake
                          ! torque
MY_BRAKE_TEMP_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
MY_BRAKE_TEMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
MY_BRAKE_TEMP2_CONSTANT(1,2) 1 ; - ! [D] Constant brake torque component due to
                               ! rotor temperature, axle 1, right side

MY_BRAKE_TEMP_CONSTANT(2,1) 0 ; N-m ! [D] Constant brake torque component due to
                              ! chamber/cylinder pressure, axle 2, left side
MY_BRAKE_TEMP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get brake
                          ! torque
MY_BRAKE_TEMP_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
MY_BRAKE_TEMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
MY_BRAKE_TEMP2_CONSTANT(2,1) 1 ; - ! [D] Constant brake torque component due to
                               ! rotor temperature, axle 2, left side

MY_BRAKE_TEMP_CONSTANT(2,2) 0 ; N-m ! [D] Constant brake torque component due to
                              ! chamber/cylinder pressure, axle 2, right side
MY_BRAKE_TEMP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get brake
                          ! torque
MY_BRAKE_TEMP_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
MY_BRAKE_TEMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
MY_BRAKE_TEMP2_CONSTANT(2,2) 1 ; - ! [D] Constant brake torque component due to
                               ! rotor temperature, axle 2, right side

! MZG_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and
! inclination angle (Gamma). Mz can be a nonlinear CARPET function of Fz and Gamma or
! a function of Gamma (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! MZG_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Mz from the calculation can be
! adjusted with MZG_TIRE_GAIN and MZG_TIRE_OFFSET. Gamma used in the calculation can
! be adjusted with GAMMA_SCALE_MZG_TIRE and GAMMA_START_MZG_TIRE. Fz used in the
! calculation can be adjusted with FZ_SCALE_MZG_TIRE and FZ_START_MZG_TIRE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

MZG_TIRE_CONSTANT(1,1) 0 ; N-m ! [D] Constant Mz component due to Gamma, axle 1,
                         ! left side
MZG_TIRE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
MZG_TIRE_FZ_COEFFICIENT(1,1) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                               ! (-/N), axle 1, left side
FZ_START_MZG_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

MZG_TIRE_CONSTANT(1,2) 0 ; N-m ! [D] Constant Mz component due to Gamma, axle 1,
                         ! right side
MZG_TIRE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
MZG_TIRE_FZ_COEFFICIENT(1,2) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                               ! (-/N), axle 1, right side
FZ_START_MZG_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

MZG_TIRE_CONSTANT(2,1) 0 ; N-m ! [D] Constant Mz component due to Gamma, axle 2,
                         ! left side
MZG_TIRE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
MZG_TIRE_FZ_COEFFICIENT(2,1) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                               ! (-/N), axle 2, left side
FZ_START_MZG_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

MZG_TIRE_CONSTANT(2,2) 0 ; N-m ! [D] Constant Mz component due to Gamma, axle 2,
                         ! right side
MZG_TIRE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Mz
MZG_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
MZG_TIRE_FZ_COEFFICIENT(2,2) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                               ! (-/N), axle 2, right side
FZ_START_MZG_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZG_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZG_TIRE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

MZ_AERO_SHAPING_CONSTANT 0 ; - ! [D] Constant CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO.

MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! [D] Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! [D] Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

MZ_PARKING_STEER_CONSTANT(2,1) 0 ; N-m ! [D] Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 2, left
                                 ! side
MZ_PARKING_STEER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 2, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(2,2) 0 ; N-m ! [D] Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 2, right
                                 ! side
MZ_PARKING_STEER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 2, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! [D] 1D table: col 1 = Alpha (deg), col 2 = Mz (N-m)
MZ_TIRE_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -12, 0.003
 -4, -0.006
 -2, -0.02
 -1, -0.03
 -0.5, -0.02
 0, 0
 0.5, 0.02
 1, 0.03
 2, 0.02
 4, 0.006
 12, -0.003
ENDTABLE
MZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
MZ_TIRE_FZ_COEFFICIENT(1,1) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                              ! (-/N), axle 1, left side
FZ_START_MZ_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! [D] 1D table: col 1 = Alpha (deg), col 2 = Mz (N-m)
MZ_TIRE_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -12, 0.003
 -4, -0.006
 -2, -0.02
 -1, -0.03
 -0.5, -0.02
 0, 0
 0.5, 0.02
 1, 0.03
 2, 0.02
 4, 0.006
 12, -0.003
ENDTABLE
MZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
MZ_TIRE_FZ_COEFFICIENT(1,2) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                              ! (-/N), axle 1, right side
FZ_START_MZ_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! [D] 1D table: col 1 = Alpha (deg), col 2 = Mz (N-m)
MZ_TIRE_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -12, 0.003
 -4, -0.006
 -2, -0.02
 -1, -0.03
 -0.5, -0.02
 0, 0
 0.5, 0.02
 1, 0.03
 2, 0.02
 4, 0.006
 12, -0.003
ENDTABLE
MZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
MZ_TIRE_FZ_COEFFICIENT(2,1) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                              ! (-/N), axle 2, left side
FZ_START_MZ_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! [D] 1D table: col 1 = Alpha (deg), col 2 = Mz (N-m)
MZ_TIRE_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -12, 0.003
 -4, -0.006
 -2, -0.02
 -1, -0.03
 -0.5, -0.02
 0, 0
 0.5, 0.02
 1, 0.03
 2, 0.02
 4, 0.006
 12, -0.003
ENDTABLE
MZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
MZ_TIRE_FZ_COEFFICIENT(2,2) 1 ! [D] Coefficient: Mz scaling due to Fz per unit Fz
                              ! (-/N), axle 2, right side
FZ_START_MZ_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_BOOST_G: Boost torque applied to steering gear. Boost torque can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_BOOST_G_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost torque from the calculation can be adjusted with M_BOOST_G_GAIN
! and M_BOOST_G_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_M_BOOST and M_TB_START_M_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_M_BOOST and VX_TB_START_M_BOOST.

M_BOOST_G_CONSTANT  0 ; N-m ! [D] Constant boost torque component due to torsion bar
                      ! torque
M_BOOST_G_GAIN      1 ! Gain multiplied with calculated value to get boost torque
M_BOOST_G_OFFSET    0 ; N-m ! Offset added (after gain) to get boost torque
M_BOOST_G_COMBINE MULTIPLY ! How to combine the two components
M_BOOST_G_V_CONSTANT 1 ; - ! [D] Constant boost torque component due to speed

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 3 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(1) 0 ; N-m ! [D] Constant this torque difference, front
                          ! differential
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! [D] Constant this torque difference, rear
                          ! differential
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(3) 0 ; N-m ! [D] Constant this torque difference, transfer case
M_DIFF_VISC_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_STR_IN: Open loop steering input torque. Steering wheel input torque is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Steering wheel input torque from the
! calculation can be adjusted with M_STR_IN_GAIN and M_STR_IN_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_STEER_TQ and TSTART_STEER_TQ.

M_STR_IN_CONSTANT   0 ; N-m ! [D] Constant steering wheel input torque
M_STR_IN_OFFSET     0 ; N-m ! Offset added (after gain) to get steering wheel input
                      ! torque

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_CONSTANT       0 ; N-m ! [D] Constant torque at steering wheel component due to
                      ! total steering torque about kingpin axes of both front
                      ! wheels
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! [D] Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET.

M_TBAR_COEFFICIENT  2 ! [D] Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN         1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET       0 ; N-m ! Offset added (after gain) to get torsion bar torque

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TWIN: Torque difference for twin clutch. Torque difference is a function of
! speed difference (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Torque difference from the calculation can be
! adjusted with M_TWIN_GAIN and M_TWIN_OFFSET. Speed difference used in the
! calculation can be adjusted with DSPIN_SCALE_M_TWIN and DSPIN_START_M_TWIN. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IDIFF and ISIDE are used to identify
! the dataset when reading data.

! [D] 1D table: col 1 = speed difference (rpm), col 2 = torque difference (N-m)
M_TWIN_TABLE(1,1) LINEAR_FLAT ! front diff., left side
 0, 600
 1, 0
ENDTABLE
M_TWIN_GAIN(1,1)    1 ! Gain multiplied with calculated value to get torque
                      ! difference
M_TWIN_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get torque difference
DSPIN_START_M_TWIN(1,1) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_TWIN(1,1) 1 ! Scale factor divided into (speed difference -
                          ! DSPIN_START_M_TWIN)

! [D] 1D table: col 1 = speed difference (rpm), col 2 = torque difference (N-m)
M_TWIN_TABLE(1,2) LINEAR_FLAT ! front diff., right side
 0, 600
 1, 0
ENDTABLE
M_TWIN_GAIN(1,2)    1 ! Gain multiplied with calculated value to get torque
                      ! difference
M_TWIN_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get torque difference
DSPIN_START_M_TWIN(1,2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_TWIN(1,2) 1 ! Scale factor divided into (speed difference -
                          ! DSPIN_START_M_TWIN)

! [D] 1D table: col 1 = speed difference (rpm), col 2 = torque difference (N-m)
M_TWIN_TABLE(2,1) LINEAR_FLAT ! rear diff., left side
 0, 600
 1, 0
ENDTABLE
M_TWIN_GAIN(2,1)    1 ! Gain multiplied with calculated value to get torque
                      ! difference
M_TWIN_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get torque difference
DSPIN_START_M_TWIN(2,1) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_TWIN(2,1) 1 ! Scale factor divided into (speed difference -
                          ! DSPIN_START_M_TWIN)

! [D] 1D table: col 1 = speed difference (rpm), col 2 = torque difference (N-m)
M_TWIN_TABLE(2,2) LINEAR_FLAT ! rear diff., right side
 0, 600
 1, 0
ENDTABLE
M_TWIN_GAIN(2,2)    1 ! Gain multiplied with calculated value to get torque
                      ! difference
M_TWIN_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get torque difference
DSPIN_START_M_TWIN(2,2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_TWIN(2,2) 1 ! Scale factor divided into (speed difference -
                          ! DSPIN_START_M_TWIN)

! PBK_CALIPER: Brake caliper pressure. Pressure is a function of volume (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Pressure from the calculation can be adjusted with PBK_CALIPER_GAIN and
! PBK_CALIPER_OFFSET. Volume used in the calculation can be adjusted with
! VOL_SCALE_PBK_CALIPER and VOL_START_PBK_CALIPER. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

PBK_CALIPER_COEFFICIENT(1,1) 3 ! [D] Coefficient: pressure per unit volume
                               ! (MPa/mm3), axle 1, left side
PBK_CALIPER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get pressure
PBK_CALIPER_OFFSET(1,1) 0 ; MPa ! Offset added (after gain) to get pressure
VOL_START_PBK_CALIPER(1,1) 0 ; mm3 ! Offset subtracted from volume
VOL_SCALE_PBK_CALIPER(1,1) 1 ! Scale factor divided into (volume -
                             ! VOL_START_PBK_CALIPER)

PBK_CALIPER_COEFFICIENT(1,2) 3 ! [D] Coefficient: pressure per unit volume
                               ! (MPa/mm3), axle 1, right side
PBK_CALIPER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get pressure
PBK_CALIPER_OFFSET(1,2) 0 ; MPa ! Offset added (after gain) to get pressure
VOL_START_PBK_CALIPER(1,2) 0 ; mm3 ! Offset subtracted from volume
VOL_SCALE_PBK_CALIPER(1,2) 1 ! Scale factor divided into (volume -
                             ! VOL_START_PBK_CALIPER)

PBK_CALIPER_COEFFICIENT(2,1) 3 ! [D] Coefficient: pressure per unit volume
                               ! (MPa/mm3), axle 2, left side
PBK_CALIPER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get pressure
PBK_CALIPER_OFFSET(2,1) 0 ; MPa ! Offset added (after gain) to get pressure
VOL_START_PBK_CALIPER(2,1) 0 ; mm3 ! Offset subtracted from volume
VOL_SCALE_PBK_CALIPER(2,1) 1 ! Scale factor divided into (volume -
                             ! VOL_START_PBK_CALIPER)

PBK_CALIPER_COEFFICIENT(2,2) 3 ! [D] Coefficient: pressure per unit volume
                               ! (MPa/mm3), axle 2, right side
PBK_CALIPER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get pressure
PBK_CALIPER_OFFSET(2,2) 0 ; MPa ! Offset added (after gain) to get pressure
VOL_START_PBK_CALIPER(2,2) 0 ; mm3 ! Offset subtracted from volume
VOL_SCALE_PBK_CALIPER(2,2) 1 ! Scale factor divided into (volume -
                             ! VOL_START_PBK_CALIPER)

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! [D] Coefficient: delivery pressure per unit master
                          ! cylinder pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant delivery pressure component due to
                          ! dynamic wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! [D] Coefficient: delivery pressure per unit master
                          ! cylinder pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant delivery pressure component due to
                          ! dynamic wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 1 ! [D] Coefficient: delivery pressure per unit master
                          ! cylinder pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! [D] Constant delivery pressure component due to
                          ! dynamic wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 1 ! [D] Coefficient: delivery pressure per unit master
                          ! cylinder pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! [D] Constant delivery pressure component due to
                          ! dynamic wheel load, axle 2, right side

! PWR_ENGINE_AV: Engine full load power. Engine full load power is a function of
! engine speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Engine full load power from the calculation can be
! adjusted with PWR_ENGINE_AV_GAIN and PWR_ENGINE_AV_OFFSET. Engine speed used in the
! calculation can be adjusted with SPIN_SCALE_PW_ENGINE and SPIN_START_PW_ENGINE.

PWR_ENGINE_AV_CONSTANT 0 ; kW ! [D] Constant engine full load power
PWR_ENGINE_AV_OFFSET 0 ; kW ! Offset added (after gain) to get engine full load
                       ! power

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

RACK_KIN_COEFFICIENT(1,1) 0.6 ! [D] Coefficient: road wheel steer per unit rack
                              ! displacement (deg/mm), axle 1, left side
RACK_KIN_GAIN(1,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

RACK_KIN_COEFFICIENT(1,2) 0.6 ! [D] Coefficient: road wheel steer per unit rack
                              ! displacement (deg/mm), axle 1, right side
RACK_KIN_GAIN(1,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

RACK_KIN_COEFFICIENT(2,1) 0.6 ! [D] Coefficient: road wheel steer per unit rack
                              ! displacement (deg/mm), axle 2, left side
RACK_KIN_GAIN(2,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

RACK_KIN_COEFFICIENT(2,2) 0.6 ! [D] Coefficient: road wheel steer per unit rack
                              ! displacement (deg/mm), axle 2, right side
RACK_KIN_GAIN(2,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1) 0.1 ! [D] Coefficient: rack displacement per unit pinion
                               ! angle (mm/deg), axle 1
RACK_TRAVEL_GAIN(1) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get rack displacement

RACK_TRAVEL_COEFFICIENT(2) 0.1 ! [D] Coefficient: rack displacement per unit pinion
                               ! angle (mm/deg), axle 2
RACK_TRAVEL_GAIN(2) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get rack displacement

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC.

! [D] 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 2.5
 1, 1
ENDTABLE
RM_TC_GAIN          1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET        0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC   0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC   1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 100 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)       1  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(1) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(1) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(1) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(2)       2  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(2) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(2)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(2)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(2) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(2) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(3)       3  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(3) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(3)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(3)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(3) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(3) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(4)       4  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(4) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(4)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(4)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(4) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(4) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(5)       5  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(5) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(5)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(5)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(5) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(5) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(6)       6  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(6) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(6)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(6)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(6) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(6) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(7)       7  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(7) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(7)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(7)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(7) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(7) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(8)       8  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(8) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(8)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(8)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(8) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(8) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(9)       9  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(9) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(9)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(9)   0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(9) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(9) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(10)     10  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(10) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(10)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(10)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(10) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(10) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(11)     11  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(11) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(11)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(11)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(11) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(11) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(12)     12  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(12) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(12)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(12)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(12) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(12) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(13)     13  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(13) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(13)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(13)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(13) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(13) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(14)     14  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(14) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(14)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(14)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(14) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(14) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(15)     15  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(15) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(15)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(15)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(15) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(15) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(16)     16  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(16) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(16)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(16)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(16) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(16) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(17)     17  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(17) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(17)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(17)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(17) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(17) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(18)     18  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(18) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(18)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(18)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(18) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(18) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(19)     19  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(19) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(19)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(19)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(19) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(19) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(20)     20  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(20) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(20)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(20)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(20) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(20) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(21)     21  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(21) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(21)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(21)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(21) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(21) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(22)     22  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(22) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(22)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(22)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(22) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(22) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(23)     23  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(23) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(23)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(23)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(23) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(23) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(24)     24  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(24) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(24)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(24)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(24) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(24) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(25)     25  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(25) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(25)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(25)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(25) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(25) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(26)     26  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(26) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(26)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(26)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(26) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(26) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(27)     27  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(27) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(27)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(27)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(27) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(27) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(28)     28  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(28) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(28)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(28)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(28) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(28) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(29)     29  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(29) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(29)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(29)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(29) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(29) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(30)     30  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(30) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(30)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(30)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(30) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(30) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(31)     31  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(31) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(31)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(31)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(31) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(31) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(32)     32  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(32) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(32)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(32)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(32) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(32) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(33)     33  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(33) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(33)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(33)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(33) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(33) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(34)     34  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(34) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(34)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(34)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(34) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(34) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(35)     35  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(35) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(35)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(35)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(35) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(35) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(36)     36  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(36) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(36)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(36)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(36) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(36) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(37)     37  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(37) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(37)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(37)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(37) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(37) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(38)     38  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(38) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(38)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(38)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(38) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(38) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(39)     39  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(39) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(39)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(39)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(39) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(39) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(40)     40  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(40) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(40)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(40)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(40) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(40) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(41)     41  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(41) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(41)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(41)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(41) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(41) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(42)     42  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(42) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(42)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(42)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(42) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(42) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(43)     43  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(43) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(43)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(43)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(43) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(43) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(44)     44  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(44) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(44)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(44)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(44) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(44) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(45)     45  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(45) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(45)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(45)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(45) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(45) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(46)     46  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(46) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(46)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(46)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(46) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(46) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(47)     47  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(47) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(47)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(47)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(47) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(47) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(48)     48  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(48) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(48)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(48)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(48) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(48) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(49)     49  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(49) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(49)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(49)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(49) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(49) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(50)     50  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(50) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(50)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(50)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(50) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(50) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(51)     51  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(51) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(51)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(51)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(51) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(51) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(52)     52  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(52) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(52)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(52)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(52) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(52) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(53)     53  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(53) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(53)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(53)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(53) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(53) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(54)     54  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(54) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(54)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(54)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(54) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(54) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(55)     55  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(55) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(55)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(55)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(55) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(55) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(56)     56  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(56) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(56)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(56)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(56) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(56) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(57)     57  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(57) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(57)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(57)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(57) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(57) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(58)     58  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(58) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(58)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(58)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(58) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(58) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(59)     59  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(59) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(59)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(59)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(59) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(59) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(60)     60  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(60) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(60)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(60)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(60) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(60) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(61)     61  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(61) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(61)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(61)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(61) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(61) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(62)     62  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(62) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(62)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(62)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(62) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(62) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(63)     63  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(63) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(63)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(63)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(63) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(63) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(64)     64  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(64) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(64)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(64)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(64) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(64) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(65)     65  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(65) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(65)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(65)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(65) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(65) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(66)     66  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(66) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(66)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(66)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(66) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(66) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(67)     67  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(67) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(67)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(67)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(67) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(67) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(68)     68  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(68) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(68)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(68)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(68) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(68) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(69)     69  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(69) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(69)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(69)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(69) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(69) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(70)     70  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(70) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(70)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(70)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(70) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(70) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(71)     71  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(71) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(71)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(71)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(71) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(71) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(72)     72  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(72) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(72)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(72)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(72) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(72) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(73)     73  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(73) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(73)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(73)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(73) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(73) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(74)     74  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(74) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(74)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(74)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(74) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(74) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(75)     75  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(75) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(75)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(75)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(75) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(75) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(76)     76  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(76) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(76)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(76)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(76) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(76) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(77)     77  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(77) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(77)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(77)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(77) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(77) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(78)     78  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(78) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(78)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(78)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(78) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(78) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(79)     79  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(79) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(79)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(79)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(79) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(79) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(80)     80  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(80) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(80)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(80)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(80) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(80) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(81)     81  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(81) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(81)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(81)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(81) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(81) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(82)     82  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(82) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(82)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(82)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(82) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(82) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(83)     83  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(83) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(83)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(83)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(83) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(83) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(84)     84  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(84) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(84)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(84)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(84) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(84) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(85)     85  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(85) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(85)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(85)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(85) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(85) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(86)     86  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(86) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(86)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(86)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(86) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(86) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(87)     87  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(87) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(87)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(87)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(87) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(87) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(88)     88  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(88) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(88)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(88)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(88) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(88) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(89)     89  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(89) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(89)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(89)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(89) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(89) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(90)     90  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(90) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(90)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(90)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(90) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(90) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(91)     91  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(91) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(91)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(91)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(91) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(91) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(92)     92  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(92) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(92)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(92)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(92) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(92) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(93)     93  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(93) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(93)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(93)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(93) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(93) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(94)     94  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(94) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(94)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(94)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(94) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(94) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(95)     95  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(95) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(95)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(95)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(95) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(95) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(96)     96  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(96) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(96)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(96)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(96) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(96) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(97)     97  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(97) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(97)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(97)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(97) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(97) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(98)     98  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(98) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(98)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(98)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(98) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(98) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(99)     99  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(99) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(99)    1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(99)  0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(99) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(99) 1 ; - ! [D] Constant dZ component due to lateral position

ROAD_DZ_ID(100)   100  ! User-defined ID number for this dataset
ROAD_DZ_CONSTANT(100) 0 ; m ! [D] Constant dZ component due to station
ROAD_DZ_GAIN(100)   1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(100) 0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(100) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(100) 1 ; - ! [D] Constant dZ component due to lateral position

! ROAD_L_BOUNDARY: Road left/right boundary limit L. L is a function of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. L from the calculation can be adjusted with ROAD_L_BOUNDARY_GAIN and
! ROAD_L_BOUNDARY_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_ROAD_L_BOUNDARY and SSTART_ROAD_L_BOUNDARY. This configurable function
! supports 200 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IROAD and ISIDE are used to identify the dataset when
! reading data.

ROAD_L_BOUNDARY_CONSTANT(1,1) 0 ; m ! [D] Constant L, Road 1, left side boundary
ROAD_L_BOUNDARY_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(1,2) 0 ; m ! [D] Constant L, Road 1, right side boundary
ROAD_L_BOUNDARY_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(2,1) 0 ; m ! [D] Constant L, Road 2, left side boundary
ROAD_L_BOUNDARY_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(2,2) 0 ; m ! [D] Constant L, Road 2, right side boundary
ROAD_L_BOUNDARY_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(3,1) 0 ; m ! [D] Constant L, Road 3, left side boundary
ROAD_L_BOUNDARY_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(3,2) 0 ; m ! [D] Constant L, Road 3, right side boundary
ROAD_L_BOUNDARY_OFFSET(3,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(4,1) 0 ; m ! [D] Constant L, Road 4, left side boundary
ROAD_L_BOUNDARY_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(4,2) 0 ; m ! [D] Constant L, Road 4, right side boundary
ROAD_L_BOUNDARY_OFFSET(4,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(5,1) 0 ; m ! [D] Constant L, Road 5, left side boundary
ROAD_L_BOUNDARY_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(5,2) 0 ; m ! [D] Constant L, Road 5, right side boundary
ROAD_L_BOUNDARY_OFFSET(5,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(6,1) 0 ; m ! [D] Constant L, Road 6, left side boundary
ROAD_L_BOUNDARY_OFFSET(6,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(6,2) 0 ; m ! [D] Constant L, Road 6, right side boundary
ROAD_L_BOUNDARY_OFFSET(6,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(7,1) 0 ; m ! [D] Constant L, Road 7, left side boundary
ROAD_L_BOUNDARY_OFFSET(7,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(7,2) 0 ; m ! [D] Constant L, Road 7, right side boundary
ROAD_L_BOUNDARY_OFFSET(7,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(8,1) 0 ; m ! [D] Constant L, Road 8, left side boundary
ROAD_L_BOUNDARY_OFFSET(8,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(8,2) 0 ; m ! [D] Constant L, Road 8, right side boundary
ROAD_L_BOUNDARY_OFFSET(8,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(9,1) 0 ; m ! [D] Constant L, Road 9, left side boundary
ROAD_L_BOUNDARY_OFFSET(9,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(9,2) 0 ; m ! [D] Constant L, Road 9, right side boundary
ROAD_L_BOUNDARY_OFFSET(9,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(10,1) 0 ; m ! [D] Constant L, Road 10, left side boundary
ROAD_L_BOUNDARY_OFFSET(10,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(10,2) 0 ; m ! [D] Constant L, Road 10, right side boundary
ROAD_L_BOUNDARY_OFFSET(10,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(11,1) 0 ; m ! [D] Constant L, Road 11, left side boundary
ROAD_L_BOUNDARY_OFFSET(11,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(11,2) 0 ; m ! [D] Constant L, Road 11, right side boundary
ROAD_L_BOUNDARY_OFFSET(11,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(12,1) 0 ; m ! [D] Constant L, Road 12, left side boundary
ROAD_L_BOUNDARY_OFFSET(12,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(12,2) 0 ; m ! [D] Constant L, Road 12, right side boundary
ROAD_L_BOUNDARY_OFFSET(12,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(13,1) 0 ; m ! [D] Constant L, Road 13, left side boundary
ROAD_L_BOUNDARY_OFFSET(13,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(13,2) 0 ; m ! [D] Constant L, Road 13, right side boundary
ROAD_L_BOUNDARY_OFFSET(13,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(14,1) 0 ; m ! [D] Constant L, Road 14, left side boundary
ROAD_L_BOUNDARY_OFFSET(14,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(14,2) 0 ; m ! [D] Constant L, Road 14, right side boundary
ROAD_L_BOUNDARY_OFFSET(14,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(15,1) 0 ; m ! [D] Constant L, Road 15, left side boundary
ROAD_L_BOUNDARY_OFFSET(15,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(15,2) 0 ; m ! [D] Constant L, Road 15, right side boundary
ROAD_L_BOUNDARY_OFFSET(15,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(16,1) 0 ; m ! [D] Constant L, Road 16, left side boundary
ROAD_L_BOUNDARY_OFFSET(16,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(16,2) 0 ; m ! [D] Constant L, Road 16, right side boundary
ROAD_L_BOUNDARY_OFFSET(16,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(17,1) 0 ; m ! [D] Constant L, Road 17, left side boundary
ROAD_L_BOUNDARY_OFFSET(17,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(17,2) 0 ; m ! [D] Constant L, Road 17, right side boundary
ROAD_L_BOUNDARY_OFFSET(17,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(18,1) 0 ; m ! [D] Constant L, Road 18, left side boundary
ROAD_L_BOUNDARY_OFFSET(18,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(18,2) 0 ; m ! [D] Constant L, Road 18, right side boundary
ROAD_L_BOUNDARY_OFFSET(18,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(19,1) 0 ; m ! [D] Constant L, Road 19, left side boundary
ROAD_L_BOUNDARY_OFFSET(19,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(19,2) 0 ; m ! [D] Constant L, Road 19, right side boundary
ROAD_L_BOUNDARY_OFFSET(19,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(20,1) 0 ; m ! [D] Constant L, Road 20, left side boundary
ROAD_L_BOUNDARY_OFFSET(20,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(20,2) 0 ; m ! [D] Constant L, Road 20, right side boundary
ROAD_L_BOUNDARY_OFFSET(20,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(21,1) 0 ; m ! [D] Constant L, Road 21, left side boundary
ROAD_L_BOUNDARY_OFFSET(21,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(21,2) 0 ; m ! [D] Constant L, Road 21, right side boundary
ROAD_L_BOUNDARY_OFFSET(21,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(22,1) 0 ; m ! [D] Constant L, Road 22, left side boundary
ROAD_L_BOUNDARY_OFFSET(22,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(22,2) 0 ; m ! [D] Constant L, Road 22, right side boundary
ROAD_L_BOUNDARY_OFFSET(22,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(23,1) 0 ; m ! [D] Constant L, Road 23, left side boundary
ROAD_L_BOUNDARY_OFFSET(23,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(23,2) 0 ; m ! [D] Constant L, Road 23, right side boundary
ROAD_L_BOUNDARY_OFFSET(23,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(24,1) 0 ; m ! [D] Constant L, Road 24, left side boundary
ROAD_L_BOUNDARY_OFFSET(24,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(24,2) 0 ; m ! [D] Constant L, Road 24, right side boundary
ROAD_L_BOUNDARY_OFFSET(24,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(25,1) 0 ; m ! [D] Constant L, Road 25, left side boundary
ROAD_L_BOUNDARY_OFFSET(25,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(25,2) 0 ; m ! [D] Constant L, Road 25, right side boundary
ROAD_L_BOUNDARY_OFFSET(25,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(26,1) 0 ; m ! [D] Constant L, Road 26, left side boundary
ROAD_L_BOUNDARY_OFFSET(26,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(26,2) 0 ; m ! [D] Constant L, Road 26, right side boundary
ROAD_L_BOUNDARY_OFFSET(26,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(27,1) 0 ; m ! [D] Constant L, Road 27, left side boundary
ROAD_L_BOUNDARY_OFFSET(27,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(27,2) 0 ; m ! [D] Constant L, Road 27, right side boundary
ROAD_L_BOUNDARY_OFFSET(27,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(28,1) 0 ; m ! [D] Constant L, Road 28, left side boundary
ROAD_L_BOUNDARY_OFFSET(28,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(28,2) 0 ; m ! [D] Constant L, Road 28, right side boundary
ROAD_L_BOUNDARY_OFFSET(28,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(29,1) 0 ; m ! [D] Constant L, Road 29, left side boundary
ROAD_L_BOUNDARY_OFFSET(29,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(29,2) 0 ; m ! [D] Constant L, Road 29, right side boundary
ROAD_L_BOUNDARY_OFFSET(29,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(30,1) 0 ; m ! [D] Constant L, Road 30, left side boundary
ROAD_L_BOUNDARY_OFFSET(30,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(30,2) 0 ; m ! [D] Constant L, Road 30, right side boundary
ROAD_L_BOUNDARY_OFFSET(30,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(31,1) 0 ; m ! [D] Constant L, Road 31, left side boundary
ROAD_L_BOUNDARY_OFFSET(31,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(31,2) 0 ; m ! [D] Constant L, Road 31, right side boundary
ROAD_L_BOUNDARY_OFFSET(31,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(32,1) 0 ; m ! [D] Constant L, Road 32, left side boundary
ROAD_L_BOUNDARY_OFFSET(32,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(32,2) 0 ; m ! [D] Constant L, Road 32, right side boundary
ROAD_L_BOUNDARY_OFFSET(32,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(33,1) 0 ; m ! [D] Constant L, Road 33, left side boundary
ROAD_L_BOUNDARY_OFFSET(33,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(33,2) 0 ; m ! [D] Constant L, Road 33, right side boundary
ROAD_L_BOUNDARY_OFFSET(33,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(34,1) 0 ; m ! [D] Constant L, Road 34, left side boundary
ROAD_L_BOUNDARY_OFFSET(34,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(34,2) 0 ; m ! [D] Constant L, Road 34, right side boundary
ROAD_L_BOUNDARY_OFFSET(34,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(35,1) 0 ; m ! [D] Constant L, Road 35, left side boundary
ROAD_L_BOUNDARY_OFFSET(35,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(35,2) 0 ; m ! [D] Constant L, Road 35, right side boundary
ROAD_L_BOUNDARY_OFFSET(35,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(36,1) 0 ; m ! [D] Constant L, Road 36, left side boundary
ROAD_L_BOUNDARY_OFFSET(36,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(36,2) 0 ; m ! [D] Constant L, Road 36, right side boundary
ROAD_L_BOUNDARY_OFFSET(36,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(37,1) 0 ; m ! [D] Constant L, Road 37, left side boundary
ROAD_L_BOUNDARY_OFFSET(37,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(37,2) 0 ; m ! [D] Constant L, Road 37, right side boundary
ROAD_L_BOUNDARY_OFFSET(37,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(38,1) 0 ; m ! [D] Constant L, Road 38, left side boundary
ROAD_L_BOUNDARY_OFFSET(38,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(38,2) 0 ; m ! [D] Constant L, Road 38, right side boundary
ROAD_L_BOUNDARY_OFFSET(38,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(39,1) 0 ; m ! [D] Constant L, Road 39, left side boundary
ROAD_L_BOUNDARY_OFFSET(39,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(39,2) 0 ; m ! [D] Constant L, Road 39, right side boundary
ROAD_L_BOUNDARY_OFFSET(39,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(40,1) 0 ; m ! [D] Constant L, Road 40, left side boundary
ROAD_L_BOUNDARY_OFFSET(40,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(40,2) 0 ; m ! [D] Constant L, Road 40, right side boundary
ROAD_L_BOUNDARY_OFFSET(40,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(41,1) 0 ; m ! [D] Constant L, Road 41, left side boundary
ROAD_L_BOUNDARY_OFFSET(41,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(41,2) 0 ; m ! [D] Constant L, Road 41, right side boundary
ROAD_L_BOUNDARY_OFFSET(41,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(42,1) 0 ; m ! [D] Constant L, Road 42, left side boundary
ROAD_L_BOUNDARY_OFFSET(42,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(42,2) 0 ; m ! [D] Constant L, Road 42, right side boundary
ROAD_L_BOUNDARY_OFFSET(42,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(43,1) 0 ; m ! [D] Constant L, Road 43, left side boundary
ROAD_L_BOUNDARY_OFFSET(43,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(43,2) 0 ; m ! [D] Constant L, Road 43, right side boundary
ROAD_L_BOUNDARY_OFFSET(43,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(44,1) 0 ; m ! [D] Constant L, Road 44, left side boundary
ROAD_L_BOUNDARY_OFFSET(44,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(44,2) 0 ; m ! [D] Constant L, Road 44, right side boundary
ROAD_L_BOUNDARY_OFFSET(44,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(45,1) 0 ; m ! [D] Constant L, Road 45, left side boundary
ROAD_L_BOUNDARY_OFFSET(45,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(45,2) 0 ; m ! [D] Constant L, Road 45, right side boundary
ROAD_L_BOUNDARY_OFFSET(45,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(46,1) 0 ; m ! [D] Constant L, Road 46, left side boundary
ROAD_L_BOUNDARY_OFFSET(46,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(46,2) 0 ; m ! [D] Constant L, Road 46, right side boundary
ROAD_L_BOUNDARY_OFFSET(46,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(47,1) 0 ; m ! [D] Constant L, Road 47, left side boundary
ROAD_L_BOUNDARY_OFFSET(47,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(47,2) 0 ; m ! [D] Constant L, Road 47, right side boundary
ROAD_L_BOUNDARY_OFFSET(47,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(48,1) 0 ; m ! [D] Constant L, Road 48, left side boundary
ROAD_L_BOUNDARY_OFFSET(48,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(48,2) 0 ; m ! [D] Constant L, Road 48, right side boundary
ROAD_L_BOUNDARY_OFFSET(48,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(49,1) 0 ; m ! [D] Constant L, Road 49, left side boundary
ROAD_L_BOUNDARY_OFFSET(49,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(49,2) 0 ; m ! [D] Constant L, Road 49, right side boundary
ROAD_L_BOUNDARY_OFFSET(49,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(50,1) 0 ; m ! [D] Constant L, Road 50, left side boundary
ROAD_L_BOUNDARY_OFFSET(50,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(50,2) 0 ; m ! [D] Constant L, Road 50, right side boundary
ROAD_L_BOUNDARY_OFFSET(50,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(51,1) 0 ; m ! [D] Constant L, Road 51, left side boundary
ROAD_L_BOUNDARY_OFFSET(51,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(51,2) 0 ; m ! [D] Constant L, Road 51, right side boundary
ROAD_L_BOUNDARY_OFFSET(51,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(52,1) 0 ; m ! [D] Constant L, Road 52, left side boundary
ROAD_L_BOUNDARY_OFFSET(52,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(52,2) 0 ; m ! [D] Constant L, Road 52, right side boundary
ROAD_L_BOUNDARY_OFFSET(52,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(53,1) 0 ; m ! [D] Constant L, Road 53, left side boundary
ROAD_L_BOUNDARY_OFFSET(53,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(53,2) 0 ; m ! [D] Constant L, Road 53, right side boundary
ROAD_L_BOUNDARY_OFFSET(53,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(54,1) 0 ; m ! [D] Constant L, Road 54, left side boundary
ROAD_L_BOUNDARY_OFFSET(54,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(54,2) 0 ; m ! [D] Constant L, Road 54, right side boundary
ROAD_L_BOUNDARY_OFFSET(54,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(55,1) 0 ; m ! [D] Constant L, Road 55, left side boundary
ROAD_L_BOUNDARY_OFFSET(55,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(55,2) 0 ; m ! [D] Constant L, Road 55, right side boundary
ROAD_L_BOUNDARY_OFFSET(55,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(56,1) 0 ; m ! [D] Constant L, Road 56, left side boundary
ROAD_L_BOUNDARY_OFFSET(56,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(56,2) 0 ; m ! [D] Constant L, Road 56, right side boundary
ROAD_L_BOUNDARY_OFFSET(56,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(57,1) 0 ; m ! [D] Constant L, Road 57, left side boundary
ROAD_L_BOUNDARY_OFFSET(57,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(57,2) 0 ; m ! [D] Constant L, Road 57, right side boundary
ROAD_L_BOUNDARY_OFFSET(57,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(58,1) 0 ; m ! [D] Constant L, Road 58, left side boundary
ROAD_L_BOUNDARY_OFFSET(58,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(58,2) 0 ; m ! [D] Constant L, Road 58, right side boundary
ROAD_L_BOUNDARY_OFFSET(58,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(59,1) 0 ; m ! [D] Constant L, Road 59, left side boundary
ROAD_L_BOUNDARY_OFFSET(59,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(59,2) 0 ; m ! [D] Constant L, Road 59, right side boundary
ROAD_L_BOUNDARY_OFFSET(59,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(60,1) 0 ; m ! [D] Constant L, Road 60, left side boundary
ROAD_L_BOUNDARY_OFFSET(60,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(60,2) 0 ; m ! [D] Constant L, Road 60, right side boundary
ROAD_L_BOUNDARY_OFFSET(60,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(61,1) 0 ; m ! [D] Constant L, Road 61, left side boundary
ROAD_L_BOUNDARY_OFFSET(61,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(61,2) 0 ; m ! [D] Constant L, Road 61, right side boundary
ROAD_L_BOUNDARY_OFFSET(61,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(62,1) 0 ; m ! [D] Constant L, Road 62, left side boundary
ROAD_L_BOUNDARY_OFFSET(62,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(62,2) 0 ; m ! [D] Constant L, Road 62, right side boundary
ROAD_L_BOUNDARY_OFFSET(62,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(63,1) 0 ; m ! [D] Constant L, Road 63, left side boundary
ROAD_L_BOUNDARY_OFFSET(63,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(63,2) 0 ; m ! [D] Constant L, Road 63, right side boundary
ROAD_L_BOUNDARY_OFFSET(63,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(64,1) 0 ; m ! [D] Constant L, Road 64, left side boundary
ROAD_L_BOUNDARY_OFFSET(64,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(64,2) 0 ; m ! [D] Constant L, Road 64, right side boundary
ROAD_L_BOUNDARY_OFFSET(64,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(65,1) 0 ; m ! [D] Constant L, Road 65, left side boundary
ROAD_L_BOUNDARY_OFFSET(65,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(65,2) 0 ; m ! [D] Constant L, Road 65, right side boundary
ROAD_L_BOUNDARY_OFFSET(65,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(66,1) 0 ; m ! [D] Constant L, Road 66, left side boundary
ROAD_L_BOUNDARY_OFFSET(66,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(66,2) 0 ; m ! [D] Constant L, Road 66, right side boundary
ROAD_L_BOUNDARY_OFFSET(66,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(67,1) 0 ; m ! [D] Constant L, Road 67, left side boundary
ROAD_L_BOUNDARY_OFFSET(67,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(67,2) 0 ; m ! [D] Constant L, Road 67, right side boundary
ROAD_L_BOUNDARY_OFFSET(67,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(68,1) 0 ; m ! [D] Constant L, Road 68, left side boundary
ROAD_L_BOUNDARY_OFFSET(68,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(68,2) 0 ; m ! [D] Constant L, Road 68, right side boundary
ROAD_L_BOUNDARY_OFFSET(68,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(69,1) 0 ; m ! [D] Constant L, Road 69, left side boundary
ROAD_L_BOUNDARY_OFFSET(69,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(69,2) 0 ; m ! [D] Constant L, Road 69, right side boundary
ROAD_L_BOUNDARY_OFFSET(69,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(70,1) 0 ; m ! [D] Constant L, Road 70, left side boundary
ROAD_L_BOUNDARY_OFFSET(70,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(70,2) 0 ; m ! [D] Constant L, Road 70, right side boundary
ROAD_L_BOUNDARY_OFFSET(70,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(71,1) 0 ; m ! [D] Constant L, Road 71, left side boundary
ROAD_L_BOUNDARY_OFFSET(71,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(71,2) 0 ; m ! [D] Constant L, Road 71, right side boundary
ROAD_L_BOUNDARY_OFFSET(71,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(72,1) 0 ; m ! [D] Constant L, Road 72, left side boundary
ROAD_L_BOUNDARY_OFFSET(72,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(72,2) 0 ; m ! [D] Constant L, Road 72, right side boundary
ROAD_L_BOUNDARY_OFFSET(72,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(73,1) 0 ; m ! [D] Constant L, Road 73, left side boundary
ROAD_L_BOUNDARY_OFFSET(73,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(73,2) 0 ; m ! [D] Constant L, Road 73, right side boundary
ROAD_L_BOUNDARY_OFFSET(73,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(74,1) 0 ; m ! [D] Constant L, Road 74, left side boundary
ROAD_L_BOUNDARY_OFFSET(74,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(74,2) 0 ; m ! [D] Constant L, Road 74, right side boundary
ROAD_L_BOUNDARY_OFFSET(74,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(75,1) 0 ; m ! [D] Constant L, Road 75, left side boundary
ROAD_L_BOUNDARY_OFFSET(75,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(75,2) 0 ; m ! [D] Constant L, Road 75, right side boundary
ROAD_L_BOUNDARY_OFFSET(75,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(76,1) 0 ; m ! [D] Constant L, Road 76, left side boundary
ROAD_L_BOUNDARY_OFFSET(76,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(76,2) 0 ; m ! [D] Constant L, Road 76, right side boundary
ROAD_L_BOUNDARY_OFFSET(76,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(77,1) 0 ; m ! [D] Constant L, Road 77, left side boundary
ROAD_L_BOUNDARY_OFFSET(77,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(77,2) 0 ; m ! [D] Constant L, Road 77, right side boundary
ROAD_L_BOUNDARY_OFFSET(77,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(78,1) 0 ; m ! [D] Constant L, Road 78, left side boundary
ROAD_L_BOUNDARY_OFFSET(78,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(78,2) 0 ; m ! [D] Constant L, Road 78, right side boundary
ROAD_L_BOUNDARY_OFFSET(78,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(79,1) 0 ; m ! [D] Constant L, Road 79, left side boundary
ROAD_L_BOUNDARY_OFFSET(79,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(79,2) 0 ; m ! [D] Constant L, Road 79, right side boundary
ROAD_L_BOUNDARY_OFFSET(79,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(80,1) 0 ; m ! [D] Constant L, Road 80, left side boundary
ROAD_L_BOUNDARY_OFFSET(80,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(80,2) 0 ; m ! [D] Constant L, Road 80, right side boundary
ROAD_L_BOUNDARY_OFFSET(80,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(81,1) 0 ; m ! [D] Constant L, Road 81, left side boundary
ROAD_L_BOUNDARY_OFFSET(81,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(81,2) 0 ; m ! [D] Constant L, Road 81, right side boundary
ROAD_L_BOUNDARY_OFFSET(81,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(82,1) 0 ; m ! [D] Constant L, Road 82, left side boundary
ROAD_L_BOUNDARY_OFFSET(82,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(82,2) 0 ; m ! [D] Constant L, Road 82, right side boundary
ROAD_L_BOUNDARY_OFFSET(82,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(83,1) 0 ; m ! [D] Constant L, Road 83, left side boundary
ROAD_L_BOUNDARY_OFFSET(83,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(83,2) 0 ; m ! [D] Constant L, Road 83, right side boundary
ROAD_L_BOUNDARY_OFFSET(83,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(84,1) 0 ; m ! [D] Constant L, Road 84, left side boundary
ROAD_L_BOUNDARY_OFFSET(84,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(84,2) 0 ; m ! [D] Constant L, Road 84, right side boundary
ROAD_L_BOUNDARY_OFFSET(84,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(85,1) 0 ; m ! [D] Constant L, Road 85, left side boundary
ROAD_L_BOUNDARY_OFFSET(85,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(85,2) 0 ; m ! [D] Constant L, Road 85, right side boundary
ROAD_L_BOUNDARY_OFFSET(85,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(86,1) 0 ; m ! [D] Constant L, Road 86, left side boundary
ROAD_L_BOUNDARY_OFFSET(86,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(86,2) 0 ; m ! [D] Constant L, Road 86, right side boundary
ROAD_L_BOUNDARY_OFFSET(86,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(87,1) 0 ; m ! [D] Constant L, Road 87, left side boundary
ROAD_L_BOUNDARY_OFFSET(87,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(87,2) 0 ; m ! [D] Constant L, Road 87, right side boundary
ROAD_L_BOUNDARY_OFFSET(87,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(88,1) 0 ; m ! [D] Constant L, Road 88, left side boundary
ROAD_L_BOUNDARY_OFFSET(88,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(88,2) 0 ; m ! [D] Constant L, Road 88, right side boundary
ROAD_L_BOUNDARY_OFFSET(88,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(89,1) 0 ; m ! [D] Constant L, Road 89, left side boundary
ROAD_L_BOUNDARY_OFFSET(89,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(89,2) 0 ; m ! [D] Constant L, Road 89, right side boundary
ROAD_L_BOUNDARY_OFFSET(89,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(90,1) 0 ; m ! [D] Constant L, Road 90, left side boundary
ROAD_L_BOUNDARY_OFFSET(90,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(90,2) 0 ; m ! [D] Constant L, Road 90, right side boundary
ROAD_L_BOUNDARY_OFFSET(90,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(91,1) 0 ; m ! [D] Constant L, Road 91, left side boundary
ROAD_L_BOUNDARY_OFFSET(91,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(91,2) 0 ; m ! [D] Constant L, Road 91, right side boundary
ROAD_L_BOUNDARY_OFFSET(91,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(92,1) 0 ; m ! [D] Constant L, Road 92, left side boundary
ROAD_L_BOUNDARY_OFFSET(92,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(92,2) 0 ; m ! [D] Constant L, Road 92, right side boundary
ROAD_L_BOUNDARY_OFFSET(92,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(93,1) 0 ; m ! [D] Constant L, Road 93, left side boundary
ROAD_L_BOUNDARY_OFFSET(93,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(93,2) 0 ; m ! [D] Constant L, Road 93, right side boundary
ROAD_L_BOUNDARY_OFFSET(93,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(94,1) 0 ; m ! [D] Constant L, Road 94, left side boundary
ROAD_L_BOUNDARY_OFFSET(94,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(94,2) 0 ; m ! [D] Constant L, Road 94, right side boundary
ROAD_L_BOUNDARY_OFFSET(94,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(95,1) 0 ; m ! [D] Constant L, Road 95, left side boundary
ROAD_L_BOUNDARY_OFFSET(95,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(95,2) 0 ; m ! [D] Constant L, Road 95, right side boundary
ROAD_L_BOUNDARY_OFFSET(95,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(96,1) 0 ; m ! [D] Constant L, Road 96, left side boundary
ROAD_L_BOUNDARY_OFFSET(96,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(96,2) 0 ; m ! [D] Constant L, Road 96, right side boundary
ROAD_L_BOUNDARY_OFFSET(96,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(97,1) 0 ; m ! [D] Constant L, Road 97, left side boundary
ROAD_L_BOUNDARY_OFFSET(97,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(97,2) 0 ; m ! [D] Constant L, Road 97, right side boundary
ROAD_L_BOUNDARY_OFFSET(97,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(98,1) 0 ; m ! [D] Constant L, Road 98, left side boundary
ROAD_L_BOUNDARY_OFFSET(98,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(98,2) 0 ; m ! [D] Constant L, Road 98, right side boundary
ROAD_L_BOUNDARY_OFFSET(98,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(99,1) 0 ; m ! [D] Constant L, Road 99, left side boundary
ROAD_L_BOUNDARY_OFFSET(99,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(99,2) 0 ; m ! [D] Constant L, Road 99, right side boundary
ROAD_L_BOUNDARY_OFFSET(99,2) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(100,1) 0 ; m ! [D] Constant L, Road 100, left side boundary
ROAD_L_BOUNDARY_OFFSET(100,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(100,2) 0 ; m ! [D] Constant L, Road 100, right side
                                  ! boundary
ROAD_L_BOUNDARY_OFFSET(100,2) 0 ; m ! Offset added (after gain) to get L

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 200 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(2,1) 0 ; - ! [D] Constant ID, Road 2, left side boundary
ROAD_NEW_ID_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(2,2) 0 ; - ! [D] Constant ID, Road 2, right side boundary
ROAD_NEW_ID_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(3,1) 0 ; - ! [D] Constant ID, Road 3, left side boundary
ROAD_NEW_ID_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(3,2) 0 ; - ! [D] Constant ID, Road 3, right side boundary
ROAD_NEW_ID_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(4,1) 0 ; - ! [D] Constant ID, Road 4, left side boundary
ROAD_NEW_ID_OFFSET(4,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(4,2) 0 ; - ! [D] Constant ID, Road 4, right side boundary
ROAD_NEW_ID_OFFSET(4,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(5,1) 0 ; - ! [D] Constant ID, Road 5, left side boundary
ROAD_NEW_ID_OFFSET(5,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(5,2) 0 ; - ! [D] Constant ID, Road 5, right side boundary
ROAD_NEW_ID_OFFSET(5,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(6,1) 0 ; - ! [D] Constant ID, Road 6, left side boundary
ROAD_NEW_ID_OFFSET(6,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(6,2) 0 ; - ! [D] Constant ID, Road 6, right side boundary
ROAD_NEW_ID_OFFSET(6,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(7,1) 0 ; - ! [D] Constant ID, Road 7, left side boundary
ROAD_NEW_ID_OFFSET(7,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(7,2) 0 ; - ! [D] Constant ID, Road 7, right side boundary
ROAD_NEW_ID_OFFSET(7,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(8,1) 0 ; - ! [D] Constant ID, Road 8, left side boundary
ROAD_NEW_ID_OFFSET(8,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(8,2) 0 ; - ! [D] Constant ID, Road 8, right side boundary
ROAD_NEW_ID_OFFSET(8,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(9,1) 0 ; - ! [D] Constant ID, Road 9, left side boundary
ROAD_NEW_ID_OFFSET(9,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(9,2) 0 ; - ! [D] Constant ID, Road 9, right side boundary
ROAD_NEW_ID_OFFSET(9,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(10,1) 0 ; - ! [D] Constant ID, Road 10, left side boundary
ROAD_NEW_ID_OFFSET(10,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(10,2) 0 ; - ! [D] Constant ID, Road 10, right side boundary
ROAD_NEW_ID_OFFSET(10,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(11,1) 0 ; - ! [D] Constant ID, Road 11, left side boundary
ROAD_NEW_ID_OFFSET(11,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(11,2) 0 ; - ! [D] Constant ID, Road 11, right side boundary
ROAD_NEW_ID_OFFSET(11,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(12,1) 0 ; - ! [D] Constant ID, Road 12, left side boundary
ROAD_NEW_ID_OFFSET(12,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(12,2) 0 ; - ! [D] Constant ID, Road 12, right side boundary
ROAD_NEW_ID_OFFSET(12,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(13,1) 0 ; - ! [D] Constant ID, Road 13, left side boundary
ROAD_NEW_ID_OFFSET(13,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(13,2) 0 ; - ! [D] Constant ID, Road 13, right side boundary
ROAD_NEW_ID_OFFSET(13,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(14,1) 0 ; - ! [D] Constant ID, Road 14, left side boundary
ROAD_NEW_ID_OFFSET(14,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(14,2) 0 ; - ! [D] Constant ID, Road 14, right side boundary
ROAD_NEW_ID_OFFSET(14,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(15,1) 0 ; - ! [D] Constant ID, Road 15, left side boundary
ROAD_NEW_ID_OFFSET(15,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(15,2) 0 ; - ! [D] Constant ID, Road 15, right side boundary
ROAD_NEW_ID_OFFSET(15,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(16,1) 0 ; - ! [D] Constant ID, Road 16, left side boundary
ROAD_NEW_ID_OFFSET(16,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(16,2) 0 ; - ! [D] Constant ID, Road 16, right side boundary
ROAD_NEW_ID_OFFSET(16,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(17,1) 0 ; - ! [D] Constant ID, Road 17, left side boundary
ROAD_NEW_ID_OFFSET(17,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(17,2) 0 ; - ! [D] Constant ID, Road 17, right side boundary
ROAD_NEW_ID_OFFSET(17,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(18,1) 0 ; - ! [D] Constant ID, Road 18, left side boundary
ROAD_NEW_ID_OFFSET(18,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(18,2) 0 ; - ! [D] Constant ID, Road 18, right side boundary
ROAD_NEW_ID_OFFSET(18,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(19,1) 0 ; - ! [D] Constant ID, Road 19, left side boundary
ROAD_NEW_ID_OFFSET(19,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(19,2) 0 ; - ! [D] Constant ID, Road 19, right side boundary
ROAD_NEW_ID_OFFSET(19,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(20,1) 0 ; - ! [D] Constant ID, Road 20, left side boundary
ROAD_NEW_ID_OFFSET(20,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(20,2) 0 ; - ! [D] Constant ID, Road 20, right side boundary
ROAD_NEW_ID_OFFSET(20,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(21,1) 0 ; - ! [D] Constant ID, Road 21, left side boundary
ROAD_NEW_ID_OFFSET(21,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(21,2) 0 ; - ! [D] Constant ID, Road 21, right side boundary
ROAD_NEW_ID_OFFSET(21,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(22,1) 0 ; - ! [D] Constant ID, Road 22, left side boundary
ROAD_NEW_ID_OFFSET(22,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(22,2) 0 ; - ! [D] Constant ID, Road 22, right side boundary
ROAD_NEW_ID_OFFSET(22,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(23,1) 0 ; - ! [D] Constant ID, Road 23, left side boundary
ROAD_NEW_ID_OFFSET(23,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(23,2) 0 ; - ! [D] Constant ID, Road 23, right side boundary
ROAD_NEW_ID_OFFSET(23,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(24,1) 0 ; - ! [D] Constant ID, Road 24, left side boundary
ROAD_NEW_ID_OFFSET(24,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(24,2) 0 ; - ! [D] Constant ID, Road 24, right side boundary
ROAD_NEW_ID_OFFSET(24,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(25,1) 0 ; - ! [D] Constant ID, Road 25, left side boundary
ROAD_NEW_ID_OFFSET(25,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(25,2) 0 ; - ! [D] Constant ID, Road 25, right side boundary
ROAD_NEW_ID_OFFSET(25,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(26,1) 0 ; - ! [D] Constant ID, Road 26, left side boundary
ROAD_NEW_ID_OFFSET(26,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(26,2) 0 ; - ! [D] Constant ID, Road 26, right side boundary
ROAD_NEW_ID_OFFSET(26,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(27,1) 0 ; - ! [D] Constant ID, Road 27, left side boundary
ROAD_NEW_ID_OFFSET(27,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(27,2) 0 ; - ! [D] Constant ID, Road 27, right side boundary
ROAD_NEW_ID_OFFSET(27,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(28,1) 0 ; - ! [D] Constant ID, Road 28, left side boundary
ROAD_NEW_ID_OFFSET(28,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(28,2) 0 ; - ! [D] Constant ID, Road 28, right side boundary
ROAD_NEW_ID_OFFSET(28,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(29,1) 0 ; - ! [D] Constant ID, Road 29, left side boundary
ROAD_NEW_ID_OFFSET(29,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(29,2) 0 ; - ! [D] Constant ID, Road 29, right side boundary
ROAD_NEW_ID_OFFSET(29,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(30,1) 0 ; - ! [D] Constant ID, Road 30, left side boundary
ROAD_NEW_ID_OFFSET(30,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(30,2) 0 ; - ! [D] Constant ID, Road 30, right side boundary
ROAD_NEW_ID_OFFSET(30,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(31,1) 0 ; - ! [D] Constant ID, Road 31, left side boundary
ROAD_NEW_ID_OFFSET(31,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(31,2) 0 ; - ! [D] Constant ID, Road 31, right side boundary
ROAD_NEW_ID_OFFSET(31,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(32,1) 0 ; - ! [D] Constant ID, Road 32, left side boundary
ROAD_NEW_ID_OFFSET(32,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(32,2) 0 ; - ! [D] Constant ID, Road 32, right side boundary
ROAD_NEW_ID_OFFSET(32,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(33,1) 0 ; - ! [D] Constant ID, Road 33, left side boundary
ROAD_NEW_ID_OFFSET(33,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(33,2) 0 ; - ! [D] Constant ID, Road 33, right side boundary
ROAD_NEW_ID_OFFSET(33,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(34,1) 0 ; - ! [D] Constant ID, Road 34, left side boundary
ROAD_NEW_ID_OFFSET(34,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(34,2) 0 ; - ! [D] Constant ID, Road 34, right side boundary
ROAD_NEW_ID_OFFSET(34,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(35,1) 0 ; - ! [D] Constant ID, Road 35, left side boundary
ROAD_NEW_ID_OFFSET(35,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(35,2) 0 ; - ! [D] Constant ID, Road 35, right side boundary
ROAD_NEW_ID_OFFSET(35,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(36,1) 0 ; - ! [D] Constant ID, Road 36, left side boundary
ROAD_NEW_ID_OFFSET(36,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(36,2) 0 ; - ! [D] Constant ID, Road 36, right side boundary
ROAD_NEW_ID_OFFSET(36,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(37,1) 0 ; - ! [D] Constant ID, Road 37, left side boundary
ROAD_NEW_ID_OFFSET(37,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(37,2) 0 ; - ! [D] Constant ID, Road 37, right side boundary
ROAD_NEW_ID_OFFSET(37,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(38,1) 0 ; - ! [D] Constant ID, Road 38, left side boundary
ROAD_NEW_ID_OFFSET(38,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(38,2) 0 ; - ! [D] Constant ID, Road 38, right side boundary
ROAD_NEW_ID_OFFSET(38,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(39,1) 0 ; - ! [D] Constant ID, Road 39, left side boundary
ROAD_NEW_ID_OFFSET(39,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(39,2) 0 ; - ! [D] Constant ID, Road 39, right side boundary
ROAD_NEW_ID_OFFSET(39,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(40,1) 0 ; - ! [D] Constant ID, Road 40, left side boundary
ROAD_NEW_ID_OFFSET(40,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(40,2) 0 ; - ! [D] Constant ID, Road 40, right side boundary
ROAD_NEW_ID_OFFSET(40,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(41,1) 0 ; - ! [D] Constant ID, Road 41, left side boundary
ROAD_NEW_ID_OFFSET(41,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(41,2) 0 ; - ! [D] Constant ID, Road 41, right side boundary
ROAD_NEW_ID_OFFSET(41,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(42,1) 0 ; - ! [D] Constant ID, Road 42, left side boundary
ROAD_NEW_ID_OFFSET(42,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(42,2) 0 ; - ! [D] Constant ID, Road 42, right side boundary
ROAD_NEW_ID_OFFSET(42,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(43,1) 0 ; - ! [D] Constant ID, Road 43, left side boundary
ROAD_NEW_ID_OFFSET(43,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(43,2) 0 ; - ! [D] Constant ID, Road 43, right side boundary
ROAD_NEW_ID_OFFSET(43,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(44,1) 0 ; - ! [D] Constant ID, Road 44, left side boundary
ROAD_NEW_ID_OFFSET(44,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(44,2) 0 ; - ! [D] Constant ID, Road 44, right side boundary
ROAD_NEW_ID_OFFSET(44,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(45,1) 0 ; - ! [D] Constant ID, Road 45, left side boundary
ROAD_NEW_ID_OFFSET(45,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(45,2) 0 ; - ! [D] Constant ID, Road 45, right side boundary
ROAD_NEW_ID_OFFSET(45,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(46,1) 0 ; - ! [D] Constant ID, Road 46, left side boundary
ROAD_NEW_ID_OFFSET(46,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(46,2) 0 ; - ! [D] Constant ID, Road 46, right side boundary
ROAD_NEW_ID_OFFSET(46,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(47,1) 0 ; - ! [D] Constant ID, Road 47, left side boundary
ROAD_NEW_ID_OFFSET(47,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(47,2) 0 ; - ! [D] Constant ID, Road 47, right side boundary
ROAD_NEW_ID_OFFSET(47,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(48,1) 0 ; - ! [D] Constant ID, Road 48, left side boundary
ROAD_NEW_ID_OFFSET(48,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(48,2) 0 ; - ! [D] Constant ID, Road 48, right side boundary
ROAD_NEW_ID_OFFSET(48,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(49,1) 0 ; - ! [D] Constant ID, Road 49, left side boundary
ROAD_NEW_ID_OFFSET(49,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(49,2) 0 ; - ! [D] Constant ID, Road 49, right side boundary
ROAD_NEW_ID_OFFSET(49,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(50,1) 0 ; - ! [D] Constant ID, Road 50, left side boundary
ROAD_NEW_ID_OFFSET(50,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(50,2) 0 ; - ! [D] Constant ID, Road 50, right side boundary
ROAD_NEW_ID_OFFSET(50,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(51,1) 0 ; - ! [D] Constant ID, Road 51, left side boundary
ROAD_NEW_ID_OFFSET(51,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(51,2) 0 ; - ! [D] Constant ID, Road 51, right side boundary
ROAD_NEW_ID_OFFSET(51,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(52,1) 0 ; - ! [D] Constant ID, Road 52, left side boundary
ROAD_NEW_ID_OFFSET(52,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(52,2) 0 ; - ! [D] Constant ID, Road 52, right side boundary
ROAD_NEW_ID_OFFSET(52,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(53,1) 0 ; - ! [D] Constant ID, Road 53, left side boundary
ROAD_NEW_ID_OFFSET(53,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(53,2) 0 ; - ! [D] Constant ID, Road 53, right side boundary
ROAD_NEW_ID_OFFSET(53,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(54,1) 0 ; - ! [D] Constant ID, Road 54, left side boundary
ROAD_NEW_ID_OFFSET(54,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(54,2) 0 ; - ! [D] Constant ID, Road 54, right side boundary
ROAD_NEW_ID_OFFSET(54,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(55,1) 0 ; - ! [D] Constant ID, Road 55, left side boundary
ROAD_NEW_ID_OFFSET(55,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(55,2) 0 ; - ! [D] Constant ID, Road 55, right side boundary
ROAD_NEW_ID_OFFSET(55,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(56,1) 0 ; - ! [D] Constant ID, Road 56, left side boundary
ROAD_NEW_ID_OFFSET(56,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(56,2) 0 ; - ! [D] Constant ID, Road 56, right side boundary
ROAD_NEW_ID_OFFSET(56,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(57,1) 0 ; - ! [D] Constant ID, Road 57, left side boundary
ROAD_NEW_ID_OFFSET(57,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(57,2) 0 ; - ! [D] Constant ID, Road 57, right side boundary
ROAD_NEW_ID_OFFSET(57,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(58,1) 0 ; - ! [D] Constant ID, Road 58, left side boundary
ROAD_NEW_ID_OFFSET(58,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(58,2) 0 ; - ! [D] Constant ID, Road 58, right side boundary
ROAD_NEW_ID_OFFSET(58,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(59,1) 0 ; - ! [D] Constant ID, Road 59, left side boundary
ROAD_NEW_ID_OFFSET(59,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(59,2) 0 ; - ! [D] Constant ID, Road 59, right side boundary
ROAD_NEW_ID_OFFSET(59,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(60,1) 0 ; - ! [D] Constant ID, Road 60, left side boundary
ROAD_NEW_ID_OFFSET(60,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(60,2) 0 ; - ! [D] Constant ID, Road 60, right side boundary
ROAD_NEW_ID_OFFSET(60,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(61,1) 0 ; - ! [D] Constant ID, Road 61, left side boundary
ROAD_NEW_ID_OFFSET(61,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(61,2) 0 ; - ! [D] Constant ID, Road 61, right side boundary
ROAD_NEW_ID_OFFSET(61,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(62,1) 0 ; - ! [D] Constant ID, Road 62, left side boundary
ROAD_NEW_ID_OFFSET(62,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(62,2) 0 ; - ! [D] Constant ID, Road 62, right side boundary
ROAD_NEW_ID_OFFSET(62,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(63,1) 0 ; - ! [D] Constant ID, Road 63, left side boundary
ROAD_NEW_ID_OFFSET(63,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(63,2) 0 ; - ! [D] Constant ID, Road 63, right side boundary
ROAD_NEW_ID_OFFSET(63,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(64,1) 0 ; - ! [D] Constant ID, Road 64, left side boundary
ROAD_NEW_ID_OFFSET(64,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(64,2) 0 ; - ! [D] Constant ID, Road 64, right side boundary
ROAD_NEW_ID_OFFSET(64,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(65,1) 0 ; - ! [D] Constant ID, Road 65, left side boundary
ROAD_NEW_ID_OFFSET(65,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(65,2) 0 ; - ! [D] Constant ID, Road 65, right side boundary
ROAD_NEW_ID_OFFSET(65,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(66,1) 0 ; - ! [D] Constant ID, Road 66, left side boundary
ROAD_NEW_ID_OFFSET(66,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(66,2) 0 ; - ! [D] Constant ID, Road 66, right side boundary
ROAD_NEW_ID_OFFSET(66,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(67,1) 0 ; - ! [D] Constant ID, Road 67, left side boundary
ROAD_NEW_ID_OFFSET(67,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(67,2) 0 ; - ! [D] Constant ID, Road 67, right side boundary
ROAD_NEW_ID_OFFSET(67,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(68,1) 0 ; - ! [D] Constant ID, Road 68, left side boundary
ROAD_NEW_ID_OFFSET(68,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(68,2) 0 ; - ! [D] Constant ID, Road 68, right side boundary
ROAD_NEW_ID_OFFSET(68,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(69,1) 0 ; - ! [D] Constant ID, Road 69, left side boundary
ROAD_NEW_ID_OFFSET(69,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(69,2) 0 ; - ! [D] Constant ID, Road 69, right side boundary
ROAD_NEW_ID_OFFSET(69,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(70,1) 0 ; - ! [D] Constant ID, Road 70, left side boundary
ROAD_NEW_ID_OFFSET(70,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(70,2) 0 ; - ! [D] Constant ID, Road 70, right side boundary
ROAD_NEW_ID_OFFSET(70,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(71,1) 0 ; - ! [D] Constant ID, Road 71, left side boundary
ROAD_NEW_ID_OFFSET(71,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(71,2) 0 ; - ! [D] Constant ID, Road 71, right side boundary
ROAD_NEW_ID_OFFSET(71,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(72,1) 0 ; - ! [D] Constant ID, Road 72, left side boundary
ROAD_NEW_ID_OFFSET(72,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(72,2) 0 ; - ! [D] Constant ID, Road 72, right side boundary
ROAD_NEW_ID_OFFSET(72,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(73,1) 0 ; - ! [D] Constant ID, Road 73, left side boundary
ROAD_NEW_ID_OFFSET(73,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(73,2) 0 ; - ! [D] Constant ID, Road 73, right side boundary
ROAD_NEW_ID_OFFSET(73,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(74,1) 0 ; - ! [D] Constant ID, Road 74, left side boundary
ROAD_NEW_ID_OFFSET(74,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(74,2) 0 ; - ! [D] Constant ID, Road 74, right side boundary
ROAD_NEW_ID_OFFSET(74,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(75,1) 0 ; - ! [D] Constant ID, Road 75, left side boundary
ROAD_NEW_ID_OFFSET(75,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(75,2) 0 ; - ! [D] Constant ID, Road 75, right side boundary
ROAD_NEW_ID_OFFSET(75,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(76,1) 0 ; - ! [D] Constant ID, Road 76, left side boundary
ROAD_NEW_ID_OFFSET(76,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(76,2) 0 ; - ! [D] Constant ID, Road 76, right side boundary
ROAD_NEW_ID_OFFSET(76,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(77,1) 0 ; - ! [D] Constant ID, Road 77, left side boundary
ROAD_NEW_ID_OFFSET(77,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(77,2) 0 ; - ! [D] Constant ID, Road 77, right side boundary
ROAD_NEW_ID_OFFSET(77,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(78,1) 0 ; - ! [D] Constant ID, Road 78, left side boundary
ROAD_NEW_ID_OFFSET(78,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(78,2) 0 ; - ! [D] Constant ID, Road 78, right side boundary
ROAD_NEW_ID_OFFSET(78,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(79,1) 0 ; - ! [D] Constant ID, Road 79, left side boundary
ROAD_NEW_ID_OFFSET(79,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(79,2) 0 ; - ! [D] Constant ID, Road 79, right side boundary
ROAD_NEW_ID_OFFSET(79,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(80,1) 0 ; - ! [D] Constant ID, Road 80, left side boundary
ROAD_NEW_ID_OFFSET(80,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(80,2) 0 ; - ! [D] Constant ID, Road 80, right side boundary
ROAD_NEW_ID_OFFSET(80,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(81,1) 0 ; - ! [D] Constant ID, Road 81, left side boundary
ROAD_NEW_ID_OFFSET(81,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(81,2) 0 ; - ! [D] Constant ID, Road 81, right side boundary
ROAD_NEW_ID_OFFSET(81,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(82,1) 0 ; - ! [D] Constant ID, Road 82, left side boundary
ROAD_NEW_ID_OFFSET(82,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(82,2) 0 ; - ! [D] Constant ID, Road 82, right side boundary
ROAD_NEW_ID_OFFSET(82,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(83,1) 0 ; - ! [D] Constant ID, Road 83, left side boundary
ROAD_NEW_ID_OFFSET(83,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(83,2) 0 ; - ! [D] Constant ID, Road 83, right side boundary
ROAD_NEW_ID_OFFSET(83,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(84,1) 0 ; - ! [D] Constant ID, Road 84, left side boundary
ROAD_NEW_ID_OFFSET(84,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(84,2) 0 ; - ! [D] Constant ID, Road 84, right side boundary
ROAD_NEW_ID_OFFSET(84,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(85,1) 0 ; - ! [D] Constant ID, Road 85, left side boundary
ROAD_NEW_ID_OFFSET(85,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(85,2) 0 ; - ! [D] Constant ID, Road 85, right side boundary
ROAD_NEW_ID_OFFSET(85,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(86,1) 0 ; - ! [D] Constant ID, Road 86, left side boundary
ROAD_NEW_ID_OFFSET(86,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(86,2) 0 ; - ! [D] Constant ID, Road 86, right side boundary
ROAD_NEW_ID_OFFSET(86,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(87,1) 0 ; - ! [D] Constant ID, Road 87, left side boundary
ROAD_NEW_ID_OFFSET(87,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(87,2) 0 ; - ! [D] Constant ID, Road 87, right side boundary
ROAD_NEW_ID_OFFSET(87,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(88,1) 0 ; - ! [D] Constant ID, Road 88, left side boundary
ROAD_NEW_ID_OFFSET(88,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(88,2) 0 ; - ! [D] Constant ID, Road 88, right side boundary
ROAD_NEW_ID_OFFSET(88,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(89,1) 0 ; - ! [D] Constant ID, Road 89, left side boundary
ROAD_NEW_ID_OFFSET(89,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(89,2) 0 ; - ! [D] Constant ID, Road 89, right side boundary
ROAD_NEW_ID_OFFSET(89,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(90,1) 0 ; - ! [D] Constant ID, Road 90, left side boundary
ROAD_NEW_ID_OFFSET(90,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(90,2) 0 ; - ! [D] Constant ID, Road 90, right side boundary
ROAD_NEW_ID_OFFSET(90,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(91,1) 0 ; - ! [D] Constant ID, Road 91, left side boundary
ROAD_NEW_ID_OFFSET(91,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(91,2) 0 ; - ! [D] Constant ID, Road 91, right side boundary
ROAD_NEW_ID_OFFSET(91,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(92,1) 0 ; - ! [D] Constant ID, Road 92, left side boundary
ROAD_NEW_ID_OFFSET(92,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(92,2) 0 ; - ! [D] Constant ID, Road 92, right side boundary
ROAD_NEW_ID_OFFSET(92,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(93,1) 0 ; - ! [D] Constant ID, Road 93, left side boundary
ROAD_NEW_ID_OFFSET(93,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(93,2) 0 ; - ! [D] Constant ID, Road 93, right side boundary
ROAD_NEW_ID_OFFSET(93,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(94,1) 0 ; - ! [D] Constant ID, Road 94, left side boundary
ROAD_NEW_ID_OFFSET(94,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(94,2) 0 ; - ! [D] Constant ID, Road 94, right side boundary
ROAD_NEW_ID_OFFSET(94,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(95,1) 0 ; - ! [D] Constant ID, Road 95, left side boundary
ROAD_NEW_ID_OFFSET(95,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(95,2) 0 ; - ! [D] Constant ID, Road 95, right side boundary
ROAD_NEW_ID_OFFSET(95,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(96,1) 0 ; - ! [D] Constant ID, Road 96, left side boundary
ROAD_NEW_ID_OFFSET(96,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(96,2) 0 ; - ! [D] Constant ID, Road 96, right side boundary
ROAD_NEW_ID_OFFSET(96,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(97,1) 0 ; - ! [D] Constant ID, Road 97, left side boundary
ROAD_NEW_ID_OFFSET(97,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(97,2) 0 ; - ! [D] Constant ID, Road 97, right side boundary
ROAD_NEW_ID_OFFSET(97,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(98,1) 0 ; - ! [D] Constant ID, Road 98, left side boundary
ROAD_NEW_ID_OFFSET(98,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(98,2) 0 ; - ! [D] Constant ID, Road 98, right side boundary
ROAD_NEW_ID_OFFSET(98,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(99,1) 0 ; - ! [D] Constant ID, Road 99, left side boundary
ROAD_NEW_ID_OFFSET(99,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(99,2) 0 ; - ! [D] Constant ID, Road 99, right side boundary
ROAD_NEW_ID_OFFSET(99,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(100,1) 0 ; - ! [D] Constant ID, Road 100, left side boundary
ROAD_NEW_ID_OFFSET(100,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(100,2) 0 ; - ! [D] Constant ID, Road 100, right side boundary
ROAD_NEW_ID_OFFSET(100,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_NEW_S: Estimate of station in new road (left/right) when a switch occurs. New
! S is a function of S (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. New S from the calculation can be adjusted with
! ROAD_NEW_S_GAIN and ROAD_NEW_S_OFFSET. S used in the calculation can be adjusted
! with SSCALE_ROAD_NEW_S and SSTART_ROAD_NEW_S. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IROAD and ISIDE are used to identify the dataset when reading data.

ROAD_NEW_S_CONSTANT(1,1) 0 ; m ! [D] Constant new S, Road 1, left side boundary
ROAD_NEW_S_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(1,2) 0 ; m ! [D] Constant new S, Road 1, right side boundary
ROAD_NEW_S_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(2,1) 0 ; m ! [D] Constant new S, Road 2, left side boundary
ROAD_NEW_S_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(2,2) 0 ; m ! [D] Constant new S, Road 2, right side boundary
ROAD_NEW_S_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(3,1) 0 ; m ! [D] Constant new S, Road 3, left side boundary
ROAD_NEW_S_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(3,2) 0 ; m ! [D] Constant new S, Road 3, right side boundary
ROAD_NEW_S_OFFSET(3,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(4,1) 0 ; m ! [D] Constant new S, Road 4, left side boundary
ROAD_NEW_S_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(4,2) 0 ; m ! [D] Constant new S, Road 4, right side boundary
ROAD_NEW_S_OFFSET(4,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(5,1) 0 ; m ! [D] Constant new S, Road 5, left side boundary
ROAD_NEW_S_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(5,2) 0 ; m ! [D] Constant new S, Road 5, right side boundary
ROAD_NEW_S_OFFSET(5,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(6,1) 0 ; m ! [D] Constant new S, Road 6, left side boundary
ROAD_NEW_S_OFFSET(6,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(6,2) 0 ; m ! [D] Constant new S, Road 6, right side boundary
ROAD_NEW_S_OFFSET(6,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(7,1) 0 ; m ! [D] Constant new S, Road 7, left side boundary
ROAD_NEW_S_OFFSET(7,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(7,2) 0 ; m ! [D] Constant new S, Road 7, right side boundary
ROAD_NEW_S_OFFSET(7,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(8,1) 0 ; m ! [D] Constant new S, Road 8, left side boundary
ROAD_NEW_S_OFFSET(8,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(8,2) 0 ; m ! [D] Constant new S, Road 8, right side boundary
ROAD_NEW_S_OFFSET(8,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(9,1) 0 ; m ! [D] Constant new S, Road 9, left side boundary
ROAD_NEW_S_OFFSET(9,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(9,2) 0 ; m ! [D] Constant new S, Road 9, right side boundary
ROAD_NEW_S_OFFSET(9,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(10,1) 0 ; m ! [D] Constant new S, Road 10, left side boundary
ROAD_NEW_S_OFFSET(10,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(10,2) 0 ; m ! [D] Constant new S, Road 10, right side boundary
ROAD_NEW_S_OFFSET(10,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(11,1) 0 ; m ! [D] Constant new S, Road 11, left side boundary
ROAD_NEW_S_OFFSET(11,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(11,2) 0 ; m ! [D] Constant new S, Road 11, right side boundary
ROAD_NEW_S_OFFSET(11,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(12,1) 0 ; m ! [D] Constant new S, Road 12, left side boundary
ROAD_NEW_S_OFFSET(12,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(12,2) 0 ; m ! [D] Constant new S, Road 12, right side boundary
ROAD_NEW_S_OFFSET(12,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(13,1) 0 ; m ! [D] Constant new S, Road 13, left side boundary
ROAD_NEW_S_OFFSET(13,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(13,2) 0 ; m ! [D] Constant new S, Road 13, right side boundary
ROAD_NEW_S_OFFSET(13,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(14,1) 0 ; m ! [D] Constant new S, Road 14, left side boundary
ROAD_NEW_S_OFFSET(14,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(14,2) 0 ; m ! [D] Constant new S, Road 14, right side boundary
ROAD_NEW_S_OFFSET(14,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(15,1) 0 ; m ! [D] Constant new S, Road 15, left side boundary
ROAD_NEW_S_OFFSET(15,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(15,2) 0 ; m ! [D] Constant new S, Road 15, right side boundary
ROAD_NEW_S_OFFSET(15,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(16,1) 0 ; m ! [D] Constant new S, Road 16, left side boundary
ROAD_NEW_S_OFFSET(16,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(16,2) 0 ; m ! [D] Constant new S, Road 16, right side boundary
ROAD_NEW_S_OFFSET(16,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(17,1) 0 ; m ! [D] Constant new S, Road 17, left side boundary
ROAD_NEW_S_OFFSET(17,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(17,2) 0 ; m ! [D] Constant new S, Road 17, right side boundary
ROAD_NEW_S_OFFSET(17,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(18,1) 0 ; m ! [D] Constant new S, Road 18, left side boundary
ROAD_NEW_S_OFFSET(18,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(18,2) 0 ; m ! [D] Constant new S, Road 18, right side boundary
ROAD_NEW_S_OFFSET(18,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(19,1) 0 ; m ! [D] Constant new S, Road 19, left side boundary
ROAD_NEW_S_OFFSET(19,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(19,2) 0 ; m ! [D] Constant new S, Road 19, right side boundary
ROAD_NEW_S_OFFSET(19,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(20,1) 0 ; m ! [D] Constant new S, Road 20, left side boundary
ROAD_NEW_S_OFFSET(20,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(20,2) 0 ; m ! [D] Constant new S, Road 20, right side boundary
ROAD_NEW_S_OFFSET(20,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(21,1) 0 ; m ! [D] Constant new S, Road 21, left side boundary
ROAD_NEW_S_OFFSET(21,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(21,2) 0 ; m ! [D] Constant new S, Road 21, right side boundary
ROAD_NEW_S_OFFSET(21,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(22,1) 0 ; m ! [D] Constant new S, Road 22, left side boundary
ROAD_NEW_S_OFFSET(22,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(22,2) 0 ; m ! [D] Constant new S, Road 22, right side boundary
ROAD_NEW_S_OFFSET(22,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(23,1) 0 ; m ! [D] Constant new S, Road 23, left side boundary
ROAD_NEW_S_OFFSET(23,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(23,2) 0 ; m ! [D] Constant new S, Road 23, right side boundary
ROAD_NEW_S_OFFSET(23,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(24,1) 0 ; m ! [D] Constant new S, Road 24, left side boundary
ROAD_NEW_S_OFFSET(24,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(24,2) 0 ; m ! [D] Constant new S, Road 24, right side boundary
ROAD_NEW_S_OFFSET(24,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(25,1) 0 ; m ! [D] Constant new S, Road 25, left side boundary
ROAD_NEW_S_OFFSET(25,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(25,2) 0 ; m ! [D] Constant new S, Road 25, right side boundary
ROAD_NEW_S_OFFSET(25,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(26,1) 0 ; m ! [D] Constant new S, Road 26, left side boundary
ROAD_NEW_S_OFFSET(26,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(26,2) 0 ; m ! [D] Constant new S, Road 26, right side boundary
ROAD_NEW_S_OFFSET(26,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(27,1) 0 ; m ! [D] Constant new S, Road 27, left side boundary
ROAD_NEW_S_OFFSET(27,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(27,2) 0 ; m ! [D] Constant new S, Road 27, right side boundary
ROAD_NEW_S_OFFSET(27,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(28,1) 0 ; m ! [D] Constant new S, Road 28, left side boundary
ROAD_NEW_S_OFFSET(28,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(28,2) 0 ; m ! [D] Constant new S, Road 28, right side boundary
ROAD_NEW_S_OFFSET(28,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(29,1) 0 ; m ! [D] Constant new S, Road 29, left side boundary
ROAD_NEW_S_OFFSET(29,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(29,2) 0 ; m ! [D] Constant new S, Road 29, right side boundary
ROAD_NEW_S_OFFSET(29,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(30,1) 0 ; m ! [D] Constant new S, Road 30, left side boundary
ROAD_NEW_S_OFFSET(30,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(30,2) 0 ; m ! [D] Constant new S, Road 30, right side boundary
ROAD_NEW_S_OFFSET(30,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(31,1) 0 ; m ! [D] Constant new S, Road 31, left side boundary
ROAD_NEW_S_OFFSET(31,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(31,2) 0 ; m ! [D] Constant new S, Road 31, right side boundary
ROAD_NEW_S_OFFSET(31,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(32,1) 0 ; m ! [D] Constant new S, Road 32, left side boundary
ROAD_NEW_S_OFFSET(32,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(32,2) 0 ; m ! [D] Constant new S, Road 32, right side boundary
ROAD_NEW_S_OFFSET(32,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(33,1) 0 ; m ! [D] Constant new S, Road 33, left side boundary
ROAD_NEW_S_OFFSET(33,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(33,2) 0 ; m ! [D] Constant new S, Road 33, right side boundary
ROAD_NEW_S_OFFSET(33,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(34,1) 0 ; m ! [D] Constant new S, Road 34, left side boundary
ROAD_NEW_S_OFFSET(34,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(34,2) 0 ; m ! [D] Constant new S, Road 34, right side boundary
ROAD_NEW_S_OFFSET(34,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(35,1) 0 ; m ! [D] Constant new S, Road 35, left side boundary
ROAD_NEW_S_OFFSET(35,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(35,2) 0 ; m ! [D] Constant new S, Road 35, right side boundary
ROAD_NEW_S_OFFSET(35,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(36,1) 0 ; m ! [D] Constant new S, Road 36, left side boundary
ROAD_NEW_S_OFFSET(36,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(36,2) 0 ; m ! [D] Constant new S, Road 36, right side boundary
ROAD_NEW_S_OFFSET(36,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(37,1) 0 ; m ! [D] Constant new S, Road 37, left side boundary
ROAD_NEW_S_OFFSET(37,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(37,2) 0 ; m ! [D] Constant new S, Road 37, right side boundary
ROAD_NEW_S_OFFSET(37,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(38,1) 0 ; m ! [D] Constant new S, Road 38, left side boundary
ROAD_NEW_S_OFFSET(38,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(38,2) 0 ; m ! [D] Constant new S, Road 38, right side boundary
ROAD_NEW_S_OFFSET(38,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(39,1) 0 ; m ! [D] Constant new S, Road 39, left side boundary
ROAD_NEW_S_OFFSET(39,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(39,2) 0 ; m ! [D] Constant new S, Road 39, right side boundary
ROAD_NEW_S_OFFSET(39,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(40,1) 0 ; m ! [D] Constant new S, Road 40, left side boundary
ROAD_NEW_S_OFFSET(40,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(40,2) 0 ; m ! [D] Constant new S, Road 40, right side boundary
ROAD_NEW_S_OFFSET(40,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(41,1) 0 ; m ! [D] Constant new S, Road 41, left side boundary
ROAD_NEW_S_OFFSET(41,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(41,2) 0 ; m ! [D] Constant new S, Road 41, right side boundary
ROAD_NEW_S_OFFSET(41,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(42,1) 0 ; m ! [D] Constant new S, Road 42, left side boundary
ROAD_NEW_S_OFFSET(42,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(42,2) 0 ; m ! [D] Constant new S, Road 42, right side boundary
ROAD_NEW_S_OFFSET(42,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(43,1) 0 ; m ! [D] Constant new S, Road 43, left side boundary
ROAD_NEW_S_OFFSET(43,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(43,2) 0 ; m ! [D] Constant new S, Road 43, right side boundary
ROAD_NEW_S_OFFSET(43,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(44,1) 0 ; m ! [D] Constant new S, Road 44, left side boundary
ROAD_NEW_S_OFFSET(44,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(44,2) 0 ; m ! [D] Constant new S, Road 44, right side boundary
ROAD_NEW_S_OFFSET(44,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(45,1) 0 ; m ! [D] Constant new S, Road 45, left side boundary
ROAD_NEW_S_OFFSET(45,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(45,2) 0 ; m ! [D] Constant new S, Road 45, right side boundary
ROAD_NEW_S_OFFSET(45,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(46,1) 0 ; m ! [D] Constant new S, Road 46, left side boundary
ROAD_NEW_S_OFFSET(46,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(46,2) 0 ; m ! [D] Constant new S, Road 46, right side boundary
ROAD_NEW_S_OFFSET(46,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(47,1) 0 ; m ! [D] Constant new S, Road 47, left side boundary
ROAD_NEW_S_OFFSET(47,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(47,2) 0 ; m ! [D] Constant new S, Road 47, right side boundary
ROAD_NEW_S_OFFSET(47,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(48,1) 0 ; m ! [D] Constant new S, Road 48, left side boundary
ROAD_NEW_S_OFFSET(48,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(48,2) 0 ; m ! [D] Constant new S, Road 48, right side boundary
ROAD_NEW_S_OFFSET(48,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(49,1) 0 ; m ! [D] Constant new S, Road 49, left side boundary
ROAD_NEW_S_OFFSET(49,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(49,2) 0 ; m ! [D] Constant new S, Road 49, right side boundary
ROAD_NEW_S_OFFSET(49,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(50,1) 0 ; m ! [D] Constant new S, Road 50, left side boundary
ROAD_NEW_S_OFFSET(50,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(50,2) 0 ; m ! [D] Constant new S, Road 50, right side boundary
ROAD_NEW_S_OFFSET(50,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(51,1) 0 ; m ! [D] Constant new S, Road 51, left side boundary
ROAD_NEW_S_OFFSET(51,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(51,2) 0 ; m ! [D] Constant new S, Road 51, right side boundary
ROAD_NEW_S_OFFSET(51,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(52,1) 0 ; m ! [D] Constant new S, Road 52, left side boundary
ROAD_NEW_S_OFFSET(52,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(52,2) 0 ; m ! [D] Constant new S, Road 52, right side boundary
ROAD_NEW_S_OFFSET(52,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(53,1) 0 ; m ! [D] Constant new S, Road 53, left side boundary
ROAD_NEW_S_OFFSET(53,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(53,2) 0 ; m ! [D] Constant new S, Road 53, right side boundary
ROAD_NEW_S_OFFSET(53,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(54,1) 0 ; m ! [D] Constant new S, Road 54, left side boundary
ROAD_NEW_S_OFFSET(54,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(54,2) 0 ; m ! [D] Constant new S, Road 54, right side boundary
ROAD_NEW_S_OFFSET(54,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(55,1) 0 ; m ! [D] Constant new S, Road 55, left side boundary
ROAD_NEW_S_OFFSET(55,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(55,2) 0 ; m ! [D] Constant new S, Road 55, right side boundary
ROAD_NEW_S_OFFSET(55,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(56,1) 0 ; m ! [D] Constant new S, Road 56, left side boundary
ROAD_NEW_S_OFFSET(56,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(56,2) 0 ; m ! [D] Constant new S, Road 56, right side boundary
ROAD_NEW_S_OFFSET(56,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(57,1) 0 ; m ! [D] Constant new S, Road 57, left side boundary
ROAD_NEW_S_OFFSET(57,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(57,2) 0 ; m ! [D] Constant new S, Road 57, right side boundary
ROAD_NEW_S_OFFSET(57,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(58,1) 0 ; m ! [D] Constant new S, Road 58, left side boundary
ROAD_NEW_S_OFFSET(58,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(58,2) 0 ; m ! [D] Constant new S, Road 58, right side boundary
ROAD_NEW_S_OFFSET(58,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(59,1) 0 ; m ! [D] Constant new S, Road 59, left side boundary
ROAD_NEW_S_OFFSET(59,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(59,2) 0 ; m ! [D] Constant new S, Road 59, right side boundary
ROAD_NEW_S_OFFSET(59,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(60,1) 0 ; m ! [D] Constant new S, Road 60, left side boundary
ROAD_NEW_S_OFFSET(60,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(60,2) 0 ; m ! [D] Constant new S, Road 60, right side boundary
ROAD_NEW_S_OFFSET(60,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(61,1) 0 ; m ! [D] Constant new S, Road 61, left side boundary
ROAD_NEW_S_OFFSET(61,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(61,2) 0 ; m ! [D] Constant new S, Road 61, right side boundary
ROAD_NEW_S_OFFSET(61,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(62,1) 0 ; m ! [D] Constant new S, Road 62, left side boundary
ROAD_NEW_S_OFFSET(62,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(62,2) 0 ; m ! [D] Constant new S, Road 62, right side boundary
ROAD_NEW_S_OFFSET(62,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(63,1) 0 ; m ! [D] Constant new S, Road 63, left side boundary
ROAD_NEW_S_OFFSET(63,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(63,2) 0 ; m ! [D] Constant new S, Road 63, right side boundary
ROAD_NEW_S_OFFSET(63,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(64,1) 0 ; m ! [D] Constant new S, Road 64, left side boundary
ROAD_NEW_S_OFFSET(64,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(64,2) 0 ; m ! [D] Constant new S, Road 64, right side boundary
ROAD_NEW_S_OFFSET(64,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(65,1) 0 ; m ! [D] Constant new S, Road 65, left side boundary
ROAD_NEW_S_OFFSET(65,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(65,2) 0 ; m ! [D] Constant new S, Road 65, right side boundary
ROAD_NEW_S_OFFSET(65,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(66,1) 0 ; m ! [D] Constant new S, Road 66, left side boundary
ROAD_NEW_S_OFFSET(66,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(66,2) 0 ; m ! [D] Constant new S, Road 66, right side boundary
ROAD_NEW_S_OFFSET(66,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(67,1) 0 ; m ! [D] Constant new S, Road 67, left side boundary
ROAD_NEW_S_OFFSET(67,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(67,2) 0 ; m ! [D] Constant new S, Road 67, right side boundary
ROAD_NEW_S_OFFSET(67,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(68,1) 0 ; m ! [D] Constant new S, Road 68, left side boundary
ROAD_NEW_S_OFFSET(68,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(68,2) 0 ; m ! [D] Constant new S, Road 68, right side boundary
ROAD_NEW_S_OFFSET(68,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(69,1) 0 ; m ! [D] Constant new S, Road 69, left side boundary
ROAD_NEW_S_OFFSET(69,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(69,2) 0 ; m ! [D] Constant new S, Road 69, right side boundary
ROAD_NEW_S_OFFSET(69,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(70,1) 0 ; m ! [D] Constant new S, Road 70, left side boundary
ROAD_NEW_S_OFFSET(70,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(70,2) 0 ; m ! [D] Constant new S, Road 70, right side boundary
ROAD_NEW_S_OFFSET(70,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(71,1) 0 ; m ! [D] Constant new S, Road 71, left side boundary
ROAD_NEW_S_OFFSET(71,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(71,2) 0 ; m ! [D] Constant new S, Road 71, right side boundary
ROAD_NEW_S_OFFSET(71,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(72,1) 0 ; m ! [D] Constant new S, Road 72, left side boundary
ROAD_NEW_S_OFFSET(72,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(72,2) 0 ; m ! [D] Constant new S, Road 72, right side boundary
ROAD_NEW_S_OFFSET(72,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(73,1) 0 ; m ! [D] Constant new S, Road 73, left side boundary
ROAD_NEW_S_OFFSET(73,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(73,2) 0 ; m ! [D] Constant new S, Road 73, right side boundary
ROAD_NEW_S_OFFSET(73,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(74,1) 0 ; m ! [D] Constant new S, Road 74, left side boundary
ROAD_NEW_S_OFFSET(74,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(74,2) 0 ; m ! [D] Constant new S, Road 74, right side boundary
ROAD_NEW_S_OFFSET(74,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(75,1) 0 ; m ! [D] Constant new S, Road 75, left side boundary
ROAD_NEW_S_OFFSET(75,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(75,2) 0 ; m ! [D] Constant new S, Road 75, right side boundary
ROAD_NEW_S_OFFSET(75,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(76,1) 0 ; m ! [D] Constant new S, Road 76, left side boundary
ROAD_NEW_S_OFFSET(76,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(76,2) 0 ; m ! [D] Constant new S, Road 76, right side boundary
ROAD_NEW_S_OFFSET(76,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(77,1) 0 ; m ! [D] Constant new S, Road 77, left side boundary
ROAD_NEW_S_OFFSET(77,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(77,2) 0 ; m ! [D] Constant new S, Road 77, right side boundary
ROAD_NEW_S_OFFSET(77,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(78,1) 0 ; m ! [D] Constant new S, Road 78, left side boundary
ROAD_NEW_S_OFFSET(78,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(78,2) 0 ; m ! [D] Constant new S, Road 78, right side boundary
ROAD_NEW_S_OFFSET(78,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(79,1) 0 ; m ! [D] Constant new S, Road 79, left side boundary
ROAD_NEW_S_OFFSET(79,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(79,2) 0 ; m ! [D] Constant new S, Road 79, right side boundary
ROAD_NEW_S_OFFSET(79,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(80,1) 0 ; m ! [D] Constant new S, Road 80, left side boundary
ROAD_NEW_S_OFFSET(80,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(80,2) 0 ; m ! [D] Constant new S, Road 80, right side boundary
ROAD_NEW_S_OFFSET(80,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(81,1) 0 ; m ! [D] Constant new S, Road 81, left side boundary
ROAD_NEW_S_OFFSET(81,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(81,2) 0 ; m ! [D] Constant new S, Road 81, right side boundary
ROAD_NEW_S_OFFSET(81,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(82,1) 0 ; m ! [D] Constant new S, Road 82, left side boundary
ROAD_NEW_S_OFFSET(82,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(82,2) 0 ; m ! [D] Constant new S, Road 82, right side boundary
ROAD_NEW_S_OFFSET(82,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(83,1) 0 ; m ! [D] Constant new S, Road 83, left side boundary
ROAD_NEW_S_OFFSET(83,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(83,2) 0 ; m ! [D] Constant new S, Road 83, right side boundary
ROAD_NEW_S_OFFSET(83,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(84,1) 0 ; m ! [D] Constant new S, Road 84, left side boundary
ROAD_NEW_S_OFFSET(84,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(84,2) 0 ; m ! [D] Constant new S, Road 84, right side boundary
ROAD_NEW_S_OFFSET(84,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(85,1) 0 ; m ! [D] Constant new S, Road 85, left side boundary
ROAD_NEW_S_OFFSET(85,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(85,2) 0 ; m ! [D] Constant new S, Road 85, right side boundary
ROAD_NEW_S_OFFSET(85,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(86,1) 0 ; m ! [D] Constant new S, Road 86, left side boundary
ROAD_NEW_S_OFFSET(86,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(86,2) 0 ; m ! [D] Constant new S, Road 86, right side boundary
ROAD_NEW_S_OFFSET(86,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(87,1) 0 ; m ! [D] Constant new S, Road 87, left side boundary
ROAD_NEW_S_OFFSET(87,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(87,2) 0 ; m ! [D] Constant new S, Road 87, right side boundary
ROAD_NEW_S_OFFSET(87,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(88,1) 0 ; m ! [D] Constant new S, Road 88, left side boundary
ROAD_NEW_S_OFFSET(88,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(88,2) 0 ; m ! [D] Constant new S, Road 88, right side boundary
ROAD_NEW_S_OFFSET(88,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(89,1) 0 ; m ! [D] Constant new S, Road 89, left side boundary
ROAD_NEW_S_OFFSET(89,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(89,2) 0 ; m ! [D] Constant new S, Road 89, right side boundary
ROAD_NEW_S_OFFSET(89,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(90,1) 0 ; m ! [D] Constant new S, Road 90, left side boundary
ROAD_NEW_S_OFFSET(90,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(90,2) 0 ; m ! [D] Constant new S, Road 90, right side boundary
ROAD_NEW_S_OFFSET(90,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(91,1) 0 ; m ! [D] Constant new S, Road 91, left side boundary
ROAD_NEW_S_OFFSET(91,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(91,2) 0 ; m ! [D] Constant new S, Road 91, right side boundary
ROAD_NEW_S_OFFSET(91,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(92,1) 0 ; m ! [D] Constant new S, Road 92, left side boundary
ROAD_NEW_S_OFFSET(92,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(92,2) 0 ; m ! [D] Constant new S, Road 92, right side boundary
ROAD_NEW_S_OFFSET(92,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(93,1) 0 ; m ! [D] Constant new S, Road 93, left side boundary
ROAD_NEW_S_OFFSET(93,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(93,2) 0 ; m ! [D] Constant new S, Road 93, right side boundary
ROAD_NEW_S_OFFSET(93,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(94,1) 0 ; m ! [D] Constant new S, Road 94, left side boundary
ROAD_NEW_S_OFFSET(94,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(94,2) 0 ; m ! [D] Constant new S, Road 94, right side boundary
ROAD_NEW_S_OFFSET(94,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(95,1) 0 ; m ! [D] Constant new S, Road 95, left side boundary
ROAD_NEW_S_OFFSET(95,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(95,2) 0 ; m ! [D] Constant new S, Road 95, right side boundary
ROAD_NEW_S_OFFSET(95,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(96,1) 0 ; m ! [D] Constant new S, Road 96, left side boundary
ROAD_NEW_S_OFFSET(96,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(96,2) 0 ; m ! [D] Constant new S, Road 96, right side boundary
ROAD_NEW_S_OFFSET(96,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(97,1) 0 ; m ! [D] Constant new S, Road 97, left side boundary
ROAD_NEW_S_OFFSET(97,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(97,2) 0 ; m ! [D] Constant new S, Road 97, right side boundary
ROAD_NEW_S_OFFSET(97,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(98,1) 0 ; m ! [D] Constant new S, Road 98, left side boundary
ROAD_NEW_S_OFFSET(98,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(98,2) 0 ; m ! [D] Constant new S, Road 98, right side boundary
ROAD_NEW_S_OFFSET(98,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(99,1) 0 ; m ! [D] Constant new S, Road 99, left side boundary
ROAD_NEW_S_OFFSET(99,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(99,2) 0 ; m ! [D] Constant new S, Road 99, right side boundary
ROAD_NEW_S_OFFSET(99,2) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(100,1) 0 ; m ! [D] Constant new S, Road 100, left side boundary
ROAD_NEW_S_OFFSET(100,1) 0 ; m ! Offset added (after gain) to get new S

ROAD_NEW_S_CONSTANT(100,2) 0 ; m ! [D] Constant new S, Road 100, right side boundary
ROAD_NEW_S_OFFSET(100,2) 0 ; m ! Offset added (after gain) to get new S

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 100 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(2) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(2)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(3) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(3)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(4) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(4)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(5) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(5)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(6) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(6)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(7) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(7)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(8) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(8)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(9) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(9)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(10) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(10)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(11) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(11)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(12) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(12)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(13) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(13)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(14) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(14)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(15) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(15)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(16) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(16)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(17) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(17)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(18) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(18)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(19) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(19)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(20) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(20)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(21) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(21)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(22) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(22)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(23) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(23)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(24) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(24)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(25) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(25)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(26) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(26)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(27) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(27)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(28) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(28)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(29) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(29)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(30) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(30)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(31) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(31)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(32) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(32)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(33) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(33)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(34) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(34)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(35) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(35)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(36) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(36)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(37) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(37)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(38) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(38)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(39) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(39)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(40) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(40)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(41) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(41)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(42) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(42)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(43) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(43)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(44) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(44)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(45) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(45)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(46) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(46)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(47) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(47)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(48) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(48)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(49) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(49)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(50) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(50)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(51) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(51)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(52) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(52)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(53) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(53)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(54) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(54)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(55) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(55)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(56) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(56)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(57) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(57)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(58) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(58)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(59) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(59)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(60) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(60)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(61) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(61)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(62) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(62)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(63) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(63)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(64) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(64)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(65) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(65)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(66) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(66)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(67) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(67)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(68) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(68)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(69) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(69)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(70) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(70)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(71) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(71)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(72) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(72)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(73) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(73)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(74) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(74)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(75) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(75)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(76) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(76)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(77) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(77)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(78) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(78)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(79) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(79)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(80) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(80)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(81) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(81)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(82) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(82)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(83) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(83)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(84) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(84)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(85) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(85)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(86) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(86)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(87) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(87)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(88) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(88)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(89) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(89)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(90) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(90)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(91) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(91)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(92) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(92)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(93) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(93)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(94) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(94)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(95) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(95)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(96) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(96)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(97) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(97)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(98) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(98)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(99) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(99)  0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(100) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(100) 0 ; m ! Offset added (after gain) to get elevation

! R_EFF_CVT_F: CVT driving efficiency. Driving efficiency is a function of
! transmission gear ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Driving efficiency from the calculation can be
! adjusted with R_EFF_CVT_F_GAIN and R_EFF_CVT_F_OFFSET. Transmission gear ratio used
! in the calculation can be adjusted with R_SCALE_R_EFF_CVT_F and
! R_START_R_EFF_CVT_F. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index ICVT is used to
! identify the dataset when reading data.

R_EFF_CVT_F_CONSTANT(1) 1 ; - ! [D] Constant driving efficiency
R_EFF_CVT_F_GAIN(1) 1 ! Gain multiplied with calculated value to get driving
                      ! efficiency
R_EFF_CVT_F_OFFSET(1) 0 ; - ! Offset added (after gain) to get driving efficiency

R_EFF_CVT_F_CONSTANT(2) 1 ; - ! [D] Constant driving efficiency
R_EFF_CVT_F_GAIN(2) 1 ! Gain multiplied with calculated value to get driving
                      ! efficiency
R_EFF_CVT_F_OFFSET(2) 0 ; - ! Offset added (after gain) to get driving efficiency

! R_EFF_CVT_R: CVT coasting efficiency. Coasting efficiency is a function of
! transmission gear ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Coasting efficiency from the calculation can be
! adjusted with R_EFF_CVT_R_GAIN and R_EFF_CVT_R_OFFSET. Transmission gear ratio used
! in the calculation can be adjusted with R_SCALE_R_EFF_CVT_R and
! R_START_R_EFF_CVT_R. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index ICVT is used to
! identify the dataset when reading data.

R_EFF_CVT_R_CONSTANT(1) 1 ; - ! [D] Constant coasting efficiency
R_EFF_CVT_R_GAIN(1) 1 ! Gain multiplied with calculated value to get coasting
                      ! efficiency
R_EFF_CVT_R_OFFSET(1) 0 ; - ! Offset added (after gain) to get coasting efficiency

R_EFF_CVT_R_CONSTANT(2) 1 ; - ! [D] Constant coasting efficiency
R_EFF_CVT_R_GAIN(2) 1 ! Gain multiplied with calculated value to get coasting
                      ! efficiency
R_EFF_CVT_R_OFFSET(2) 0 ; - ! Offset added (after gain) to get coasting efficiency

! R_GEAR_CVT: Transmission gear ratio (CVT). Transmission gear ratio can be a
! nonlinear CARPET function of throttle position and transmission speed or a function
! of transmission speed (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! R_GEAR_CVT_THROTTLE of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission gear ratio
! from the calculation can be adjusted with R_GEAR_CVT_GAIN and R_GEAR_CVT_OFFSET.
! Transmission speed used in the calculation can be adjusted with
! SPIN_SCALE_R_GEAR_CVT and SPIN_START_R_GEAR_CVT. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_R_GEAR_CVT and
! THROTTLE_START_R_GEAR_CVT. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ICVT is
! used to identify the dataset when reading data.

! [D] 2D table: row 1 has "0" (place holder) followed by 4 values of throttle
! position (-). Other rows have transmission speed (rpm) followed by 4 values of
! transmission gear ratio (-).
R_GEAR_CVT_CARPET(1) 2D_LINEAR
 0, 0, 0.2, 0.8, 1
 0, 4.596, 4.596, 4.596, 4.596
 250, 2.724, 4.2, 4.55, 4.596
 360, 1.864, 3.8, 4.45, 4.55
 460, 1.464, 3, 4.25, 4.5
 550, 1.231, 2.5, 4, 4.4
 680, 1, 2, 3.6, 4.2
 825, 0.824, 1.5, 3, 3.9
 990, 0.685, 1.2, 2.5, 3.5
 1200, 0.685, 1, 2, 2.724
 2000, 0.685, 0.85, 1.2, 1.864
 3000, 0.685, 0.7, 1, 1.464
 3800, 0.685, 0.685, 0.85, 1.231
 4500, 0.685, 0.685, 0.7, 1
 5600, 0.685, 0.685, 0.685, 0.824
 6700, 0.685, 0.685, 0.685, 0.685
ENDTABLE
R_GEAR_CVT_GAIN(1)  1 ! Gain multiplied with calculated value to get transmission
                      ! gear ratio
R_GEAR_CVT_OFFSET(1) 0 ; - ! Offset added (after gain) to get transmission gear
                       ! ratio
SPIN_START_R_GEAR_CVT(1) 0 ; rpm ! Offset subtracted from transmission speed
SPIN_SCALE_R_GEAR_CVT(1) 1 ! Scale factor divided into (transmission speed -
                           ! SPIN_START_R_GEAR_CVT)
THROTTLE_START_R_GEAR_CVT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_R_GEAR_CVT(1) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_R_GEAR_CVT)

! [D] 2D table: row 1 has "0" (place holder) followed by 4 values of throttle
! position (-). Other rows have transmission speed (rpm) followed by 4 values of
! transmission gear ratio (-).
R_GEAR_CVT_CARPET(2) 2D_LINEAR
 0, 0, 0.2, 0.8, 1
 0, 4.596, 4.596, 4.596, 4.596
 250, 2.724, 4.2, 4.55, 4.596
 360, 1.864, 3.8, 4.45, 4.55
 460, 1.464, 3, 4.25, 4.5
 550, 1.231, 2.5, 4, 4.4
 680, 1, 2, 3.6, 4.2
 825, 0.824, 1.5, 3, 3.9
 990, 0.685, 1.2, 2.5, 3.5
 1200, 0.685, 1, 2, 2.724
 2000, 0.685, 0.85, 1.2, 1.864
 3000, 0.685, 0.7, 1, 1.464
 3800, 0.685, 0.685, 0.85, 1.231
 4500, 0.685, 0.685, 0.7, 1
 5600, 0.685, 0.685, 0.685, 0.824
 6700, 0.685, 0.685, 0.685, 0.685
ENDTABLE
R_GEAR_CVT_GAIN(2)  1 ! Gain multiplied with calculated value to get transmission
                      ! gear ratio
R_GEAR_CVT_OFFSET(2) 0 ; - ! Offset added (after gain) to get transmission gear
                       ! ratio
SPIN_START_R_GEAR_CVT(2) 0 ; rpm ! Offset subtracted from transmission speed
SPIN_SCALE_R_GEAR_CVT(2) 1 ! Scale factor divided into (transmission speed -
                           ! SPIN_START_R_GEAR_CVT)
THROTTLE_START_R_GEAR_CVT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_R_GEAR_CVT(2) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_R_GEAR_CVT)

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1) 0 ; - ! [D] Constant gain, axle 1
R_STEER_SPEED_OFFSET(1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(2) 0 ; - ! [D] Constant gain, axle 2
R_STEER_SPEED_OFFSET(2) 0 ; - ! Offset added (after gain) to get gain

! SPEED_AX_BRAKE: Speed controller: Ax limit under pure braking. Ax limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AX_BRAKE_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ax limit from the calculation can be adjusted with SPEED_AX_BRAKE_GAIN
! and SPEED_AX_BRAKE_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AX_BRAKE and SSTART_SPEED_AX_BRAKE. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AX_BRAKE and VX_START_SPEED_AX_BRAKE.

SPEED_AX_BRAKE_CONSTANT 0.3 ; g ! [D] Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AX_THROTTLE: Speed controller: Ax limit under pure throttle. Ax limit can be
! a nonlinear CARPET function of speed and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SPEED_AX_THROTTLE_V of
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Ax limit from the calculation can be adjusted with
! SPEED_AX_THROTTLE_GAIN and SPEED_AX_THROTTLE_OFFSET. Station used in the
! calculation can be adjusted with SSCALE_SPEED_AX_THROTTLE and
! SSTART_SPEED_AX_THROTTLE. Speed used in the calculation can be adjusted with
! VX_SCALE_SPEED_AX_THROTTLE and VX_START_SPEED_AX_THROTTLE.

SPEED_AX_THROTTLE_CONSTANT 0.3 ; g ! [D] Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AY_LEFT: Speed controller: Ay limit when turning left. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_LEFT_V of speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Ay limit from the calculation can be adjusted with SPEED_AY_LEFT_GAIN and
! SPEED_AY_LEFT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_LEFT and SSTART_SPEED_AY_LEFT. Speed used in the calculation can be
! adjusted with VX_SCALE_SPEED_AY_LEFT and VX_START_SPEED_AY_LEFT.

SPEED_AY_LEFT_CONSTANT 0.3 ; g ! [D] Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN  1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_AY_RIGHT: Speed controller: Ay limit when turning right. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_RIGHT_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ay limit from the calculation can be adjusted with SPEED_AY_RIGHT_GAIN
! and SPEED_AY_RIGHT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_RIGHT and SSTART_SPEED_AY_RIGHT. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AY_RIGHT and VX_START_SPEED_AY_RIGHT.

SPEED_AY_RIGHT_CONSTANT 0.3 ; g ! [D] Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 100 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_CONSTANT(1) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(1) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(2) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(2) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(3) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(3) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(3) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(3) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(4) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(4) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(4) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(4) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(5) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(5) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(5) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(5) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(5) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(6) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(6) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(6) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(6) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(6) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(7) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(7) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(7) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(7) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(7) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(8) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(8) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(8) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(8) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(8) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(9) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(9) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(9) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(9) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(9) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(10) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(10) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(10) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(10) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(10) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(11) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(11) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(11) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(11) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(11) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(12) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(12) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(12) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(12) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(12) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(13) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(13) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(13) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(13) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(13) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(14) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(14) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(14) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(14) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(14) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(15) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(15) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(15) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(15) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(15) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(16) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(16) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(16) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(16) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(16) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(17) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(17) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(17) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(17) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(17) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(18) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(18) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(18) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(18) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(18) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(19) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(19) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(19) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(19) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(19) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(20) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(20) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(20) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(20) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(20) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(21) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(21) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(21) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(21) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(21) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(22) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(22) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(22) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(22) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(22) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(23) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(23) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(23) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(23) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(23) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(24) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(24) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(24) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(24) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(24) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(25) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(25) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(25) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(25) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(25) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(26) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(26) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(26) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(26) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(26) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(27) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(27) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(27) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(27) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(27) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(28) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(28) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(28) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(28) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(28) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(29) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(29) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(29) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(29) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(29) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(30) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(30) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(30) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(30) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(30) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(31) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(31) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(31) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(31) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(31) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(32) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(32) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(32) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(32) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(32) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(33) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(33) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(33) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(33) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(33) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(34) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(34) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(34) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(34) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(34) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(35) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(35) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(35) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(35) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(35) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(36) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(36) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(36) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(36) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(36) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(37) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(37) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(37) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(37) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(37) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(38) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(38) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(38) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(38) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(38) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(39) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(39) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(39) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(39) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(39) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(40) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(40) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(40) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(40) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(40) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(41) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(41) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(41) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(41) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(41) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(42) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(42) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(42) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(42) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(42) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(43) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(43) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(43) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(43) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(43) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(44) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(44) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(44) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(44) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(44) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(45) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(45) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(45) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(45) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(45) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(46) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(46) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(46) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(46) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(46) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(47) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(47) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(47) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(47) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(47) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(48) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(48) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(48) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(48) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(48) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(49) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(49) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(49) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(49) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(49) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(50) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(50) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(50) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(50) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(50) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(51) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(51) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(51) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(51) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(51) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(52) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(52) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(52) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(52) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(52) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(53) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(53) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(53) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(53) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(53) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(54) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(54) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(54) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(54) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(54) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(55) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(55) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(55) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(55) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(55) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(56) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(56) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(56) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(56) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(56) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(57) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(57) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(57) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(57) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(57) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(58) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(58) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(58) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(58) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(58) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(59) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(59) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(59) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(59) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(59) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(60) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(60) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(60) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(60) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(60) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(61) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(61) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(61) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(61) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(61) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(62) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(62) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(62) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(62) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(62) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(63) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(63) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(63) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(63) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(63) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(64) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(64) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(64) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(64) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(64) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(65) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(65) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(65) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(65) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(65) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(66) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(66) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(66) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(66) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(66) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(67) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(67) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(67) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(67) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(67) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(68) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(68) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(68) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(68) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(68) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(69) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(69) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(69) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(69) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(69) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(70) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(70) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(70) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(70) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(70) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(71) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(71) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(71) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(71) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(71) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(72) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(72) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(72) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(72) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(72) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(73) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(73) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(73) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(73) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(73) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(74) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(74) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(74) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(74) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(74) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(75) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(75) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(75) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(75) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(75) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(76) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(76) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(76) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(76) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(76) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(77) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(77) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(77) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(77) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(77) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(78) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(78) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(78) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(78) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(78) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(79) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(79) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(79) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(79) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(79) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(80) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(80) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(80) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(80) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(80) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(81) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(81) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(81) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(81) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(81) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(82) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(82) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(82) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(82) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(82) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(83) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(83) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(83) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(83) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(83) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(84) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(84) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(84) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(84) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(84) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(85) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(85) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(85) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(85) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(85) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(86) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(86) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(86) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(86) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(86) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(87) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(87) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(87) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(87) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(87) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(88) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(88) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(88) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(88) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(88) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(89) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(89) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(89) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(89) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(89) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(90) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(90) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(90) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(90) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(90) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(91) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(91) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(91) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(91) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(91) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(92) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(92) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(92) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(92) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(92) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(93) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(93) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(93) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(93) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(93) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(94) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(94) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(94) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(94) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(94) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(95) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(95) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(95) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(95) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(95) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(96) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(96) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(96) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(96) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(96) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(97) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(97) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(97) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(97) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(97) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(98) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(98) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(98) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(98) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(98) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(99) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(99) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(99) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(99) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(99) 1 ; - ! [D] Constant speed component due to station

SPEED_TARGET_CONSTANT(100) 0 ; km/h ! [D] Constant speed component due to time
SPEED_TARGET_GAIN(100) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(100) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(100) MULTIPLY ! How to combine the two components
SPEED_TARGET_S_CONSTANT(100) 1 ; - ! [D] Constant speed component due to station

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_CONSTANT(1) 0 ; deg ! [D] Constant steer, axle 1
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer

STEER_COMP_CONSTANT(2) 0 ; deg ! [D] Constant steer, axle 2
STEER_COMP_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

STEER_KIN_COEFFICIENT(1,1) 1 ! [D] Coefficient: road wheel steer per unit pitman arm
                             ! angle (deg/deg), axle 1, left side
STEER_KIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

STEER_KIN_COEFFICIENT(1,2) 1 ! [D] Coefficient: road wheel steer per unit pitman arm
                             ! angle (deg/deg), axle 1, right side
STEER_KIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

STEER_KIN_COEFFICIENT(2,1) 1 ! [D] Coefficient: road wheel steer per unit pitman arm
                             ! angle (deg/deg), axle 2, left side
STEER_KIN_GAIN(2,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

STEER_KIN_COEFFICIENT(2,2) 1 ! [D] Coefficient: road wheel steer per unit pitman arm
                             ! angle (deg/deg), axle 2, right side
STEER_KIN_GAIN(2,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! STEER_SW: Open loop steering wheel angle as a function of time. Steering wheel
! angle is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Steering wheel angle from the
! calculation can be adjusted with STEER_SW_GAIN and STEER_SW_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_STEER and TSTART_STEER.

STEER_SW_CONSTANT   0 ; deg ! [D] Constant steering wheel angle
STEER_SW_OFFSET     0 ; deg ! Offset added (after gain) to get steering wheel angle

! STI_TYPARR: STI tire model properties. Property value is a function of Property
! number (CONSTANT, COEFFICIENT, or TABLE). Property value from the calculation can
! be adjusted with STI_TYPARR_GAIN and STI_TYPARR_OFFSET. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

STI_TYPARR_CONSTANT(1,1) 0 ; - ! [D] Constant Property value, axle 1, left side
STI_TYPARR_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get Property value

STI_TYPARR_CONSTANT(1,2) 0 ; - ! [D] Constant Property value, axle 1, right side
STI_TYPARR_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get Property value

STI_TYPARR_CONSTANT(2,1) 0 ; - ! [D] Constant Property value, axle 2, left side
STI_TYPARR_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get Property value

STI_TYPARR_CONSTANT(2,2) 0 ; - ! [D] Constant Property value, axle 2, right side
STI_TYPARR_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get Property value

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive is a function
! of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the calculation
! can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used in the
! calculation can be adjusted with JNC_SCALE_SUSP_DIVE and JNC_START_SUSP_DIVE. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

SUSP_DIVE_CONSTANT(1,1) 0 ; deg ! [D] Constant suspension dive, axle 1, left side
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive

SUSP_DIVE_CONSTANT(1,2) 0 ; deg ! [D] Constant suspension dive, axle 1, right side
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive

SUSP_DIVE_CONSTANT(2,1) 0 ; deg ! [D] Constant suspension dive, axle 2, left side
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension dive

SUSP_DIVE_CONSTANT(2,2) 0 ; deg ! [D] Constant suspension dive, axle 2, right side
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension dive

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of unsteered wheel from
! the calculation can be adjusted with SUSP_LAT_GAIN and SUSP_LAT_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT.
! The derivative of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

SUSP_LAT_CONSTANT(1,1) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                         ! wheel, axle 1, left side
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel

SUSP_LAT_CONSTANT(1,2) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                         ! wheel, axle 1, right side
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel

SUSP_LAT_CONSTANT(2,1) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                         ! wheel, axle 2, left side
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel

SUSP_LAT_CONSTANT(2,2) 0 ; mm ! [D] Constant Lateral movement inward of unsteered
                         ! wheel, axle 2, right side
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel is a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

SUSP_X_CONSTANT(1,1) 0 ; mm ! [D] Constant X movement forward of unsteered wheel,
                       ! axle 1, left side
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel

SUSP_X_CONSTANT(1,2) 0 ; mm ! [D] Constant X movement forward of unsteered wheel,
                       ! axle 1, right side
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel

SUSP_X_CONSTANT(2,1) 0 ; mm ! [D] Constant X movement forward of unsteered wheel,
                       ! axle 2, left side
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel

SUSP_X_CONSTANT(2,2) 0 ; mm ! [D] Constant X movement forward of unsteered wheel,
                       ! axle 2, right side
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TOE: Suspension toe (measured at zero steer). Toe is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be adjusted with
! TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_TOE and JNC_START_TOE. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

TOE_CONSTANT(1,1)   0 ; deg ! [D] Constant toe, axle 1, left side
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe

TOE_CONSTANT(1,2)   0 ; deg ! [D] Constant toe, axle 1, right side
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe

TOE_CONSTANT(2,1)   0 ; deg ! [D] Constant toe, axle 2, left side
TOE_OFFSET(2,1)     0 ; deg ! Offset added (after gain) to get toe

TOE_CONSTANT(2,2)   0 ; deg ! [D] Constant toe, axle 2, right side
TOE_OFFSET(2,2)     0 ; deg ! Offset added (after gain) to get toe

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT      1 ; s ! [D] Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UNLOCK_AT: Transmission speed for unlocking the torque converter. Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UNLOCK_AT_GAIN and UNLOCK_AT_OFFSET. Throttle
! position used in the calculation can be adjusted with THROTTLE_SCALE_UNLOCK_AT and
! THROTTLE_START_UNLOCK_AT. This configurable function supports 18 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IGEAR
! is used to identify the dataset when reading data.

UNLOCK_AT_CONSTANT(1) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(1)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(2) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(2)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(3) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(3)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(4) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(4)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(5) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(5)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(6) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(6)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(7) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(7)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(7) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(8) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(8)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(8) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(9) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(9)   1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(9) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(10) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(10)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(10) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(11) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(11)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(11) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(12) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(12)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(12) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(13) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(13)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(13) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(14) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(14)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(14) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(15) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(15)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(15) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(16) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(16)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(16) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(17) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(17)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(17) 0 ; rpm ! Offset added (after gain) to get transmission speed

UNLOCK_AT_CONSTANT(18) 2000 ; rpm ! [D] Constant transmission speed
UNLOCK_AT_GAIN(18)  1 ! Gain multiplied with calculated value to get transmission
                      ! speed
UNLOCK_AT_OFFSET(18) 0 ; rpm ! Offset added (after gain) to get transmission speed

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(6) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(7) LINEAR_FLAT ! shifting between gears 7 and 8
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(7) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(7) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(7) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(8) LINEAR_FLAT ! shifting between gears 8 and 9
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(8) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(8) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(8) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(9) LINEAR_FLAT ! shifting between gears 9 and 10
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(9) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(9) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(9) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(10) LINEAR_FLAT ! shifting between gears 10 and 11
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(10) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(10) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(10) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(11) LINEAR_FLAT ! shifting between gears 11 and 12
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(11) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(11) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(11) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(12) LINEAR_FLAT ! shifting between gears 12 and 13
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(12) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(12) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(12) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(13) LINEAR_FLAT ! shifting between gears 13 and 14
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(13) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(13) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(13) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(14) LINEAR_FLAT ! shifting between gears 14 and 15
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(14) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(14) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(14) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(15) LINEAR_FLAT ! shifting between gears 15 and 16
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(15) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(15) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(15) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(16) LINEAR_FLAT ! shifting between gears 16 and 17
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(16) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(16) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(16) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! [D] 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(17) LINEAR_FLAT ! shifting between gears 17 and 18
 0, 350
 1, 1500
ENDTABLE
UPSHIFT_TRANS_GAIN(17) 1 ! Gain multiplied with calculated value to get transmission
                         ! speed
UPSHIFT_TRANS_OFFSET(17) 0 ; rpm ! Offset added (after gain) to get transmission
                           ! speed
THROTTLE_START_UPSHIFT(17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(17) 1 ! Scale factor divided into (throttle position -
                             ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment


END
