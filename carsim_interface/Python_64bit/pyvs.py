# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyvs', [dirname(__file__)])
            print(fp, pathname, description)
        except ImportError:
            import _pyvs
            return _pyvs
        if fp is not None:
            try:
                _mod = imp.load_module('_pyvs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyvs = swig_import_helper()
    del swig_import_helper
else:
    import _pyvs
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def vs_set_custom_api_error_message_function(errorMsgFunc):
    return _pyvs.vs_set_custom_api_error_message_function(errorMsgFunc)
vs_set_custom_api_error_message_function = _pyvs.vs_set_custom_api_error_message_function

def vs_load_library(inpathDLL):
    return _pyvs.vs_load_library(inpathDLL)
vs_load_library = _pyvs.vs_load_library

def vs_free_library(dll):
    return _pyvs.vs_free_library(dll)
vs_free_library = _pyvs.vs_free_library

def vs_get_dll_path(simfile):
    return _pyvs.vs_get_dll_path(simfile)
vs_get_dll_path = _pyvs.vs_get_dll_path

def vs_get_api(indll, dll_fname):
    return _pyvs.vs_get_api(indll, dll_fname)
vs_get_api = _pyvs.vs_get_api

def vs_get_api_basic(dll, dll_fname):
    return _pyvs.vs_get_api_basic(dll, dll_fname)
vs_get_api_basic = _pyvs.vs_get_api_basic

def vs_get_api_extend(dll, dll_fname):
    return _pyvs.vs_get_api_extend(dll, dll_fname)
vs_get_api_extend = _pyvs.vs_get_api_extend

def vs_get_api_road(dll, dll_fname):
    return _pyvs.vs_get_api_road(dll, dll_fname)
vs_get_api_road = _pyvs.vs_get_api_road

def vs_get_api_install_external(dll, dll_fname):
    return _pyvs.vs_get_api_install_external(dll, dll_fname)
vs_get_api_install_external = _pyvs.vs_get_api_install_external

def vs_run(simfile):
    return _pyvs.vs_run(simfile)
vs_run = _pyvs.vs_run

def vs_statement(key, buffer, stopError):
    return _pyvs.vs_statement(key, buffer, stopError)
vs_statement = _pyvs.vs_statement

def vs_copy_export_vars():
    return _pyvs.vs_copy_export_vars()
vs_copy_export_vars = _pyvs.vs_copy_export_vars

def vs_copy_import_vars(imports):
    return _pyvs.vs_copy_import_vars(imports)
vs_copy_import_vars = _pyvs.vs_copy_import_vars

def vs_copy_io(imports):
    return _pyvs.vs_copy_io(imports)
vs_copy_io = _pyvs.vs_copy_io

def vs_integrate_io(t, imports):
    return _pyvs.vs_integrate_io(t, imports)
vs_integrate_io = _pyvs.vs_integrate_io

def vs_integrate_IO(t, imports):
    return _pyvs.vs_integrate_IO(t, imports)
vs_integrate_IO = _pyvs.vs_integrate_IO

def vs_read_configuration(simfile, n_import, n_export, tstart, tstop, tstep):
    return _pyvs.vs_read_configuration(simfile, n_import, n_export, tstart, tstop, tstep)
vs_read_configuration = _pyvs.vs_read_configuration

def vs_scale_import_vars():
    return _pyvs.vs_scale_import_vars()
vs_scale_import_vars = _pyvs.vs_scale_import_vars

def vs_terminate_run(t):
    return _pyvs.vs_terminate_run(t)
vs_terminate_run = _pyvs.vs_terminate_run

def vs_during_event():
    return _pyvs.vs_during_event()
vs_during_event = _pyvs.vs_during_event

def vs_error_occurred():
    return _pyvs.vs_error_occurred()
vs_error_occurred = _pyvs.vs_error_occurred

def vs_get_tstep():
    return _pyvs.vs_get_tstep()
vs_get_tstep = _pyvs.vs_get_tstep

def vs_opt_pause():
    return _pyvs.vs_opt_pause()
vs_opt_pause = _pyvs.vs_opt_pause

def vs_clear_error_message():
    return _pyvs.vs_clear_error_message()
vs_clear_error_message = _pyvs.vs_clear_error_message

def vs_clear_output_message():
    return _pyvs.vs_clear_output_message()
vs_clear_output_message = _pyvs.vs_clear_output_message

def vs_get_echofile_name():
    return _pyvs.vs_get_echofile_name()
vs_get_echofile_name = _pyvs.vs_get_echofile_name

def vs_get_endfile_name():
    return _pyvs.vs_get_endfile_name()
vs_get_endfile_name = _pyvs.vs_get_endfile_name

def vs_get_erdfile_name():
    return _pyvs.vs_get_erdfile_name()
vs_get_erdfile_name = _pyvs.vs_get_erdfile_name

def vs_get_error_message():
    return _pyvs.vs_get_error_message()
vs_get_error_message = _pyvs.vs_get_error_message

def vs_get_infile_name():
    return _pyvs.vs_get_infile_name()
vs_get_infile_name = _pyvs.vs_get_infile_name

def vs_get_logfile_name():
    return _pyvs.vs_get_logfile_name()
vs_get_logfile_name = _pyvs.vs_get_logfile_name

def vs_get_output_message():
    return _pyvs.vs_get_output_message()
vs_get_output_message = _pyvs.vs_get_output_message

def vs_get_simfile_name():
    return _pyvs.vs_get_simfile_name()
vs_get_simfile_name = _pyvs.vs_get_simfile_name

def vs_get_version_model():
    return _pyvs.vs_get_version_model()
vs_get_version_model = _pyvs.vs_get_version_model

def vs_get_version_product():
    return _pyvs.vs_get_version_product()
vs_get_version_product = _pyvs.vs_get_version_product

def vs_get_version_vs():
    return _pyvs.vs_get_version_vs()
vs_get_version_vs = _pyvs.vs_get_version_vs

def vs_printf(format):
    return _pyvs.vs_printf(format)
vs_printf = _pyvs.vs_printf

def vs_printf_error(format):
    return _pyvs.vs_printf_error(format)
vs_printf_error = _pyvs.vs_printf_error

def vs_install_calc_function(calc):
    return _pyvs.vs_install_calc_function(calc)
vs_install_calc_function = _pyvs.vs_install_calc_function

def vs_install_echo_function(echo):
    return _pyvs.vs_install_echo_function(echo)
vs_install_echo_function = _pyvs.vs_install_echo_function

def vs_install_setdef_function(setdef):
    return _pyvs.vs_install_setdef_function(setdef)
vs_install_setdef_function = _pyvs.vs_install_setdef_function

def vs_install_scan_function(scan):
    return _pyvs.vs_install_scan_function(scan)
vs_install_scan_function = _pyvs.vs_install_scan_function

def vs_install_free_function(free):
    return _pyvs.vs_install_free_function(free)
vs_install_free_function = _pyvs.vs_install_free_function

def vs_install_calc_function2(calc, userData):
    return _pyvs.vs_install_calc_function2(calc, userData)
vs_install_calc_function2 = _pyvs.vs_install_calc_function2

def vs_install_echo_function2(echo, userData):
    return _pyvs.vs_install_echo_function2(echo, userData)
vs_install_echo_function2 = _pyvs.vs_install_echo_function2

def vs_install_setdef_function2(setdef, userData):
    return _pyvs.vs_install_setdef_function2(setdef, userData)
vs_install_setdef_function2 = _pyvs.vs_install_setdef_function2

def vs_install_scan_function2(scan, userData):
    return _pyvs.vs_install_scan_function2(scan, userData)
vs_install_scan_function2 = _pyvs.vs_install_scan_function2

def vs_install_free_function2(func, userData):
    return _pyvs.vs_install_free_function2(func, userData)
vs_install_free_function2 = _pyvs.vs_install_free_function2

def vs_bar_graph_update(arg1):
    return _pyvs.vs_bar_graph_update(arg1)
vs_bar_graph_update = _pyvs.vs_bar_graph_update

def vs_free_all():
    return _pyvs.vs_free_all()
vs_free_all = _pyvs.vs_free_all

def vs_initialize(t, ext_calc, ext_echo):
    return _pyvs.vs_initialize(t, ext_calc, ext_echo)
vs_initialize = _pyvs.vs_initialize

def vs_integrate(t, ext_eq_in):
    return _pyvs.vs_integrate(t, ext_eq_in)
vs_integrate = _pyvs.vs_integrate

def vs_integrate_io_2(t, imports, ext_calc):
    return _pyvs.vs_integrate_io_2(t, imports, ext_calc)
vs_integrate_io_2 = _pyvs.vs_integrate_io_2

def vs_setdef(ext_setdef):
    return _pyvs.vs_setdef(ext_setdef)
vs_setdef = _pyvs.vs_setdef

def vs_read(simfile, ext_scan):
    return _pyvs.vs_read(simfile, ext_scan)
vs_read = _pyvs.vs_read

def vs_setdef_and_read(simfile, ext_setdef, ext_scan):
    return _pyvs.vs_setdef_and_read(simfile, ext_setdef, ext_scan)
vs_setdef_and_read = _pyvs.vs_setdef_and_read

def vs_stop_run():
    return _pyvs.vs_stop_run()
vs_stop_run = _pyvs.vs_stop_run

def vs_terminate(t, ext_echo):
    return _pyvs.vs_terminate(t, ext_echo)
vs_terminate = _pyvs.vs_terminate

def vs_define_import(keyword, desc, real, arg4):
    return _pyvs.vs_define_import(keyword, desc, real, arg4)
vs_define_import = _pyvs.vs_define_import

def vs_define_indexed_parameter_array(keyword):
    return _pyvs.vs_define_indexed_parameter_array(keyword)
vs_define_indexed_parameter_array = _pyvs.vs_define_indexed_parameter_array

def vs_define_output(shortname, longname, real, arg4):
    return _pyvs.vs_define_output(shortname, longname, real, arg4)
vs_define_output = _pyvs.vs_define_output

def vs_define_parameter(keyword, desc, arg3, arg4):
    return _pyvs.vs_define_parameter(keyword, desc, arg3, arg4)
vs_define_parameter = _pyvs.vs_define_parameter

def vs_define_parameter_int(keyword, desc, arg3):
    return _pyvs.vs_define_parameter_int(keyword, desc, arg3)
vs_define_parameter_int = _pyvs.vs_define_parameter_int

def vs_add_echo_header(text):
    return _pyvs.vs_add_echo_header(text)
vs_add_echo_header = _pyvs.vs_add_echo_header

def vs_define_units(desc, gain):
    return _pyvs.vs_define_units(desc, gain)
vs_define_units = _pyvs.vs_define_units

def vs_define_variable(keyword, desc, arg3):
    return _pyvs.vs_define_variable(keyword, desc, arg3)
vs_define_variable = _pyvs.vs_define_variable

def vs_get_sym_attribute(id, type, att):
    return _pyvs.vs_get_sym_attribute(id, type, att)
vs_get_sym_attribute = _pyvs.vs_get_sym_attribute

def vs_get_var_id(keyword, type):
    return _pyvs.vs_get_var_id(keyword, type)
vs_get_var_id = _pyvs.vs_get_var_id

def vs_get_var_ptr(keyword):
    return _pyvs.vs_get_var_ptr(keyword)
vs_get_var_ptr = _pyvs.vs_get_var_ptr

def vs_get_var_ptr_int(keyword):
    return _pyvs.vs_get_var_ptr_int(keyword)
vs_get_var_ptr_int = _pyvs.vs_get_var_ptr_int

def vs_have_keyword_in_database(keyword):
    return _pyvs.vs_have_keyword_in_database(keyword)
vs_have_keyword_in_database = _pyvs.vs_have_keyword_in_database

def vs_import_result(id, native):
    return _pyvs.vs_import_result(id, native)
vs_import_result = _pyvs.vs_import_result

def vs_install_calc_func(name, func):
    return _pyvs.vs_install_calc_func(name, func)
vs_install_calc_func = _pyvs.vs_install_calc_func

def vs_install_symbolic_func(name, func, n_args):
    return _pyvs.vs_install_symbolic_func(name, func, n_args)
vs_install_symbolic_func = _pyvs.vs_install_symbolic_func

def vs_install_keyword_alias(existing, alias):
    return _pyvs.vs_install_keyword_alias(existing, alias)
vs_install_keyword_alias = _pyvs.vs_install_keyword_alias

def vs_read_next_line(buffer, n):
    return _pyvs.vs_read_next_line(buffer, n)
vs_read_next_line = _pyvs.vs_read_next_line

def vs_set_stop_run(stop_gt_0, format):
    return _pyvs.vs_set_stop_run(stop_gt_0, format)
vs_set_stop_run = _pyvs.vs_set_stop_run

def vs_set_sym_attribute(id, type, att):
    return _pyvs.vs_set_sym_attribute(id, type, att)
vs_set_sym_attribute = _pyvs.vs_set_sym_attribute

def vs_set_sym_int(id, dataType, value):
    return _pyvs.vs_set_sym_int(id, dataType, value)
vs_set_sym_int = _pyvs.vs_set_sym_int

def vs_set_sym_real(id, dataType, value):
    return _pyvs.vs_set_sym_real(id, dataType, value)
vs_set_sym_real = _pyvs.vs_set_sym_real

def vs_set_units(var_keyword, units_keyword):
    return _pyvs.vs_set_units(var_keyword, units_keyword)
vs_set_units = _pyvs.vs_set_units

def vs_string_copy_internal(target, source):
    return _pyvs.vs_string_copy_internal(target, source)
vs_string_copy_internal = _pyvs.vs_string_copy_internal

def vs_write_f_to_echo_file(key, arg2, doc):
    return _pyvs.vs_write_f_to_echo_file(key, arg2, doc)
vs_write_f_to_echo_file = _pyvs.vs_write_f_to_echo_file

def vs_write_header_to_echo_file(buffer):
    return _pyvs.vs_write_header_to_echo_file(buffer)
vs_write_header_to_echo_file = _pyvs.vs_write_header_to_echo_file

def vs_write_i_to_echo_file(key, arg2, doc):
    return _pyvs.vs_write_i_to_echo_file(key, arg2, doc)
vs_write_i_to_echo_file = _pyvs.vs_write_i_to_echo_file

def vs_write_to_echo_file(format):
    return _pyvs.vs_write_to_echo_file(format)
vs_write_to_echo_file = _pyvs.vs_write_to_echo_file

def vs_write_to_logfile(level, format):
    return _pyvs.vs_write_to_logfile(level, format)
vs_write_to_logfile = _pyvs.vs_write_to_logfile

def vs_get_dzds_dzdl(s, l, dzds, dzdl):
    return _pyvs.vs_get_dzds_dzdl(s, l, dzds, dzdl)
vs_get_dzds_dzdl = _pyvs.vs_get_dzds_dzdl

def vs_get_dzds_dzdl_i(s, l, dzds, dzdl, inst):
    return _pyvs.vs_get_dzds_dzdl_i(s, l, dzds, dzdl, inst)
vs_get_dzds_dzdl_i = _pyvs.vs_get_dzds_dzdl_i

def vs_get_road_contact(y, x, inst, z, dzdy, dzdx, mu):
    return _pyvs.vs_get_road_contact(y, x, inst, z, dzdy, dzdx, mu)
vs_get_road_contact = _pyvs.vs_get_road_contact

def vs_get_road_contact_sl(s, l, inst, z, dzds, dzdl, mu):
    return _pyvs.vs_get_road_contact_sl(s, l, inst, z, dzds, dzdl, mu)
vs_get_road_contact_sl = _pyvs.vs_get_road_contact_sl

def vs_get_road_start_stop(start, stop):
    return _pyvs.vs_get_road_start_stop(start, stop)
vs_get_road_start_stop = _pyvs.vs_get_road_start_stop

def vs_get_road_xyz(s, l, x, y, z):
    return _pyvs.vs_get_road_xyz(s, l, x, y, z)
vs_get_road_xyz = _pyvs.vs_get_road_xyz

def vs_road_curv_i(s, inst):
    return _pyvs.vs_road_curv_i(s, inst)
vs_road_curv_i = _pyvs.vs_road_curv_i

def vs_road_l(x, y):
    return _pyvs.vs_road_l(x, y)
vs_road_l = _pyvs.vs_road_l

def vs_road_l_i(x, y, inst):
    return _pyvs.vs_road_l_i(x, y, inst)
vs_road_l_i = _pyvs.vs_road_l_i

def vs_road_pitch_sl_i(s, l, yaw, inst):
    return _pyvs.vs_road_pitch_sl_i(s, l, yaw, inst)
vs_road_pitch_sl_i = _pyvs.vs_road_pitch_sl_i

def vs_road_roll_sl_i(s, l, yaw, inst):
    return _pyvs.vs_road_roll_sl_i(s, l, yaw, inst)
vs_road_roll_sl_i = _pyvs.vs_road_roll_sl_i

def vs_road_s(x, y):
    return _pyvs.vs_road_s(x, y)
vs_road_s = _pyvs.vs_road_s

def vs_road_s_i(x, y, inst):
    return _pyvs.vs_road_s_i(x, y, inst)
vs_road_s_i = _pyvs.vs_road_s_i

def vs_road_x(s):
    return _pyvs.vs_road_x(s)
vs_road_x = _pyvs.vs_road_x

def vs_road_x_i(sy, inst):
    return _pyvs.vs_road_x_i(sy, inst)
vs_road_x_i = _pyvs.vs_road_x_i

def vs_road_x_sl_i(s, l, inst):
    return _pyvs.vs_road_x_sl_i(s, l, inst)
vs_road_x_sl_i = _pyvs.vs_road_x_sl_i

def vs_road_y(s):
    return _pyvs.vs_road_y(s)
vs_road_y = _pyvs.vs_road_y

def vs_road_y_i(sy, inst):
    return _pyvs.vs_road_y_i(sy, inst)
vs_road_y_i = _pyvs.vs_road_y_i

def vs_road_y_sl_i(s, l, inst):
    return _pyvs.vs_road_y_sl_i(s, l, inst)
vs_road_y_sl_i = _pyvs.vs_road_y_sl_i

def vs_road_yaw(sta, direction):
    return _pyvs.vs_road_yaw(sta, direction)
vs_road_yaw = _pyvs.vs_road_yaw

def vs_road_yaw_i(sta, directiony, inst):
    return _pyvs.vs_road_yaw_i(sta, directiony, inst)
vs_road_yaw_i = _pyvs.vs_road_yaw_i

def vs_road_z(x, y):
    return _pyvs.vs_road_z(x, y)
vs_road_z = _pyvs.vs_road_z

def vs_road_z_i(x, yy, inst):
    return _pyvs.vs_road_z_i(x, yy, inst)
vs_road_z_i = _pyvs.vs_road_z_i

def vs_road_z_sl_i(s, l, inst):
    return _pyvs.vs_road_z_sl_i(s, l, inst)
vs_road_z_sl_i = _pyvs.vs_road_z_sl_i

def vs_s_loop(s):
    return _pyvs.vs_s_loop(s)
vs_s_loop = _pyvs.vs_s_loop

def vs_target_l(s):
    return _pyvs.vs_target_l(s)
vs_target_l = _pyvs.vs_target_l

def vs_target_heading(s):
    return _pyvs.vs_target_heading(s)
vs_target_heading = _pyvs.vs_target_heading

def vs_define_moving_objects(n):
    return _pyvs.vs_define_moving_objects(n)
vs_define_moving_objects = _pyvs.vs_define_moving_objects

def vs_define_sensors(n):
    return _pyvs.vs_define_sensors(n)
vs_define_sensors = _pyvs.vs_define_sensors

def vs_free_sensors_and_objects():
    return _pyvs.vs_free_sensors_and_objects()
vs_free_sensors_and_objects = _pyvs.vs_free_sensors_and_objects

def vs_get_n_export_sensor(max_connections):
    return _pyvs.vs_get_n_export_sensor(max_connections)
vs_get_n_export_sensor = _pyvs.vs_get_n_export_sensor

def vs_get_sensor_connections(connect):
    return _pyvs.vs_get_sensor_connections(connect)
vs_get_sensor_connections = _pyvs.vs_get_sensor_connections

def vs_define_table(root, ntab, ninst):
    return _pyvs.vs_define_table(root, ntab, ninst)
vs_define_table = _pyvs.vs_define_table

def vs_table_calc(index, xcol, x, itab, inst):
    return _pyvs.vs_table_calc(index, xcol, x, itab, inst)
vs_table_calc = _pyvs.vs_table_calc

def vs_table_index(name):
    return _pyvs.vs_table_index(name)
vs_table_index = _pyvs.vs_table_index

def vs_table_ntab(index):
    return _pyvs.vs_table_ntab(index)
vs_table_ntab = _pyvs.vs_table_ntab

def vs_table_ninst(index):
    return _pyvs.vs_table_ninst(index)
vs_table_ninst = _pyvs.vs_table_ninst

def vs_copy_table_data(tabg):
    return _pyvs.vs_copy_table_data(tabg)
vs_copy_table_data = _pyvs.vs_copy_table_data

def vs_install_keyword_tab_group(tabs):
    return _pyvs.vs_install_keyword_tab_group(tabs)
vs_install_keyword_tab_group = _pyvs.vs_install_keyword_tab_group

def vs_malloc_table_data(tab, type, nx, ny):
    return _pyvs.vs_malloc_table_data(tab, type, nx, ny)
vs_malloc_table_data = _pyvs.vs_malloc_table_data

def vs_free_saved_states():
    return _pyvs.vs_free_saved_states()
vs_free_saved_states = _pyvs.vs_free_saved_states

def vs_get_request_to_restore():
    return _pyvs.vs_get_request_to_restore()
vs_get_request_to_restore = _pyvs.vs_get_request_to_restore

def vs_get_request_to_save():
    return _pyvs.vs_get_request_to_save()
vs_get_request_to_save = _pyvs.vs_get_request_to_save

def vs_restore_state():
    return _pyvs.vs_restore_state()
vs_restore_state = _pyvs.vs_restore_state

def vs_save_state():
    return _pyvs.vs_save_state()
vs_save_state = _pyvs.vs_save_state

def vs_set_request_to_restore(t):
    return _pyvs.vs_set_request_to_restore(t)
vs_set_request_to_restore = _pyvs.vs_set_request_to_restore

def vs_start_save_timer(t):
    return _pyvs.vs_start_save_timer(t)
vs_start_save_timer = _pyvs.vs_start_save_timer

def vs_stop_save_timer():
    return _pyvs.vs_stop_save_timer()
vs_stop_save_timer = _pyvs.vs_stop_save_timer

def vs_get_saved_state_time(t):
    return _pyvs.vs_get_saved_state_time(t)
vs_get_saved_state_time = _pyvs.vs_get_saved_state_time

def vs_copy_all_state_vars_from_array(array):
    return _pyvs.vs_copy_all_state_vars_from_array(array)
vs_copy_all_state_vars_from_array = _pyvs.vs_copy_all_state_vars_from_array

def vs_copy_all_state_vars_to_array(array):
    return _pyvs.vs_copy_all_state_vars_to_array(array)
vs_copy_all_state_vars_to_array = _pyvs.vs_copy_all_state_vars_to_array

def vs_copy_differential_state_vars_from_array(array):
    return _pyvs.vs_copy_differential_state_vars_from_array(array)
vs_copy_differential_state_vars_from_array = _pyvs.vs_copy_differential_state_vars_from_array

def vs_copy_differential_state_vars_to_array(array):
    return _pyvs.vs_copy_differential_state_vars_to_array(array)
vs_copy_differential_state_vars_to_array = _pyvs.vs_copy_differential_state_vars_to_array

def vs_copy_extra_state_vars_from_array(array):
    return _pyvs.vs_copy_extra_state_vars_from_array(array)
vs_copy_extra_state_vars_from_array = _pyvs.vs_copy_extra_state_vars_from_array

def vs_copy_extra_state_vars_to_array(array):
    return _pyvs.vs_copy_extra_state_vars_to_array(array)
vs_copy_extra_state_vars_to_array = _pyvs.vs_copy_extra_state_vars_to_array

def vs_get_export_names(expNames):
    return _pyvs.vs_get_export_names(expNames)
vs_get_export_names = _pyvs.vs_get_export_names

def vs_get_import_names(impNames):
    return _pyvs.vs_get_import_names(impNames)
vs_get_import_names = _pyvs.vs_get_import_names

def vs_n_derivatives():
    return _pyvs.vs_n_derivatives()
vs_n_derivatives = _pyvs.vs_n_derivatives

def vs_n_extra_state_variables():
    return _pyvs.vs_n_extra_state_variables()
vs_n_extra_state_variables = _pyvs.vs_n_extra_state_variables

def vs_get_lat_pos_of_edge(edge, s, opt_road, l):
    return _pyvs.vs_get_lat_pos_of_edge(edge, s, opt_road, l)
vs_get_lat_pos_of_edge = _pyvs.vs_get_lat_pos_of_edge

def vs_scale_export_vars():
    return _pyvs.vs_scale_export_vars()
vs_scale_export_vars = _pyvs.vs_scale_export_vars

def vs_define_imp(keyword, real, units, native, component, desc):
    return _pyvs.vs_define_imp(keyword, real, units, native, component, desc)
vs_define_imp = _pyvs.vs_define_imp

def vs_define_out(shortname, longname, real, units, genname, bodyname, comp):
    return _pyvs.vs_define_out(shortname, longname, real, units, genname, bodyname, comp)
vs_define_out = _pyvs.vs_define_out

def vs_define_par(keyword, par, value, units, visible, init, desc):
    return _pyvs.vs_define_par(keyword, par, value, units, visible, init, desc)
vs_define_par = _pyvs.vs_define_par

def vs_define_sypar(keyword, par, value, units, visible, desc):
    return _pyvs.vs_define_sypar(keyword, par, value, units, visible, desc)
vs_define_sypar = _pyvs.vs_define_sypar

def vs_define_ipar_1d(key, n, index):
    return _pyvs.vs_define_ipar_1d(key, n, index)
vs_define_ipar_1d = _pyvs.vs_define_ipar_1d

def vs_define_ipar_2d(key, n1, index1, n2, index2):
    return _pyvs.vs_define_ipar_2d(key, n1, index1, n2, index2)
vs_define_ipar_2d = _pyvs.vs_define_ipar_2d

def vs_define_ipar_3d(key, n1, index1, n2, index2, n3, index3):
    return _pyvs.vs_define_ipar_3d(key, n1, index1, n2, index2, n3, index3)
vs_define_ipar_3d = _pyvs.vs_define_ipar_3d

def vs_define_ipar_4d(key, n1, index1, n2, index2, n3, index3, n4, index4):
    return _pyvs.vs_define_ipar_4d(key, n1, index1, n2, index2, n3, index3, n4, index4)
vs_define_ipar_4d = _pyvs.vs_define_ipar_4d

def vs_define_ipar_5d(key, n1, index1, n2, index2, n3, index3, n4, index4, n5, index5):
    return _pyvs.vs_define_ipar_5d(key, n1, index1, n2, index2, n3, index3, n4, index4, n5, index5)
vs_define_ipar_5d = _pyvs.vs_define_ipar_5d

def vs_define_sv(keyword, real, value, units, desc):
    return _pyvs.vs_define_sv(keyword, real, value, units, desc)
vs_define_sv = _pyvs.vs_define_sv

def vs_path_sstart_id(user_id):
    return _pyvs.vs_path_sstart_id(user_id)
vs_path_sstart_id = _pyvs.vs_path_sstart_id

def vs_path_sstop_id(user_id):
    return _pyvs.vs_path_sstop_id(user_id)
vs_path_sstop_id = _pyvs.vs_path_sstop_id

def vs_path_length_id(user_id):
    return _pyvs.vs_path_length_id(user_id)
vs_path_length_id = _pyvs.vs_path_length_id

def vs_path_is_looped_id(user_id):
    return _pyvs.vs_path_is_looped_id(user_id)
vs_path_is_looped_id = _pyvs.vs_path_is_looped_id

def vs_path_s_id(x, y, user_id, inst):
    return _pyvs.vs_path_s_id(x, y, user_id, inst)
vs_path_s_id = _pyvs.vs_path_s_id

def vs_path_l_id(x, y, user_id, inst):
    return _pyvs.vs_path_l_id(x, y, user_id, inst)
vs_path_l_id = _pyvs.vs_path_l_id

def vs_path_x_id(s, l, user_id, inst):
    return _pyvs.vs_path_x_id(s, l, user_id, inst)
vs_path_x_id = _pyvs.vs_path_x_id

def vs_path_y_id(s, l, user_id, inst):
    return _pyvs.vs_path_y_id(s, l, user_id, inst)
vs_path_y_id = _pyvs.vs_path_y_id

def vs_path_dxds_id(s, l, user_id, inst):
    return _pyvs.vs_path_dxds_id(s, l, user_id, inst)
vs_path_dxds_id = _pyvs.vs_path_dxds_id

def vs_path_dyds_id(s, l, user_id, inst):
    return _pyvs.vs_path_dyds_id(s, l, user_id, inst)
vs_path_dyds_id = _pyvs.vs_path_dyds_id

def vs_path_dxdl_id(s, l, user_id, inst):
    return _pyvs.vs_path_dxdl_id(s, l, user_id, inst)
vs_path_dxdl_id = _pyvs.vs_path_dxdl_id

def vs_path_dydl_id(s, l, user_id, inst):
    return _pyvs.vs_path_dydl_id(s, l, user_id, inst)
vs_path_dydl_id = _pyvs.vs_path_dydl_id

def vs_path_curv_id(s, l, user_id, inst):
    return _pyvs.vs_path_curv_id(s, l, user_id, inst)
vs_path_curv_id = _pyvs.vs_path_curv_id

def vs_road_sstart_id(user_id):
    return _pyvs.vs_road_sstart_id(user_id)
vs_road_sstart_id = _pyvs.vs_road_sstart_id

def vs_road_sstop_id(user_id):
    return _pyvs.vs_road_sstop_id(user_id)
vs_road_sstop_id = _pyvs.vs_road_sstop_id

def vs_road_length_id(user_id):
    return _pyvs.vs_road_length_id(user_id)
vs_road_length_id = _pyvs.vs_road_length_id

def vs_road_is_looped_id(user_id):
    return _pyvs.vs_road_is_looped_id(user_id)
vs_road_is_looped_id = _pyvs.vs_road_is_looped_id

def vs_road_s_id(x, y, user_id, inst):
    return _pyvs.vs_road_s_id(x, y, user_id, inst)
vs_road_s_id = _pyvs.vs_road_s_id

def vs_road_l_id(x, y, user_id, inst):
    return _pyvs.vs_road_l_id(x, y, user_id, inst)
vs_road_l_id = _pyvs.vs_road_l_id

def vs_road_x_id(s, l, user_id, inst):
    return _pyvs.vs_road_x_id(s, l, user_id, inst)
vs_road_x_id = _pyvs.vs_road_x_id

def vs_road_y_id(s, l, user_id, inst):
    return _pyvs.vs_road_y_id(s, l, user_id, inst)
vs_road_y_id = _pyvs.vs_road_y_id

def vs_road_dxds_id(s, l, user_id, inst):
    return _pyvs.vs_road_dxds_id(s, l, user_id, inst)
vs_road_dxds_id = _pyvs.vs_road_dxds_id

def vs_road_dyds_id(s, l, user_id, inst):
    return _pyvs.vs_road_dyds_id(s, l, user_id, inst)
vs_road_dyds_id = _pyvs.vs_road_dyds_id

def vs_road_dxdl_id(s, l, user_id, inst):
    return _pyvs.vs_road_dxdl_id(s, l, user_id, inst)
vs_road_dxdl_id = _pyvs.vs_road_dxdl_id

def vs_road_dydl_id(s, l, user_id, inst):
    return _pyvs.vs_road_dydl_id(s, l, user_id, inst)
vs_road_dydl_id = _pyvs.vs_road_dydl_id

def vs_road_curv_id(s, l, user_id, inst):
    return _pyvs.vs_road_curv_id(s, l, user_id, inst)
vs_road_curv_id = _pyvs.vs_road_curv_id

def vs_road_z_id(s, l, user_id, inst):
    return _pyvs.vs_road_z_id(s, l, user_id, inst)
vs_road_z_id = _pyvs.vs_road_z_id

def vs_road_dzds_id(s, l, user_id, inst):
    return _pyvs.vs_road_dzds_id(s, l, user_id, inst)
vs_road_dzds_id = _pyvs.vs_road_dzds_id

def vs_road_dzdl_id(s, l, user_id, inst):
    return _pyvs.vs_road_dzdl_id(s, l, user_id, inst)
vs_road_dzdl_id = _pyvs.vs_road_dzdl_id

def vs_opt_all_write(arg):
    return _pyvs.vs_opt_all_write(arg)
vs_opt_all_write = _pyvs.vs_opt_all_write
# This file is compatible with both classic and new-style classes.


